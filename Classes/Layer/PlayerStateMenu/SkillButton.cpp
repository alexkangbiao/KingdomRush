#include "SkillButton.h"SkillButton::SkillButton():_skillMenuItem(NULL),_progressTimer(NULL),_dtTime(1.0f) {}SkillButton::~SkillButton() {}SkillButton* SkillButton::createSkillButton(float dtTime,                                            const char* stencil_file_name,                                            const char* button_normal_name,                                            const char* button_click_name){    SkillButton* skillButton = new SkillButton();    if (skillButton        && skillButton->init(dtTime, stencil_file_name, button_normal_name, button_click_name)) {        skillButton->autorelease();        return skillButton;    } else {        delete skillButton;        skillButton = NULL;    }        return NULL;}bool SkillButton::init(float dtTime, const char* stencil_file_name, const char* button_normal_name, const char* button_click_name){    CCAssert(stencil_file_name, "SkillButton::init stencil_file_name != NULL");    CCAssert(button_normal_name, "SkillButton::init button_normal_name != NULL");    CCAssert(button_click_name, "SkillButton::init button_click_name != NULL");        _isSelect = false;    _isReady  = false;    // Notice:添加child时要注意上下层    // 最下方是CCMenuItemImage 其次是模版图片 最上方是CCProgressTimer    _normalSprite   = Sprite::createWithSpriteFrameName(button_normal_name);    _selectedSprite = Sprite::createWithSpriteFrameName(button_click_name);        _skillMenuItem = MenuItemImage::create();    _skillMenuItem->setNormalImage(_normalSprite);    _skillMenuItem->setSelectedImage(_selectedSprite);    _skillMenuItem->setCallback(CC_CALLBACK_1(SkillButton::onTouchClickCallBack, this));     _skillMenuItem->setPosition(Vec2::ZERO);        auto skillMenu = Menu::create(_skillMenuItem, NULL);    skillMenu->setPosition(Vec2::ZERO);    this->addChild(skillMenu, SkillButtonDrawingOrderBackgroundImage);        // 添加阴影模版    _progressTimer = ProgressTimer::create(Sprite::createWithSpriteFrameName(stencil_file_name));    _progressTimer->setPosition(Vec2::ZERO);    _progressTimer->setVisible(false);    _progressTimer->setReverseDirection(true);    _progressTimer->setPercentage(100);//显示原形的百分比    this->addChild(_progressTimer, SkillButtonDrawingOrderProgressImage);        this->_dtTime = dtTime;    return true;}void SkillButton::startSkillButton() {    _skillMenuItem->setNormalImage(_normalSprite);    _skillMenuItem->setEnabled(false);    _skillMenuItem->unselected();    _isReady = false;    _isSelect = false;        _progressTimer->setVisible(true);    ProgressFromTo* actionProgressFromTo = ProgressFromTo::create(_dtTime, 100, 0);    _progressTimer->runAction(Sequence::create(actionProgressFromTo,                                              CallFuncN::create(CC_CALLBACK_1(SkillButton::onCountDownFinishCallBack, this)),                                              NULL));}/** 技能按钮点击回调 */void SkillButton::onTouchClickCallBack(Ref* pSender) {    // 冷却计时，即时状态技能按钮不可点击    log("SkillButton::onTouchClickCallBack");    MenuItemImage* target = dynamic_cast<MenuItemImage *>(pSender);    if (_isSelect) {        target->unselected();        _isSelect = false;    } else {        target->selected();        _isSelect = true;    }        if (_callback) {        _callback(this);    }}void SkillButton::setEnable(bool enable) {    _skillMenuItem->setEnabled(enable);}Size SkillButton::getSkillButtonSize() {    return this->_skillMenuItem->getContentSize();}void SkillButton::unSelected() {    if (_isSelect) {        _skillMenuItem->unselected();        _isSelect = false;    }}/** 技能冷却完成回调 */void SkillButton::onCountDownFinishCallBack(Ref* pSender){//    log("SkillButton::onCountDownFinishCallBack");    // 进度条技能不可见    _progressTimer->setVisible(false);    // 按钮置为可用    _skillMenuItem->setEnabled(true);        _isReady = true;}void SkillButton::setCallback(const ccMenuCallback& callback) {    _callback = callback;}