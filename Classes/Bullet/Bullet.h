#ifndef _BULLET_H_#define _BULLET_H_#include "SoundManager.h"#include "cocos2d.h"#include "GameManager.h"#include "BaseMonster.h"USING_NS_CC;typedef enum {    BULLET_TYPE_ARCHMAGEBOLT  = 0 ,    BULLET_TYPE_ARROW         = 1 ,    BULLET_TYPE_BOMB          = 2 ,    BULLET_TYPE_DRILL         = 3 ,    BULLET_TYPE_DYNAMITE      = 4 ,    BULLET_TYPE_FIREBALL      = 5 ,    BULLET_TYPE_FREEZE        = 6 ,    BULLET_TYPE_LAVA          = 7 ,    BULLET_TYPE_MAGABOLT      = 8 ,    BULLET_TYPE_MECHABOMB     = 9 ,    BULLET_TYPE_MISSILE       = 10,    BULLET_TYPE_NECRBOLT      = 11,    BULLET_TYPE_REDTOTEM      = 12,    BULLET_TYPE_SHIT          = 13,    BULLET_TYPE_TOTEMAXE      = 14,    BULLET_TYPE_TWISTER       = 15,    BULLET_TYPE_VIOLETTOTEM   = 16} BulletType;enum BulletDrawingOrder : unsigned int {    BulletDrawingOrderBulletSprite = 0,    BulletDrawingOrder};class Bullet : public Sprite{public:	 Bullet();    ~Bullet();        virtual bool init();    virtual bool initWithTypeAndLevel(BulletType bulletType, int level);        virtual void shoot(){};    virtual void removeBullet(){};        //重新设置类型和级别，以取得相应类型和级别的参数配置    void refreshTypeAndLevel(BulletType bulletType, int level);    //还原已经发射过的子弹    void restoreBullet();protected:    CC_SYNTHESIZE(BulletType, _bulletType, BulletType); //子弹类型    CC_SYNTHESIZE(int, _level, Level);                  //子弹类型        CC_SYNTHESIZE(std::string, _bulletImageName, BulletImageName); //子弹图片   	CC_SYNTHESIZE(int, _maxForce, MaxForce);            //子弹攻击能量    CC_SYNTHESIZE(int, _bulletScope, BulletScope);      //子弹攻击范围    CC_SYNTHESIZE(int, _bulletSpeed, BulletSpeed);      //子弹飞行的速度    CC_SYNTHESIZE(bool, _hasTowerProperty, HasTowerProperty);      //具有Tower的属性    CC_SYNTHESIZE(bool, _hasSoldierProperty, HasSoldierProperty);  //具有Soldier的属性    CC_SYNTHESIZE(bool, _isAreaAttack, IsAreaAttack);              //是面攻击还是点攻击	CC_SYNTHESIZE(Spawn *, _bulletAction, BulletAction);  //子弹动作//    CC_SYNTHESIZE(bool, _isUsing, IsUsing);             //子弹是否正在用着	Sprite* _bulletSprite;    virtual void addBulletSprite(std::string bulletImageName);        Rect getBulletRect();    Size getBulletContentSize();    Point getBulletPosition();    void setBulletPosition(Point point);    /*     攻击怪物，考虑多种条件：     1. 怪物能否被tower攻击，还是能否被soldier攻击     2. 子弹自身是由tower或者（和）soldier发出     3. 子弹是面攻击还是点攻击     */    virtual void attackMonster();    //处理怪物各种各样的死法    virtual void processMonsterDeath(BaseMonster * monster);    //处理子弹没有打中后产生的效果    virtual void handleMissBullet() {};    //处理子弹结束    virtual void handleFinishBullet();    //处理怪物受伤    void handleHP(BaseMonster * monster);    //计算到某一点需要的时间    float caculateSpendTime(Point toPoint);        //设置子弹的个性化参数配置    virtual void addAdditionalParameterConfig() {};};#endif