#ifndef _BASE_Soldier_H_#define _BASE_Soldier_H_#include "SoundManager.h"#include "BaseMonster.h"#include "cocos2d.h"USING_NS_CC;typedef enum : unsigned int{    SoldierStateNone = 0, //无状态    SoldierStateRun,      //行走	SoldierStateAttack,      //攻击	SoldierStateDeath,    //死亡	SoldierStateWait,     //寻找敌人	SoldierStateSkill1,	SoldierStateSkill2}SoldierState;enum BaseSoldierDrawingOrder : unsigned int {    BaseSoldierDrawingOrderBackground = 0,    BaseSoldierDrawingOrderHPBar,    BaseSoldierDrawingOrderBlood};typedef enum SoldierType {    SOLDIER_TYPE_ASSASSIN        = 0,    SOLDIER_TYPE_DEATHKNIGHT     = 1,    SOLDIER_TYPE_MECHA           = 2,    SOLDIER_TYPE_REFINFORCE_SOLDIER_1     = 3,    SOLDIER_TYPE_REFINFORCE_SOLDIER_2     = 4,    SOLDIER_TYPE_SKELETON        = 5,    SOLDIER_TYPE_TEMPLAR         = 6,    SOLDIER_TYPE_BARRACK         = 7} SoldierType;const Point BIRTH_LOCATION_POINT = Point(40, -30);class BaseSoldier : public Sprite{public:    BaseSoldier();    ~BaseSoldier() {};    //    virtual bool init();    bool initWithSoldierType(SoldierType soldierType, int level);        CC_SYNTHESIZE(SoldierType, _soldierType, SoldierType);    CC_SYNTHESIZE(int, _level, Level);    CC_SYNTHESIZE(float, _maxHp, MaxHp);    CC_SYNTHESIZE(float, _currentHP, CurrentHP);	CC_SYNTHESIZE(float, _force, Force);    CC_SYNTHESIZE(float, _armor, Armor);    CC_SYNTHESIZE(float, _attckScope, AttackScope);    CC_SYNTHESIZE(float, _runSpeed, RunSpeed);	CC_SYNTHESIZE(float, _hpPercentage, HpPercentage);	CC_SYNTHESIZE(SoldierState, _state, State);    CC_SYNTHESIZE_READONLY(ProgressTimer*, _hpBar, HpBar);    CC_SYNTHESIZE(Point, _location, Location);    CC_SYNTHESIZE(std::string, _soldierName, SoldierName);    CC_SYNTHESIZE(float, _attackPeriod, AttackPeriod);      //AttackPeriod    CC_SYNTHESIZE(float, _curePeriod, CurePeriod);          //士兵自愈间隔时间    CC_SYNTHESIZE(float, _curePercentage, CurePercentage);  //士兵每次恢复的比例（百分比）            CC_SYNTHESIZE(BaseMonster*, _nearestMonster, NearestMonster);    	Sprite* baseSprite;    Point getSoldierPosition();    Point getTowerPosition();    Size  getSoldierContentSize();        virtual void reviveSoldier();	virtual void runToLocation(Point point);	virtual void updateSoldier(int level) {};protected:    std::string _baseSpriteImageName;    void addBaseSprite();        Sprite* _hpBackgroungSprite;	virtual void addHPBackgroundAndBar();     SoldierState _lastState;    void setSoldierParameter(SoldierType soldierType, int level);        //计算到某点point所需要花费的时间，计算的时候需要取这个精灵的速度进行计算    float caculateSpendTime(Point toPoint); 	//检测到目标点的方位，false:右边  true:左边    virtual bool checkDirectionForMonster();	virtual void lookingForMonsters(float dt);	    BaseMonster* _farestMonster;    BaseMonster* getCanAttackMonster();    virtual void checkNearestMonster();    virtual void checkFarestMonster();    	virtual void readyForAttackMonster();	virtual void update(float dt);		virtual void runToDestination(Point destination,bool isAttacking){};//	virtual void stopSoldierAnimation();		virtual void runToMonster();	virtual void attackMonster(float dt);    virtual void setSoldierAttackState(float & monsterCurrentHP);	int _attackCount;        Animation* _animationDeath;    Animation* _animationRun;    Animation* _animationBirth;    Animation* _animationAttack;    Animation* _animationSkill1;    Animation* _animationSkill2;    SpriteFrame* _soldierWaitingSpriteFrame;    virtual void setAnimationAndOthers() {};        //自愈    virtual void cureSoldier(float dt);    //添加由于武器升级造成的士兵参数调整    virtual void addAdditionalParameterConfig() {};};#endif