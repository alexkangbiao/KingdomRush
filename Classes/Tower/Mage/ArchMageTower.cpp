#include "ArchMageTower.h"#include "SimplePanleLayer.h"#include "BaseMap.h"#include "GameManager.h"#include "ArchMageBolt.h"#include "Twister.h"#include "SimplePanleLayer.h"bool ArchMageTower::init() {    if (!BaseMageTower::init())    {        return false;    }    this->setTowerType(TOWER_TYPE_ARCHMAGE);    this->initReadyBullets();    this->initMageTower(this->getLevel());    SoundManager::playArchmageReady();        this->schedule(schedule_selector(ArchMageTower::shoot), this->getShootPeriod());    this->schedule(schedule_selector(ArchMageTower::shootTwister), 7.0f);        return true;}#pragma mark - for update functionvoid ArchMageTower::initReadyBullets() {    for (int i = 0; i < READY_BULLET_NUMBER; i++) {        _readyBullet[i] = nullptr;    }}void ArchMageTower::sellTower(){	for(int i = 0; i < READY_BULLET_NUMBER; i++)	{		if (_readyBullet[i] != nullptr) {			_readyBullet[i]->removeFromParent();		}	}    	static_cast<Terrain*>(this->getParent())->setTerrainBaseSpriteVisible(true);	this->removeFromParent();}#pragma mark - for attck functionBullet* ArchMageTower::getMageTowerBullet(){//    log("Artillery bullet vector number is : %ld", _bulletVector.size());        //循环使用已经生成的子弹，否则就转到生成新子弹    for (int i = 0; i < _bulletVector.size(); i++) {        if (!_bulletVector.at(i)->getParent()) {            _bulletVector.at(i)->restoreBullet();            _bulletVector.at(i)->setPosition(_bulletInitPoint);            this->getParent()->addChild(_bulletVector.at(i));            return _bulletVector.at(i);        }    }	auto bullet = ArchMageBolt::create();	bullet->setPosition(_bulletInitPoint);//	bullet->setMaxForce(this->getForce());	this->getParent()->addChild(bullet);     _bulletVector.pushBack(bullet);        return bullet;}void ArchMageTower::prepareBullets(){	for (int i = 0; i < READY_BULLET_NUMBER; i++) {        		if (_readyBullet[i] == nullptr) {			SoundManager::playArchmagePrecharge();            			_shooter->runAction(Animate::create(_shootUpAnimation));			_readyBullet[i] = ArchMageBolt::create();//			_delayBullet[i]->setMaxForce(100);			_readyBullet[i]->setPosition(Point(-10, 50));			this->getParent()->addChild(_readyBullet[i]);            			MoveTo* moveToAction;			if (i == 1) {				moveToAction = MoveTo::create(1.5f, Point(20 * i - 20, 75));			} else {				moveToAction = MoveTo::create(1.5f, Point(20 * i - 20, 65));			}			auto sequence = Sequence::create(moveToAction,                                             DelayTime::create(1.2f),                                             NULL);			_readyBullet[i]->runAction(sequence);			break;		}			}}void ArchMageTower::prepareAnimation() {    _shootUpAnimation   = AnimationCache::getInstance()->getAnimation("ArchMageGuy_up");    _shootDownAnimation = AnimationCache::getInstance()->getAnimation("ArchMageGuy_down");}void ArchMageTower::shoot(float dt){//	this->checkNearestMonster();    _nearestMonster = this->getCanAttackMonster();    	if (_nearestMonster == nullptr) {		this->prepareBullets();	} else if (_nearestMonster != nullptr && _nearestMonster->getCurrentHP() > 0 ) {        		SoundManager::playArchmageShot();        		_currentBullet = this->getMageTowerBullet();		Point shootVector = _nearestMonster->getMonsterPosition() - this->getParent()->getPosition();				auto rotation = atan2(shootVector.y,                              shootVector.x);		_currentBullet->setRotation(rotation);				if (shootVector.y > 0) {			_shooter->runAction(Animate::create(_shootDownAnimation));		} else {			_shooter->runAction(Animate::create(_shootUpAnimation));		}                float duringTime = this->caculateSpendTime(_nearestMonster->getMonsterPosition(), _currentBullet->getBulletSpeed());		for (int i = 0; i < READY_BULLET_NUMBER; i++)		{			if (_readyBullet[i] != nullptr ) {				_readyBullet[i]->setBulletAction(Spawn::create(MoveTo::create(duringTime, shootVector),                                                               nullptr));				_readyBullet[i]->shoot();				_readyBullet[i] = nullptr;			}		}        		_currentBullet->setBulletAction(Spawn::create(MoveTo::create(duringTime, shootVector),                                                     nullptr));		_currentBullet->shoot();		_currentBullet = nullptr;	}}void ArchMageTower::shootTwister(float dt){	if (_nearestMonster != nullptr && _nearestMonster->getCurrentHP() > 0) {		auto twister = Twister::create();		Point shootVector = _nearestMonster->getMonsterPosition() - this->getParent()->getPosition();		twister->setPosition(shootVector);		this->getParent()->addChild(twister);		twister->round();		twister = nullptr;	}}