#include "PathHint.h"USING_NS_CC;PathHint::PathHint():_currentPointCounter(0){};PathHint::~PathHint() {};PathHint* PathHint::createPathHint(std::vector<Point> points){    auto pathHint = new PathHint();    if (pathHint && pathHint->init()) {        pathHint->setPointsVector(points);        pathHint->autorelease();        return pathHint;    }    CC_SAFE_DELETE(pathHint);    return NULL;}bool PathHint::init() {    if (! Sprite::init()) {        return false;    }        this->setSpriteFrame(SpriteFrameCache::getInstance()->getSpriteFrameByName("mapFlag_star_0018.png"));    this->setPosition(_pointsVector.at(0));        return true;}void PathHint::playMovingAnimation() {    for (int i = 0; i < _pointsVector.size(); i ++) {        this->runAction(MoveTo::create(1.0f, _pointsVector.at(i)));    }}#pragma mark - for private functionPoint PathHint::getCurrentPoint() {    return _pointsVector.at(_currentPointCounter);}Point PathHint::getNextPoint() {    auto tempCounter = _currentPointCounter + 5;    if (tempCounter < _pointsVector.size()) {        auto point = this->_pointsVector.at(tempCounter);        return point;    }        return getCurrentPoint();}Point PathHint::getNextPoint(int stepNumber) {    auto tempCounter = _currentPointCounter + stepNumber;    if (tempCounter < _pointsVector.size()) {        auto point = this->_pointsVector.at(tempCounter);        return point;    }        return getCurrentPoint();}Point PathHint::getAndMoveToNextPoint() {    _currentPointCounter++;    if (_currentPointCounter < _pointsVector.size()  ){        auto point = this->_pointsVector.at(_currentPointCounter);        return point;    } else {        _currentPointCounter = _pointsVector.size() - 1 ;    }    return getCurrentPoint();}Point PathHint::getAndMoveToNextPoint(int stepNumber) {    _currentPointCounter += stepNumber;    if (_currentPointCounter < _pointsVector.size()  ){        auto point = this->_pointsVector.at(_currentPointCounter);        return point;    } else {        _currentPointCounter = _pointsVector.size() - 1 ;    }    return getCurrentPoint();}