#include "GameOption.h"#include "GameScene.h"#include "TransitionGame.h"#include "GameView.h"#include "SoundManager.h"#include "PlayerStateMenu.h"#include "SimpleAudioEngine.h"using namespace CocosDenshion;bool GameOption::init() {    if ( !Layer::init() ) {        return false;    }        this->initBackgroundBoard();    this->initButtons();    //option->runAction(Sequence::create(    //		MoveBy::create(0.2f,Point(0,-500))    //		,CallFuncN::create(CC_CALLBACK_0(GameOption::pauseGame, this))    //		,NULL));    return true;}void ::GameOption::initBackgroundBoard() {    backgroundSprite = Sprite::create();    auto leftChain = Sprite::createWithSpriteFrameName("options_chain.png");    leftChain->setAnchorPoint(Vec2::ANCHOR_BOTTOM_LEFT);    leftChain->setPosition(Point(-190, 200));    backgroundSprite->addChild(leftChain, GameOptionDrawingOrderBoard);        auto rightChain = Sprite::createWithSpriteFrameName("options_chain.png");    rightChain->setAnchorPoint(Point(0, 0));    rightChain->setPosition(Point(190, 200));    backgroundSprite->addChild(rightChain, GameOptionDrawingOrderBoard);        	for (int j = -40; j <= 40; j++) {    		auto boardMiddleCenter =                Sprite::createWithSpriteFrame(SpriteFrameCache::getInstance()->getSpriteFrameByName("options_tileMid_center.png"));    		boardMiddleCenter->setPosition(Point(8.5*j, -56));    		backgroundSprite->addChild(boardMiddleCenter);    	}    for (int j =-40; j <= 40; j++) {        auto mid_center = Sprite::createWithSpriteFrame(SpriteFrameCache::getInstance()                                                        ->getSpriteFrameByName("options_tileMid_center.png"));        /*	auto mid_center = Sprite::createWithSpriteFrameName("options_tileMid_center.png");*/        mid_center->setPosition(Point(8.5*j, +56));        backgroundSprite->addChild(mid_center);    }        for(int j = -7; j <= 7; j++) {        auto top_center = Sprite::createWithSpriteFrame(SpriteFrameCache::getInstance()                                                        ->getSpriteFrameByName("options_tileTop_center.png"));        /*auto top_center = Sprite::createWithSpriteFrameName("options_tileTop_center.png");*/        top_center->setPosition(Point(32*j,+161));        backgroundSprite->addChild(top_center);    }        for(int j =-7;j<=7;j++) {        auto top_center = Sprite::createWithSpriteFrame(SpriteFrameCache::getInstance()                                                        ->getSpriteFrameByName("options_tileTop_center.png"));        /*auto top_center = Sprite::createWithSpriteFrameName("options_tileTop_center.png");*/        top_center->setPosition(Point(32*j, -161));        top_center->setFlippedY(true);        backgroundSprite->addChild(top_center);    }    auto mid_left1 = Sprite::createWithSpriteFrameName("options_tileMid_left.png");    mid_left1->setPosition(Point(-369,-56));    backgroundSprite->addChild(mid_left1);    auto mid_left2 = Sprite::createWithSpriteFrameName("options_tileMid_left.png");    mid_left2->setPosition(Point(-369,56));    backgroundSprite->addChild(mid_left2);    auto mid_right1 = Sprite::createWithSpriteFrameName("options_tileMid_right.png");    mid_right1->setPosition(Point(369,-56));    backgroundSprite->addChild(mid_right1);    auto mid_right2 = Sprite::createWithSpriteFrameName("options_tileMid_right.png");    mid_right2->setPosition(Point(369,56));    backgroundSprite->addChild(mid_right2);            auto top_left1 = Sprite::createWithSpriteFrameName("options_tileTop_left.png");    top_left1->setPosition(Point(-347,161));    backgroundSprite->addChild(top_left1);        auto top_left2 = Sprite::createWithSpriteFrameName("options_tileTop_left.png");    top_left2->setFlippedY(true);    top_left2->setPosition(Point(-347,-161));    backgroundSprite->addChild(top_left2);        auto top_right1 = Sprite::createWithSpriteFrameName("options_tileTop_left.png");    top_right1->setPosition(Point(347,-161));    top_right1->setFlippedX(true);    top_right1->setFlippedY(true);    backgroundSprite->addChild(top_right1);        auto top_right2 = Sprite::createWithSpriteFrameName("options_tileTop_left.png");    top_right2->setPosition(Point(347,161));    top_right2->setFlippedX(true);    backgroundSprite->addChild(top_right2);        auto top_left_deco = Sprite::createWithSpriteFrameName("options_tileTop_deco.png");    top_left_deco->setPosition(Point(220,161));    backgroundSprite->addChild(top_left_deco);        auto down_left_deco = Sprite::createWithSpriteFrameName("options_tileTop_deco.png");    down_left_deco->setFlippedY(true);    down_left_deco->setPosition(Point(220,-161));    backgroundSprite->addChild(down_left_deco);        auto top_right_deco = Sprite::createWithSpriteFrameName("options_tileTop_deco.png");    top_right_deco->setFlippedX(true);    top_right_deco->setPosition(Point(-220,161));    backgroundSprite->addChild(top_right_deco);        auto down_right_deco = Sprite::createWithSpriteFrameName("options_tileTop_deco.png");    down_right_deco->setFlippedX(true);    down_right_deco->setFlippedY(true);    down_right_deco->setPosition(Point(-220,-161));    backgroundSprite->addChild(down_right_deco);        auto top_left_cut = Sprite::createWithSpriteFrameName("options_tileTop_cut.png");    top_left_cut->setPosition(Point(-266,161));    backgroundSprite->addChild(top_left_cut);        auto down_left_cut = Sprite::createWithSpriteFrameName("options_tileTop_cut.png");    down_left_cut->setFlippedY(true);    down_left_cut->setPosition(Point(-266,-161));    backgroundSprite->addChild(down_left_cut);        auto top_right_cut = Sprite::createWithSpriteFrameName("options_tileTop_cut.png");    top_right_cut->setFlippedX(true);    top_right_cut->setPosition(Point(266,161));    backgroundSprite->addChild(top_right_cut);        auto down_right_cut = Sprite::createWithSpriteFrameName("options_tileTop_cut.png");    down_right_cut->setFlippedX(true);    down_right_cut->setFlippedY(true);    down_right_cut->setPosition(Point(266,-161));    backgroundSprite->addChild(down_right_cut);        backgroundSprite->setPosition(Point(Director::getInstance()->getVisibleSize().width / 2,                                        Director::getInstance()->getVisibleSize().height / 2 + 20));    this->addChild(backgroundSprite, GameOptionDrawingOrderBoard);}void GameOption::initButtons() {    auto closeButton = MenuItemSprite::create(Sprite::createWithSpriteFrameName("options_close_0001.png"),                                              Sprite::createWithSpriteFrameName("options_close_0002.png"));    closeButton->setCallback(CC_CALLBACK_1(GameOption::onCloseButtonTouch, this));    closeButton->setPosition(Point(337, 156));        auto restartButton = MenuItemSprite::create(Sprite::createWithSpriteFrameName("options_buttons_0003.png"),                                                Sprite::createWithSpriteFrameName("options_buttons_0003.png"));    restartButton->setCallback(CC_CALLBACK_1(GameOption::onCloseButtonTouch, this));    restartButton->setPosition(Point(- restartButton->getContentSize().width / 2 -  5,                                     - 100));            auto exitButton = MenuItemSprite::create(Sprite::createWithSpriteFrameName("options_buttons_0001.png"),                                             Sprite::createWithSpriteFrameName("options_buttons_0001.png"));    exitButton->setCallback(CC_CALLBACK_1(GameOption::onExitButtonTouch, this));    exitButton->setPosition(Point(exitButton->getContentSize().width / 2 + 5,                                  - 100));        auto menu = Menu::create(closeButton, restartButton, exitButton, NULL);    menu->setPosition(Vec2::ZERO);    backgroundSprite->addChild(menu);        auto musicBackground = Sprite::createWithSpriteFrameName("options_butBg_0001.png");    musicBackground->setPosition(Point(-200,50));    auto musicIcon = Sprite::createWithSpriteFrameName("options_optButtons_0001.png");    musicIcon->setPosition(Point(musicBackground->getContentSize().width  / 2,                                 musicBackground->getContentSize().height / 2));    musicIcon->setTag(GameOptionTagMusicButton);    if(UserDefault::getInstance()->getIntegerForKey("backmusic",1) == 0){//0表示禁止BGM，1表示开启        this->addOffIcon(musicIcon);    }    musicBackground->addChild(musicIcon);    backgroundSprite->addChild(musicBackground);        auto effectBackground = Sprite::createWithSpriteFrameName("options_butBg_0001.png");    effectBackground->setPosition(Point(0,50));    auto effectIcon = Sprite::createWithSpriteFrameName("options_optButtons_0003.png");    effectIcon->setPosition(Point(effectBackground->getContentSize().width/2,                                  effectBackground->getContentSize().height/2));    effectIcon->setTag(GameOptionTagEffectButton);    if(UserDefault::getInstance()->getIntegerForKey("backeffect",1)==0){//0表示禁止BGM，1表示开启        this->addOffIcon(effectIcon);    }    effectBackground->addChild(effectIcon);    backgroundSprite->addChild(effectBackground);        auto vibrationBackground = Sprite::createWithSpriteFrameName("options_butBg_0001.png");    vibrationBackground->setPosition(Point(200,50));    auto vibrationIcon = Sprite::createWithSpriteFrameName("options_optButtons_0005.png");    vibrationIcon->setPosition(Point(vibrationBackground->getContentSize().width/2,                                     vibrationBackground->getContentSize().height/2));    vibrationIcon->setTag(GameOptionTagVibrationButton);    vibrationBackground->addChild(vibrationIcon);    backgroundSprite->addChild(vibrationBackground);        auto listener = EventListenerTouchOneByOne::create();    listener->onTouchBegan = CC_CALLBACK_2(GameOption::onTouchBegan, this);    listener->onTouchEnded = CC_CALLBACK_2(GameOption::onTouchEnded, this);    listener->setSwallowTouches(true);    Director::getInstance()->getEventDispatcher()->addEventListenerWithSceneGraphPriority(listener, musicIcon);    Director::getInstance()->getEventDispatcher()->addEventListenerWithSceneGraphPriority(listener->clone(), effectIcon);    Director::getInstance()->getEventDispatcher()->addEventListenerWithSceneGraphPriority(listener->clone(), vibrationIcon);}void GameOption::addOffIcon(Sprite* target) {    auto offIcon = Sprite::createWithSpriteFrameName("options_optButtons_off.png");    offIcon->setPosition(Point(95, 85));    target->addChild(offIcon);}void GameOption::pauseGame() {    Director::getInstance()->pause();}#pragma mark - on callback functionvoid GameOption::onKeyReleased(EventKeyboard::KeyCode keycode, Event* event) {    switch (keycode) {        case EventKeyboard::KeyCode::KEY_BACK:   //返回键听            SoundManager::playClickEffect();            static_cast<PlayerStateMenu*>(this->getParent())->removeGameOption();                        break;        case EventKeyboard::KeyCode::KEY_MENU:      //菜单监听            break;        case::EventKeyboard::KeyCode::KEY_HOME:            break;        default:            break;    }}void GameOption::onCloseButtonTouch(Ref *pSender) {    SoundManager::playClickEffect();    static_cast<PlayerStateMenu*>(this->getParent())->removeGameOption();}void GameOption::onRestartButtonTouch(Ref *pSender) {    ((MenuItemSprite *) pSender)->setScale(0.9);    SoundManager::playClickEffect();    Director::getInstance()->resume();    Director::getInstance()->replaceScene(TransitionGame::create(1.0f, GameScene::playGame(_level, _difficult)));    }void GameOption::onExitButtonTouch(Ref *pSender) {    ((MenuItemSprite *) pSender)->setScale(0.9);    SoundManager::playClickEffect();    Director::getInstance()->resume();    Director::getInstance()->replaceScene(TransitionGame::create(1.0f, GameView::createScene()));}bool GameOption::onTouchBegan(Touch *touch, Event *event) {    auto target = static_cast<Sprite*>(event->getCurrentTarget());        Point locationInNode = target->convertTouchToNodeSpace(touch);    Size size = target->getContentSize();    Rect rect = Rect(0, 0, size.width, size.height);    if (rect.containsPoint(locationInNode))    {        SoundManager::playClickEffect();        target->setScale(0.9f);        return true;    }    return false;}void GameOption::onTouchEnded(Touch *touch, Event *event) {    auto target = static_cast<Sprite*>(event->getCurrentTarget());    target->setScale(1.0f);    if(target->getChildrenCount() ==0 )    {        this->addOffIcon(target);        switch (target->getTag())        {            case(GameOptionTagMusicButton):                SimpleAudioEngine::getInstance()->pauseBackgroundMusic();                UserDefault::getInstance()->setIntegerForKey("backmusic",0);                break;            case(GameOptionTagEffectButton):                UserDefault::getInstance()->setIntegerForKey("backeffect",0);                break;            case(GameOptionTagVibrationButton):                                break;            default:                break;        }    } else {        target->removeAllChildren();        switch (target->getTag())        {            case(GameOptionTagMusicButton):                SimpleAudioEngine::getInstance()->resumeBackgroundMusic();                UserDefault::getInstance()->setIntegerForKey("backeffect",1);                break;            case(GameOptionTagEffectButton):                UserDefault::getInstance()->setIntegerForKey("backmusic",1);                break;            case(GameOptionTagVibrationButton):                                break;            default:                break;        }    }}