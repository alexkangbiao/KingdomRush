#include "ChooseDifficulty.h"#include "GameScene.h"#include "TransitionGame.h"#include "GameManager.h"#include "SoundManager.h"#include "Utility.h"#include "SpriteCacheManager.h"USING_NS_CC;Scene* ChooseDifficulty::createSceneWithLevel(int level) {    //创建一个自释放的场景对象    auto scene = Scene::create();    auto layer = ChooseDifficulty::create();    layer->initWithLevel(level);    scene->addChild(layer);    return scene;}// // 场景初始化方法bool ChooseDifficulty::init() {        if ( !Layer::init() ) {        return false;    }    _visibleSize = Director::getInstance()->getVisibleSize();    _difficulty  = 0;        this->addBackground1st();    this->addBackground2nd();    this->addBackground3rd();        this->addStarSptites();    this->addToggleDifficultLevelItems();    this->addKeyboardListener();    return true;}void ChooseDifficulty::initWithLevel(int level) {    this->readXMLFile(level);    this->addLabels();    this->_level = level;        int starNumber = UserDefault::getInstance()->getIntegerForKey(                                    StringUtils::format(GameManager::getInstance()->LEVEL_SLOTX_STAR_NUMBER, level).c_str(), 0);    _toggleDifficultLevelItem1->setPosition(_toggleDifficultLevelItem1->getPosition() + Point(0, 20));        this->setBadges(starNumber);        this->addThumbImage();}#pragma mark - for add or init functionvoid ChooseDifficulty::addThumbImage() {    auto thumbImage = Sprite::createWithSpriteFrameName(Utility::string_format("thumb_stage%d.png", _level + 1));    thumbImage->setPosition(Point(_magnifyingGlassSprite->getContentSize().width * 0.535,                                  _magnifyingGlassSprite->getContentSize().height * 0.535));    _magnifyingGlassSprite->addChild(thumbImage, ChooseDifficultyDrawingOrderDescription);}void ChooseDifficulty::addBackground1st() {    //for first background image    for(int i = 0; i < 4; i++) {        for  (int j = 0; j < 5; j++) {            auto sprite = Sprite::createWithSpriteFrameName("encyclopedia_bgTile.png");            sprite->setPosition(Point(i * sprite->getContentSize().width,                                      j * sprite->getContentSize().height));            sprite->setAnchorPoint(Vec2::ZERO);            this->addChild(sprite, ChooseDifficultyDrawingOrderBackground1st);        }    }}void ChooseDifficulty::addBackground2nd() {    //第二层背景图片 地图    auto backgroundSprite = Sprite::createWithSpriteFrameName("LevelSelect_Bg.png");    backgroundSprite->setPosition(Point(_visibleSize.width / 2,                                        _visibleSize.height / 2));//点是整个屏幕的中间位置    this->addChild(backgroundSprite, ChooseDifficultyDrawingOrderBackground2nd);}void ChooseDifficulty::addBackground3rd() {    /***********************************************************************************************/    //第三层背景图片 放大镜    _magnifyingGlassSprite = Sprite::createWithSpriteFrameName("LevelSelect_loupe.png");    _magnifyingGlassSprite->setPosition(Point(_visibleSize.width * 0.2,                                              _visibleSize.height * 0.5));    //loupeSprite->setScale(scaleX);    this->addChild(_magnifyingGlassSprite, ChooseDifficultyDrawingOrderBackground3rd);        //关闭按钮    auto closeButtonSprite = MenuItemSprite::create(Sprite::createWithSpriteFrameName("LevelSelect_Back_0001.png"),                                                    Sprite::createWithSpriteFrameName("LevelSelect_Back_0002.png"),                                                    CC_CALLBACK_1(ChooseDifficulty::onMenuClose, this));    closeButtonSprite->setPosition(Point(_visibleSize.width * 0.9,                                         _visibleSize.height * 0.9));     //进入战斗的按钮    auto startButtonSprite = MenuItemSprite::create(                                                    Sprite::createWithSpriteFrameName("levelSelect_startMode_0001.png"),                                                    Sprite::createWithSpriteFrameName("levelSelect_startMode_0002.png"),                                                    CC_CALLBACK_1(ChooseDifficulty::onMenuStart, this));    Menu *menu = Menu::create(closeButtonSprite, startButtonSprite, NULL);    startButtonSprite->setPosition(Point(_visibleSize.width * 0.85,                                         _visibleSize.height * 0.15));    menu->setPosition(Vec2::ZERO);    this->addChild(menu, ChooseDifficultyDrawingOrderBackground3rd);}void ChooseDifficulty::addToggleDifficultLevelItems() {    //按钮1    auto normalMenuItemSprite1 =                MenuItemSprite::create(Sprite::createWithSpriteFrameName("levelSelect_butModes_0005.png"),                                       Sprite::createWithSpriteFrameName("levelSelect_butModes_0001.png"));    auto selectMenuItemSprite1 =                MenuItemSprite::create(Sprite::createWithSpriteFrameName("levelSelect_butModes_0001.png"),                                       Sprite::createWithSpriteFrameName("levelSelect_butModes_0005.png"));    _toggleDifficultLevelItem1 = MenuItemToggle::createWithCallback(                                                                   CC_CALLBACK_1(ChooseDifficulty::onTouchDifficultToggle1,this),                                                                   normalMenuItemSprite1,                                                                   selectMenuItemSprite1, NULL);        _toggleDifficultLevelItem1->setTag(ChooseDifficultyTagToggleDifficultLevelItem1);    _toggleDifficultLevelItem1->setPosition(Point(_visibleSize.width * 0.1,                                                 _visibleSize.height * 0.08));    _toggleDifficultLevelItem1->setSelectedIndex(0);   // 我们刚进入的时候武器标签是被选中的    _toggleDifficultLevelItem1->setEnabled(false); // 选中的标签不能再点击        //-按钮2-    auto normalMenuItemSprite2 = MenuItemSprite::create(Sprite::createWithSpriteFrameName("levelSelect_butModes_0006.png"),                                                        Sprite::createWithSpriteFrameName("levelSelect_butModes_0006.png"));    auto selectMenuItemSprite2 = MenuItemSprite::create(Sprite::createWithSpriteFrameName("levelSelect_butModes_0002.png"),                                                        Sprite::createWithSpriteFrameName("levelSelect_butModes_0002.png"));    auto disableMenuItemSprite2 = MenuItemSprite::create(Sprite::createWithSpriteFrameName("levelSelect_butModes_0004.png"),                                                         Sprite::createWithSpriteFrameName("levelSelect_butModes_0004.png"));            _toggleDifficultLevelItem2 = MenuItemToggle::createWithCallback(                                                     CC_CALLBACK_1(ChooseDifficulty::onTouchDifficultToggle2, this),                                                     normalMenuItemSprite2,                                                     selectMenuItemSprite2,                                                     disableMenuItemSprite2, NULL);    //	CCMenuItemFont::create("ccc")    _toggleDifficultLevelItem2->setSelectedIndex(1);    _toggleDifficultLevelItem2->setEnabled(false);    _toggleDifficultLevelItem2->setPosition(Point(_visibleSize.width * 0.1 + _toggleDifficultLevelItem1->getContentSize().width,                                                 _visibleSize.height * 0.08));        //按钮3    auto normalMenuItemSprite3 = MenuItemSprite::create(Sprite::createWithSpriteFrameName("levelSelect_butModes_0007.png"),                                                        Sprite::createWithSpriteFrameName("levelSelect_butModes_0007.png"));    auto selectMenuItemSprite3 = MenuItemSprite::create(Sprite::createWithSpriteFrameName("levelSelect_butModes_0003.png"),                                                        Sprite::createWithSpriteFrameName("levelSelect_butModes_0003.png"));    auto disableMenuItemSprite3 = MenuItemSprite::create(Sprite::createWithSpriteFrameName("levelSelect_butModes_0004.png"),                                                        Sprite::createWithSpriteFrameName("levelSelect_butModes_0004.png"));        _toggleDifficultLevelItem3 = MenuItemToggle::createWithCallback(                                                                 CC_CALLBACK_1(ChooseDifficulty::onTouchDifficultToggle3, this),                                                                 normalMenuItemSprite3,                                                                 selectMenuItemSprite3,                                                                 disableMenuItemSprite3, NULL);    //	CCMenuItemFont::create("ccc")        _toggleDifficultLevelItem3->setSelectedIndex(2);    _toggleDifficultLevelItem3->setEnabled(false);    _toggleDifficultLevelItem3->setPosition(Point(_visibleSize.width * 0.1  + _toggleDifficultLevelItem1->getContentSize().width * 2,                                                  _visibleSize.height * 0.08));        auto toggleMenu = Menu::create(_toggleDifficultLevelItem1,                                   _toggleDifficultLevelItem2,                                   _toggleDifficultLevelItem3, NULL);    toggleMenu->setPosition(Vec2::ZERO);    this->addChild(toggleMenu, ChooseDifficultyDrawingOrderMenu);}void ChooseDifficulty::addStarSptites() {    //=======================放大镜上小星星等的设置=======================================//    _star1 = Sprite::createWithSpriteFrameName("levelSelect_badges_0002.png");    _star1->setPosition(Point(_magnifyingGlassSprite->getContentSize().width / 2,                              _magnifyingGlassSprite->getContentSize().height * 0.9 + _star1->getContentSize().height * 0.2));    _star1->setRotation(-30.0f);    _magnifyingGlassSprite->addChild(_star1, ChooseDifficultyDrawingOrderStar);        _star2 = Sprite::createWithSpriteFrameName("levelSelect_badges_0002.png");    _star2->setPosition(Point(_magnifyingGlassSprite->getContentSize().width / 2 + _star1->getContentSize().width,                              _magnifyingGlassSprite->getContentSize().height * 0.9 + _star1->getContentSize().height * 0.4));    _star2->setRotation(-15.0f);    _magnifyingGlassSprite->addChild(_star2, ChooseDifficultyDrawingOrderStar);        _star3 = Sprite::createWithSpriteFrameName("levelSelect_badges_0002.png");    _star3->setPosition(Point(_magnifyingGlassSprite->getContentSize().width / 2 + _star1->getContentSize().width * 2,                              _magnifyingGlassSprite->getContentSize().height * 0.9+  _star1->getContentSize().height * 0.3 * 2));    // _star3->setScale(scaleX);    _magnifyingGlassSprite->addChild(_star3, ChooseDifficultyDrawingOrderStar);    //盾牌    _star4 = Sprite::createWithSpriteFrameName("levelSelect_badges_0004.png");    _star4->setPosition(Point(_magnifyingGlassSprite->getContentSize().width / 2 + _star1->getContentSize().width * 3,                              _magnifyingGlassSprite->getContentSize().height * 0.9 + _star1->getContentSize().height * 0.4));    // _star4->setScale(scaleX);    _star4->setRotation(15.0f);    _magnifyingGlassSprite->addChild(_star4, ChooseDifficultyDrawingOrderStar);    //拳头    _star5 = Sprite::createWithSpriteFrameName("levelSelect_badges_0006.png");    _star5->setPosition(Point(_magnifyingGlassSprite->getContentSize().width / 2 + _star1->getContentSize().width * 4,                              _magnifyingGlassSprite->getContentSize().height * 0.9));    //_star5->setScale(scaleX);    _star5->setRotation(30.0f);    _magnifyingGlassSprite->addChild(_star5, ChooseDifficultyDrawingOrderStar);}void ChooseDifficulty::addKeyboardListener() {    auto listenerkeyPad = EventListenerKeyboard::create();    listenerkeyPad->onKeyReleased = CC_CALLBACK_2(ChooseDifficulty::onKeyReleased, this);    Director::getInstance()->getEventDispatcher()->addEventListenerWithSceneGraphPriority(listenerkeyPad, this);    }void ChooseDifficulty::readXMLFile(int level) {    std::string fileName = "xml/level" + std::to_string(level) + "_description.xml";    ValueVector descriptionVector = FileUtils::getInstance()->getValueVectorFromFile(fileName);    for (int i = 0; i < descriptionVector.size(); i++) {        auto txtMap = descriptionVector.at(i).asValueMap();//将键值转化成Map格式，放入txt_map中        int id_int = txtMap.at("id").asInt();//获取id        if(id_int == i) {            _blueTopString  = txtMap.at("blueStrTop").asString();            blackStr[0] = txtMap.at("blackStr1").asString();            blackStr[1] = txtMap.at("blackStr2").asString();            blackStr[2] = txtMap.at("blackStr3").asString();            blueStr[0]  = txtMap.at("blueStr1").asString();            blueStr[1]  = txtMap.at("blueStr2").asString();            blueStr[2]  = txtMap.at("blueStr3").asString();        }    }}void ChooseDifficulty::addLabels() {    auto labelTop = Label::createWithTTF(_blueTopString, "fonts/Marker Felt.ttf", 40);    labelTop->setPosition(Point(_visibleSize.width*0.5, 620));    labelTop->setColor(Color3B(0,0,0));    labelTop->setRotation(3.0f);    labelTop->setAnchorPoint(Point(0,1));    this->addChild(labelTop, ChooseDifficultyDrawingOrderDescription);        /**********************************蓝色字体:挑战、英雄模式、钢铁模式********************************************************/        blueLabel = Label::createWithTTF(blueStr[0], "fonts/Marker Felt.ttf", 30);    blueLabel->setPosition(Point(_visibleSize.width*0.5, 570));    blueLabel->setRotation(3.0f);    blueLabel->setColor(Color3B(65,94,241));    blueLabel->setAnchorPoint(Point(0,1));    this->addChild(blueLabel, ChooseDifficultyDrawingOrderDescription);        blackLabel = Label::createWithTTF(blackStr[0], "fonts/Marker Felt.ttf", 21);    blackLabel->setPosition(Point(_visibleSize.width*0.50, 525));    blackLabel->setRotation(3.0f);    blackLabel->setColor(Color3B(0,0,0));    blackLabel->setAnchorPoint(Point(0,1));    this->addChild(blackLabel, ChooseDifficultyDrawingOrderDescription);}#pragma mark - for on callback functionvoid ChooseDifficulty::onKeyReleased(EventKeyboard::KeyCode keycode, Event* event) {    switch (keycode) {        case EventKeyboard::KeyCode::KEY_BACK:   //返回键听            Director::getInstance()->popScene();            break;        case EventKeyboard::KeyCode::KEY_MENU:      //菜单监听            break;        case::EventKeyboard::KeyCode::KEY_HOME:            break;        default:            break;    }}void ChooseDifficulty::setBadges(int star){    switch(star)    {        case(0):            _toggleDifficultLevelItem1->setSelectedIndex(0);            _toggleDifficultLevelItem2->setSelectedIndex(2);            _toggleDifficultLevelItem3->setSelectedIndex(2);            _toggleDifficultLevelItem1->setPosition(_toggleDifficultLevelItem1->getPosition()+Point(0,20));                        _toggleDifficultLevelItem1->setEnabled(false);            break;        case 1:            _toggleDifficultLevelItem1->setSelectedIndex(0);            _toggleDifficultLevelItem2->setSelectedIndex(2);            _toggleDifficultLevelItem3->setSelectedIndex(2);            _star1->setSpriteFrame(SpriteFrameCache::getInstance()->getSpriteFrameByName("levelSelect_badges_0001.png"));                        _toggleDifficultLevelItem1->setEnabled(false);            break;        case 2:            _toggleDifficultLevelItem1->setSelectedIndex(0);            _toggleDifficultLevelItem2->setSelectedIndex(2);            _toggleDifficultLevelItem3->setSelectedIndex(2);            _toggleDifficultLevelItem1->setEnabled(false);            _star1->setSpriteFrame(SpriteFrameCache::getInstance()->getSpriteFrameByName("levelSelect_badges_0001.png"));            _star2->setSpriteFrame(SpriteFrameCache::getInstance()->getSpriteFrameByName("levelSelect_badges_0001.png"));            break;        case 3:            _toggleDifficultLevelItem1->setSelectedIndex(0);            _toggleDifficultLevelItem2->setSelectedIndex(1);            _toggleDifficultLevelItem3->setSelectedIndex(1);            _toggleDifficultLevelItem1->setEnabled(false);            _toggleDifficultLevelItem2->setEnabled(true);            _toggleDifficultLevelItem3->setEnabled(true);            _star1->setSpriteFrame(SpriteFrameCache::getInstance()->getSpriteFrameByName("levelSelect_badges_0001.png"));            _star2->setSpriteFrame(SpriteFrameCache::getInstance()->getSpriteFrameByName("levelSelect_badges_0001.png"));            _star3->setSpriteFrame(SpriteFrameCache::getInstance()->getSpriteFrameByName("levelSelect_badges_0001.png"));            break;        case 4:            _toggleDifficultLevelItem1->setSelectedIndex(0);            _toggleDifficultLevelItem2->setSelectedIndex(1);            _toggleDifficultLevelItem3->setSelectedIndex(1);            _toggleDifficultLevelItem1->setEnabled(false);            _toggleDifficultLevelItem2->setEnabled(true);            _toggleDifficultLevelItem3->setEnabled(true);            _star1->setSpriteFrame(SpriteFrameCache::getInstance()->getSpriteFrameByName("levelSelect_badges_0001.png"));            _star2->setSpriteFrame(SpriteFrameCache::getInstance()->getSpriteFrameByName("levelSelect_badges_0001.png"));            _star3->setSpriteFrame(SpriteFrameCache::getInstance()->getSpriteFrameByName("levelSelect_badges_0001.png"));            _star4->setSpriteFrame(SpriteFrameCache::getInstance()->getSpriteFrameByName("levelSelect_badges_0003.png"));            break;        case 5:            _toggleDifficultLevelItem1->setSelectedIndex(0);            _toggleDifficultLevelItem2->setSelectedIndex(1);            _toggleDifficultLevelItem3->setSelectedIndex(1);            _toggleDifficultLevelItem1->setEnabled(false);            _toggleDifficultLevelItem2->setEnabled(true);            _toggleDifficultLevelItem3->setEnabled(true);            _star1->setSpriteFrame(SpriteFrameCache::getInstance()->getSpriteFrameByName("levelSelect_badges_0001.png"));            _star2->setSpriteFrame(SpriteFrameCache::getInstance()->getSpriteFrameByName("levelSelect_badges_0001.png"));            _star3->setSpriteFrame(SpriteFrameCache::getInstance()->getSpriteFrameByName("levelSelect_badges_0001.png"));            _star4->setSpriteFrame(SpriteFrameCache::getInstance()->getSpriteFrameByName("levelSelect_badges_0003.png"));            _star5->setSpriteFrame(SpriteFrameCache::getInstance()->getSpriteFrameByName("levelSelect_badges_0005.png"));            break;        default:            break;    }    }#pragma mark - for Callback Function//关闭按钮返回上一场景void ChooseDifficulty::onMenuClose(Ref* pSpender) {    SoundManager::playClickEffect();    Director::getInstance()->popScene();}//开始战斗按钮进入下一场景void ChooseDifficulty::onMenuStart(Ref* pSpender) {    SoundManager::playClickEffect();    Director::getInstance()->replaceScene(TransitionGame::create(2.0f, GameScene::playGame(_level, _difficulty)));    SpriteCacheManager::getInstance()->releaseGameViewSceneSpriteFile();}//升级1void ChooseDifficulty::onTouchDifficultToggle1(Ref* pSpender){    SoundManager::playClickEffect();    _difficulty = 0;    _toggleDifficultLevelItem1->runAction(MoveBy::create(0.1f,Point(0,20)));    if (_toggleDifficultLevelItem2->getSelectedIndex() == 0)        _toggleDifficultLevelItem2->runAction(MoveBy::create(0.1f,Point(0,-20)));    if(_toggleDifficultLevelItem3->getSelectedIndex() == 0)        _toggleDifficultLevelItem3->runAction(MoveBy::create(0.1f,Point(0,-20)));        _toggleDifficultLevelItem1->setEnabled(false);    _toggleDifficultLevelItem1->setSelectedIndex(0);    _toggleDifficultLevelItem2->setSelectedIndex(1);    _toggleDifficultLevelItem2->setEnabled(true);    _toggleDifficultLevelItem3->setSelectedIndex(1);    _toggleDifficultLevelItem3->setEnabled(true);        blueLabel->setString(blueStr[0]);    blackLabel->setString(blackStr[0]);}void ChooseDifficulty::onTouchDifficultToggle2(Ref* pSpender){    SoundManager::playClickEffect();    _difficulty = 1;    _toggleDifficultLevelItem2->runAction(MoveBy::create(0.1f,Point(0,20)));    if (_toggleDifficultLevelItem1->getSelectedIndex() == 0)        _toggleDifficultLevelItem1->runAction(MoveBy::create(0.1f,Point(0,-20)));    if(_toggleDifficultLevelItem3->getSelectedIndex() == 0)        _toggleDifficultLevelItem3->runAction(MoveBy::create(0.1f,Point(0,-20)));    _toggleDifficultLevelItem2->setSelectedIndex(0);    _toggleDifficultLevelItem2->setEnabled(false);    _toggleDifficultLevelItem1->setSelectedIndex(1);    _toggleDifficultLevelItem1->setEnabled(true);    _toggleDifficultLevelItem3->setSelectedIndex(1);    _toggleDifficultLevelItem3->setEnabled(true);                blueLabel->setString(blueStr[1]);    blackLabel->setString(blackStr[1]); }void ChooseDifficulty::onTouchDifficultToggle3(Ref* pSpender) {    SoundManager::playClickEffect();    _difficulty = 2;    _toggleDifficultLevelItem3->runAction(MoveBy::create(0.1f,Point(0,20)));    if (_toggleDifficultLevelItem2->getSelectedIndex() == 0)        _toggleDifficultLevelItem2->runAction(MoveBy::create(0.1f,Point(0,-20)));    if (_toggleDifficultLevelItem1->getSelectedIndex() == 0)        _toggleDifficultLevelItem1->runAction(MoveBy::create(0.1f,Point(0,-20)));    _toggleDifficultLevelItem3->setSelectedIndex(0);    _toggleDifficultLevelItem3->setEnabled(false);    _toggleDifficultLevelItem1->setSelectedIndex(1);    _toggleDifficultLevelItem1->setEnabled(true);    _toggleDifficultLevelItem2->setSelectedIndex(1);    _toggleDifficultLevelItem2->setEnabled(true);          blueLabel->setString(blueStr[2]);    blackLabel->setString(blackStr[2]); }