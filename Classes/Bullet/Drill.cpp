#include "Drill.h"bool Drill::init(){	if (!Bullet::initWithTypeAndLevel(BULLET_TYPE_DRILL, 1)) {		return false;	}    //    this->setBulletType(BULLET_TYPE_DRILL);//    //    this->addBulletSprite("EarthquakeTower_drill_0001.png");	_monsterToBeDrilled = nullptr;			return true;}void Drill::shoot(){	auto monsterVector = GameManager::getInstance()->monsterVector;	for (int j = 0; j < monsterVector.size(); j++) {		auto monster = monsterVector.at(j);		if (monster != nullptr && monster->getCurrentHP() > 0 && monster->getEnableAttackBySoldier()) {			_monsterToBeDrilled = monster;			break;		}	}        if (_monsterToBeDrilled != nullptr) {		this->scheduleOnce(schedule_selector(Drill::drillMonster), 0.5f);        		_bulletSprite->setPosition(_monsterToBeDrilled->getPosition());		_bulletSprite->runAction(Sequence::create(Animate::create(AnimationCache::getInstance()->getAnimation("EarthquakeTower_drill")),                                                  CallFuncN::create(CC_CALLBACK_0(Drill::removeBullet, this)),                                                  nullptr));	} else {		this->removeBullet();	}}void Drill::drillMonster(float dt){	SoundManager::playEarthquakeDrillOut();	if (_monsterToBeDrilled != NULL) {		auto currHp = _monsterToBeDrilled->getCurrentHP() - 100;		if (currHp <= 0) currHp = 0;        _monsterToBeDrilled->setCurrentHP(currHp);		_monsterToBeDrilled->getHpBar()->setPercentage((currHp/_monsterToBeDrilled->getMaxHp())*100);  		if (currHp == 0){			unschedule(schedule_selector(Drill::drillMonster));			_monsterToBeDrilled->death();		}	} else {		removeBullet();	}}void Drill::removeBullet() {	this->removeFromParent();}