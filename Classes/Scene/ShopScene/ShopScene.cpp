#include "ShopScene.h"#include "GameManager.h"#USING_NS_CC;//std::string _introduction[] = {//    "THE BIG BAD BOY OF\n BOMBS! YOU ONLY NEED\n ONE OF THESE TO CLEAR THE\n BATTLEFIELD AND CLAIM THE\n SPOILS OF WAR! JUST TELL\n US WHERE TO DROP IT!",//    "FREEZE THE WORLE!\n\n THE MAGIC IN THIS ROD WILL\n FREZE ALL BADDIES AND\n PREVENT NEW ONES FROM\n APPROACHING ",//    "BLAST YOUR ENEMIES TO\n PLECES WITH THESE\n SPECIALLY DESIGNED\n GNOME EXPLOSIVES.\n\n DESTRUCTION GUARANTEED.",//    "THIS SPECIAL CONCOCTION\n WILL FREEZE YOUR ENEMIES\n HELPLESS IN PLACE FOR A\n WHILE",//    "MAGICAL HEARTS TRAPPED\n IN A BOX.\n\n BREAK GLASS IN AN\n EMERGENCY TO GAIN 5\n EXTRA LIVES.",//    "LEAVE NOTHING TO CHANCE.\n BRING EXTRA GOLD TO THE\n BATTLEFIELD!\n\n EACH BIG WORTH 500\n GOLD PIECES."//};Scene* ShopScene::createScene() {    auto scene = Scene::create();    auto layer = ShopScene::create();    scene->addChild(layer);    return scene;}//初始化场景bool ShopScene::init() {    if ( !Layer::init() ) {        return false;    }        _visibleSize = Director::getInstance()->getVisibleSize(); //获取屏幕大小        this->readParameterFromFile();        this->initBackground();        this->addMenuItems();        str_introduction[0] = "THE BIG BAD BOY OF\n BOMBS! YOU ONLY NEED\n ONE OF THESE TO CLEAR THE\n BATTLEFIELD AND CLAIM THE\n SPOILS OF WAR! JUST TELL\n US WHERE TO DROP IT!";    str_introduction[1] = "FREEZE THE WORLE!\n\n THE MAGIC IN THIS ROD WILL\n FREZE ALL BADDIES AND\n PREVENT NEW ONES FROM\n APPROACHING ";    str_introduction[2] = "BLAST YOUR ENEMIES TO\n PLECES WITH THESE\n SPECIALLY DESIGNED\n GNOME EXPLOSIVES.\n\n DESTRUCTION GUARANTEED.";    str_introduction[3] = "THIS SPECIAL CONCOCTION\n WILL FREEZE YOUR ENEMIES\n HELPLESS IN PLACE FOR A\n WHILE";    str_introduction[4] = "MAGICAL HEARTS TRAPPED\n IN A BOX.\n\n BREAK GLASS IN AN\n EMERGENCY TO GAIN 5\n EXTRA LIVES.";    str_introduction[5] = "LEAVE NOTHING TO CHANCE.\n BRING EXTRA GOLD TO THE\n BATTLEFIELD!\n\n EACH BIG WORTH 500\n GOLD PIECES.";        str_name[0] = "BOY";    str_name[1] = "ICE";    str_name[2] = "BOMB";    str_name[3] = "WATER";    str_name[4] = "HEARTBOX";    str_name[5] = "MONEY";        str_gem[0] = 999;    str_gem[1] = 250;    str_gem[2] = 50;    str_gem[3] = 50;    str_gem[4] = 50;    str_gem[5] = 500;    //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++    this->addBoardContent();            //初始化购买物品的数量************************************    for (int i = 0; i < 6; i++) {        count[i] = UserDefault::getInstance()->getIntegerForKey(                            StringUtils::format(GameManager::getInstance()->SLOTX_SHOP,i).c_str());    }    //==========================================================//购买的物品            initBackpackIcon();            initPicture();      auto listenerkeyPad = EventListenerKeyboard::create();    listenerkeyPad->onKeyReleased = CC_CALLBACK_2(ShopScene::onKeyReleased, this);    _eventDispatcher->addEventListenerWithSceneGraphPriority(listenerkeyPad, this);    return true;}#pragma mark - for init Functionvoid ShopScene::readParameterFromFile() {    std::string fileName = "xml/shop_detail.plist";    auto valueMap = FileUtils::getInstance()->getValueMapFromFile(fileName);        //parse the terrains data    auto arrayShops = valueMap.at("shop").asValueVector();    for (int i = 0; i < arrayShops.size(); i++) {        auto valueMap = (arrayShops[i]).asValueMap();        _nameVector.push_back((valueMap["cargoname"]).asString().c_str());        _descriptionVector.push_back((valueMap["cargodescription"]).asString().c_str());        _priceVector.push_back(atoi((valueMap["price"]).asString().c_str()));    }}void ShopScene::initBackground() {    //背景图片    auto backgroundSprite = Sprite::createWithSpriteFrameName("inaps_BG.png");    backgroundSprite->setPosition(Point(_visibleSize.width / 2,                                        _visibleSize.height / 2 ));    this->addChild(backgroundSprite, ShopSceneDrawingOrderBackground);}void ShopScene::addBoardContent() {    //黑板上的内容    //大标题    _nameLabel = Label::createWithTTF("", "fonts/SohoGothicProMedium.ttf", 24);    _nameLabel->setPosition(Point(680, 560));    this->addChild(_nameLabel, ShopSceneDrawingOrderIconAndLabel);    //数字    _priceLabel = Label::createWithTTF(" ", "fonts/SohoGothicProMedium.ttf", 24);    _priceLabel->setPosition(Point(900, 545));    this->addChild(_priceLabel, ShopSceneDrawingOrderIconAndLabel);    //简介    _descriptionLabel = Label::createWithTTF("", "fonts/SohoGothicProMedium.ttf", 12);    _descriptionLabel->setPosition(Point(900, 440));    this->addChild(_descriptionLabel, ShopSceneDrawingOrderIconAndLabel);        //宝石的数量===============================================    _diamondNumber = UserDefault::getInstance()->getIntegerForKey(GameManager::getInstance()->SLOTX_DIAMOND_NUMBER, 0);    _diamondLabel = Label::createWithTTF(StringUtils::format("%d", _diamondNumber).c_str(), "fonts/SohoGothicProMedium.ttf", 30);    _diamondLabel->setColor(Color3B::WHITE);    _diamondLabel->setPosition(Point(_visibleSize.width * 0.35,                                     _visibleSize.height * 0.92));    this->addChild(_diamondLabel, ShopSceneDrawingOrderIconAndLabel);}void ShopScene::addMenuItems() {    //确定    auto confirmMenuItem = MenuItemSprite::create(Sprite::createWithSpriteFrameName("upgrades_buttons_0003.png"),                                                  Sprite::createWithSpriteFrameName("upgrades_buttons_0004.png"));    confirmMenuItem->setPosition(Point(_visibleSize.width * 0.90,                                       _visibleSize.height * 0.10));    confirmMenuItem->setCallback(CC_CALLBACK_1(ShopScene::onConfirmMenuItemCallback, this));    auto purchaseMenuItem = MenuItemSprite::create(Sprite::createWithSpriteFrameName("inaps_buyButton_0001.png"),                                                   Sprite::createWithSpriteFrameName("inaps_buyButton_0002.png"));    purchaseMenuItem->setPosition(Point(780,320));    purchaseMenuItem->setCallback(CC_CALLBACK_1(ShopScene::onPurchaseMenuItemCallback, this));    auto menu = Menu::create(confirmMenuItem,                             purchaseMenuItem,                             NULL);  //实现切换    menu->setPosition(Vec2::ZERO);    this->addChild(menu, ShopSceneDrawingOrderIconAndLabel);}#pragma mark - for init Functionvoid ShopScene::initBackpackIcon(){    float a[6] = {0.0f,0.13f,0.236f,0.346f,0.46f,0.56f};    for (int i = 0; i < 6; i++) {        auto backPackIcon = Sprite::createWithSpriteFrameName(StringUtils::format("inaps_backPackIcons_000%d.png",i+1).c_str());        backPackIcon->setPosition(156,                                  _visibleSize.height * (0.72f - a[i]));        addChild(backPackIcon, 3);        if(count[i] == 0)            backPackIcon->setVisible(false);        auto countLabel =  Label::createWithTTF(StringUtils::format("%d",count[i]).c_str(), "fonts/SohoGothicProMedium.ttf", 24); //小男孩的数量        countLabel->setPosition(Point(137,                                      _visibleSize.height*(0.70f-a[i])));        addChild(countLabel, 3);        backpackIcons.pushBack(backPackIcon);        countLabels.pushBack(countLabel);    }}//初始化界面void ShopScene::initPicture() {        _borad = Sprite::create();    _borad->setPosition(Point(655,440));    addChild(_borad);        auto shopIcon2 = ShopIcon::createIconWithType(2);//冰杖    shopIcon2->setPosition(Point(830,250));    addChild(shopIcon2);        auto shopIcon5 = ShopIcon::createIconWithType(5);//生命    shopIcon5->setPosition(Point(280,155));    addChild(shopIcon5);        auto shopIcon1 = ShopIcon::createIconWithType(1);//原子弹    shopIcon1->setPosition(Point(640,170));    addChild(shopIcon1);        auto shopIcon4 = ShopIcon::createIconWithType(4);//药瓶    shopIcon4->setPosition(Point(385,145));    addChild(shopIcon4);        auto shopIcon6 = ShopIcon::createIconWithType(6);//金币    shopIcon6->setPosition(Point(800,170));    addChild(shopIcon6);        auto shopIcon3 = ShopIcon::createIconWithType(3);//炸弹    shopIcon3->setPosition(Point(485,130));    addChild(shopIcon3);        shopIcons.pushBack(shopIcon1);    shopIcons.pushBack(shopIcon2);    shopIcons.pushBack(shopIcon3);    shopIcons.pushBack(shopIcon4);    shopIcons.pushBack(shopIcon5);    shopIcons.pushBack(shopIcon6);        shopIcon3->setGlowVisible(true);        setBorad(3);        auto buttonListener = EventListenerTouchOneByOne::create();    buttonListener->onTouchBegan = [&](Touch* touch, Event* event){                auto target = static_cast<ShopIcon*>(event->getCurrentTarget());                Point locationInNode = target->convertToNodeSpace(touch->getLocation());                Size size = target->getShopIconContentSize();        Rect rect;        if (target->getIconType() == 1)            rect = Rect(0-_visibleSize.width/4, 0-_visibleSize.height/2, _visibleSize.width/2, _visibleSize.height);        else            rect = Rect(0-_visibleSize.width/4, 0-_visibleSize.height/2, _visibleSize.width/2, _visibleSize.height/2);        if (rect.containsPoint(locationInNode))        {            setBorad(target->getIconType());            target->setScale(0.9f);            return true;        }        return false;    };    buttonListener->onTouchEnded = [&](Touch* touch, Event* event){        auto target = static_cast<ShopIcon*>(event->getCurrentTarget());        target->setScale(1.0f);        for(int i = 0; i<6 ; i++){            shopIcons.at(i)->setGlowVisible(false);        }        target->setGlowVisible(true);    };    buttonListener->setSwallowTouches(true);    _eventDispatcher->addEventListenerWithSceneGraphPriority(buttonListener,shopIcon1);    _eventDispatcher->addEventListenerWithSceneGraphPriority(buttonListener->clone(),shopIcon3);    _eventDispatcher->addEventListenerWithSceneGraphPriority(buttonListener->clone(),shopIcon4);    _eventDispatcher->addEventListenerWithSceneGraphPriority(buttonListener->clone(),shopIcon5);    _eventDispatcher->addEventListenerWithSceneGraphPriority(buttonListener->clone(),shopIcon6);    _eventDispatcher->addEventListenerWithSceneGraphPriority(buttonListener->clone(),shopIcon2);    //---------------------------------------------------------------------------------------------------------------------------//    //---------------------------------------------------------------------------------------------------------------------------//    }#pragma mark - for callback Functionvoid ShopScene::onKeyReleased(EventKeyboard::KeyCode keycode, Event* event){    switch (keycode)    {        case EventKeyboard::KeyCode::KEY_BACK:   //返回键听            Director::getInstance()->popScene();            break;        case EventKeyboard::KeyCode::KEY_MENU:      //菜单监听            break;        case::EventKeyboard::KeyCode::KEY_HOME:            break;        default:            break;    }}void ShopScene::onPurchaseMenuItemCallback(Ref* pSender) {    for (int i = 0; i < 6; i++){        if (shopIcons.at(i)->getGlowVisible()){            buySth(i);            break;        }    }}void ShopScene::onConfirmMenuItemCallback(Ref* pSender) {    UserDefault::getInstance()->setIntegerForKey(GameManager::getInstance()->SLOTX_DIAMOND_NUMBER, _diamondNumber);    for (int i = 0 ; i < 6; i++) {        UserDefault::getInstance()->setIntegerForKey(StringUtils::format(GameManager::getInstance()->SLOTX_SHOP,i).c_str(), count[i]);    }    Director::getInstance()->popScene();}#pragma mark - for callback Functionvoid ShopScene::buySth(int i){    if (_diamondNumber < str_gem[i]){//宝石不够        auto bubbleNeedMore = Sprite::createWithSpriteFrameName("inaps_bubble_needMore.png");        bubbleNeedMore->setVisible(true);        bubbleNeedMore->setPosition(650,430);        addChild(bubbleNeedMore,5);        bubbleNeedMore->runAction(Sequence::create(                                                   FadeOut::create(3.0f),                                                   CallFuncN::create(CC_CALLBACK_0(Sprite::removeFromParent, bubbleNeedMore)),NULL));    } else {        _diamondNumber = _diamondNumber - str_gem[i];        setBackpackIcon(i);        _diamondLabel->setString(StringUtils::format("%d", _diamondNumber).c_str());        auto bubbleSprite = Sprite::createWithSpriteFrameName("inaps_bubble.png");        bubbleSprite->setPosition(650,430);        addChild(bubbleSprite,5);         bubbleSprite->runAction(Sequence::create(                                                 FadeOut::create(3.0f),                                                 CallFuncN::create(CC_CALLBACK_0(Sprite::removeFromParent, bubbleSprite)),NULL));    }}void ShopScene::setBackpackIcon(int i){    count[i] ++;    countLabels.at(i)->setString(StringUtils::format("%d",count[i]).c_str());    if(count[i]>0)        backpackIcons.at(i)->setVisible(true);}void ShopScene::setBorad(int type){    _borad->setSpriteFrame(SpriteFrameCache::getInstance()->getSpriteFrameByName(                         StringUtils::format("inaps_boardDrawings_000%d.png",type).c_str()));    _descriptionLabel->setString(str_introduction[type-1]);    _priceLabel->setString(StringUtils::format("%d",str_gem[type-1]).c_str());    _nameLabel->setString(str_name[type-1]);}