#ifndef _BASE_MAP_H_#define _BASE_MAP_H_ #include "PlayerStateMenu.h"#include "cocos2d.h"#include "WaveFlag.h"#include "GroupMonster.h"#include "TouchLayer.h"#include "WaveAnimation.h"USING_NS_CC;enum LevelMusicEffect : unsigned int {    LevelMusicEffectDesert = 0,    LevelMusicEffectJungle = 1,    LevelMusicEffectUnderground = 2};enum BaseMapDrawingOrder : unsigned int {    BaseMapDrawingOrderBackground = 0,    BaseMapDrawingOrderBackground2nd,    BaseMapDrawingOrderBackground3rd,    BaseMapDrawingOrderOrnament,    BaseMapDrawingOrderTerrain,    BaseMapDrawingOrderDescription,    BaseMapDrawingOrderStar,    BaseMapDrawingOrderMenu,    BaseMapDrawingOrderWaveFlag,    BaseMapDrawingOrderColorLayer,    BaseMapDrawingOrderTouchLayer};class BaseMap : public Layer {    public:    virtual bool init(int level, int difficult);        void startGame();        TouchLayer* getTouchLayer();private:    //存储路径的容器 从内到外为点，线路，路线    std::vector<std::vector<std::vector<Point>>> _gamePaths;        void addBackgroundMapImage();    //加载路径和关卡数据    void loadPathsVectorFromFile();    void loadLevelMonsterDataFromFile();    //添加配置信息    void loadLevelConfigData();    //更新金钱和生命    void updateGoldAndLifeNumber();        //下一波提示精灵 0为路线1,1为路线2    Vector<WaveFlag*> _waveFlags;    void loadWaveStartPointsFromFile();    void addWaveProgressBars(std::vector<Point> waveFlagLocations);    void showWaveProgressBars(float dt);    bool onWaveProgressBarTouchBegan(Touch* touch, Event* event);        //退出    virtual void onEnterTransitionDidFinish();    virtual void onExitTransitionDidStart();    virtual void onExit();    virtual void update(float dt);        unsigned int _time;        //载入每一关卡需要怪物的图片文件    void loadLevelMonsterSpriteCacheFile();    void releaseLevelMonsterSpriteCacheFile();    protected:    //初始化数据    int _startGoldNumber;    int _maxLifeNumber;    int _maxWaveNumber;    //当前关卡    long _currentWaveNumber;    int _currentGoldNumber;    int _currentLifeNumber;        //本关难度    CC_SYNTHESIZE(int, _level, Level);    CC_SYNTHESIZE(int, _difficulty, Difficulty);        //结束标记    bool _isEnd;    //开始标记    bool _isStart;    int  _musicEffect;    bool _hasStartStory;       //wave怪物容器容器    std::vector<std::vector<Vector<GroupMonster*>>> _waveVector;        //地图精灵    Sprite* mapBackgroundSprite;        //开始新的一波敌人    virtual void addWaves(float dt);    //添加怪物    virtual void addMonsters(float dt);    //添加不同地图装饰物    virtual void addOrnament();    //添加建塔点    virtual void addTerrains();        bool playWaveAnimation(int currentWaveNumber);        virtual void loadLevelSpriteFrameFile();    virtual void removeLevelSpriteFrameFile();    	//玩家状态栏	PlayerStateMenu* playerStateMenu;	void bindPlayerStateMenu(PlayerStateMenu* playerStateMenu);        	TouchLayer* mTouchLayer;    void initTouchLayer();//    void bindTouchLayer(TouchLayer* mTouchLayer);	//不同关卡不同的事件处理	virtual void waveEvent();	//设置初始地图位置	void setMapPosition();    	//胜利函数	void victory();    private:    //添加Music Effect    void playLevelMusicEffect();        LayerColor* _colorLayer;    void startStory();        Map<int, WaveAnimation*> _waveAnimationMap;        //这里是用于在每一关启动的适合加载所需怪物的动画    std::set<int> _monsterTypeSet;    void loadMonsterAnimationCache();    void releaseMonsterAnimationCache();};#endif