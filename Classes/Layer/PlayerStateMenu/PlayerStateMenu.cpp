#include "PlayerStateMenu.h"#include "GameOption.h"#include "GameManager.h"#include "SoundManager.h"#include "TowerUpdateManager.h"#include "Utility.h"#include "CommonDefine.h"#pragma mark -- for init functionbool PlayerStateMenu::init() {    if ( !Layer::init() )    {        return false;    }        _isFrozen = false;    instance = GameManager::getInstance();        this->initMonsterInfoLayer();    this->initTowerInfoLayer();        //左上角    this->addStateSprites();    //右上角    this->addPauseSprites();    //左下角    this->addThunderStoneSprite();    this->addParatrooperSprite();    //右下角    this->addBackPackSprite();        return true;}void PlayerStateMenu::onEnterTransitionDidFinish() {    playerStateLabel->runAction(MoveTo::create(0.2f, Point(20,                                                           Director::getInstance()->getVisibleSize().height                                                           - playerStateLabel->getContentSize().height / 2                                                           - 20)));    _pauseMenuItem->runAction(MoveTo::create(0.2f, Point(Director::getInstance()->getVisibleSize().width                                                        - _pauseMenuItem->getContentSize().width / 2                                                        - 20,                                                        Director::getInstance()->getVisibleSize().height                                                        - _pauseMenuItem->getContentSize().height / 2                                                        - 20)));    thunderStoneButton->runAction(MoveTo::create(0.2f, Point(thunderStoneButton->getSkillButtonSize().width / 2 + 10,                                                             thunderStoneButton->getSkillButtonSize().height / 2 )));        paratrooperButton->runAction(MoveTo::create(0.2f, Point(paratrooperButton->getSkillButtonSize().width * 3 / 2 + 10,                                                            paratrooperButton->getSkillButtonSize().height / 2 )));    extensibleSkillButton->runAction(MoveTo::create(0.2f, Point(Director::getInstance()->getVisibleSize().width                                                                - extensibleSkillButton->getExtensibleSkillButtonSize().width / 2                                                                - 10,                                                                extensibleSkillButton->getExtensibleSkillButtonSize().height/ 2 + 10 )));}#pragma mark - 右下角背包相关void PlayerStateMenu::onBackpackIconTouch(Ref* pSender) {    auto target = dynamic_cast<ExtensibleSkillButton *>(pSender);    log("PlayerStateMenu::onBackpackIconTouch tag:%d", target->getSelectedIconTag());    //    int number = UserDefault::getInstance()->getIntegerForKey(target->getSelectedIconTag().c_str());    int number = 9;    if(number > 0){        number --;        this->executeShopSkill(target->getSelectedIconTag());        this->extensibleSkillButton->unSelected();    }  }void PlayerStateMenu::onBackpackTouch(Ref* pSender) {    log("PlayerStateMenu::onBackpackTouch");    ExtensibleSkillButton* target = dynamic_cast<ExtensibleSkillButton*>(pSender);    //若冷却结束    mTouchLayer->removeAllListener();    if(target->getIsSelect()){        hideTowerInfo();        hideMonsterInfo();        mTouchLayer->removeAllListener();        //改变其他2个按键状态        paratrooperButton->unSelected();        thunderStoneButton->unSelected();    }}void PlayerStateMenu::addBackPackSprite() {    extensibleSkillButton = ExtensibleSkillButton::create();    extensibleSkillButton->setAnchorPoint(Vec2::ANCHOR_BOTTOM_RIGHT);        extensibleSkillButton->setPosition(Director::getInstance()->getVisibleSize().width                                       - extensibleSkillButton->getExtensibleSkillButtonSize().width / 2                                       - 10,                                       - extensibleSkillButton->getExtensibleSkillButtonSize().height/ 2);    extensibleSkillButton->setCallback(CC_CALLBACK_1(PlayerStateMenu::onBackpackIconTouch, this));    extensibleSkillButton->setBackpackCallback(CC_CALLBACK_1(PlayerStateMenu::onBackpackTouch, this));        this->addChild(extensibleSkillButton);}#pragma mark - 左上角状态相关void PlayerStateMenu::addStateSprites() {    playerStateLabel = PlayerStateLabel::create();    playerStateLabel->setPosition(Point(20,                                        Director::getInstance()->getVisibleSize().height                                        - playerStateLabel->getContentSize().height / 2                                        + 200));    playerStateLabel->setAnchorPoint(Vec2::ANCHOR_TOP_LEFT);    this->addChild(playerStateLabel);}#pragma mark - 右上角暂停按钮相关void PlayerStateMenu::addPauseSprites() {    _pauseMenuItem = MenuItemSprite::create(Sprite::createWithSpriteFrameName("hud_buttons_0001.png"),                                           Sprite::createWithSpriteFrameName("hud_buttons_0001.png"),                                           CC_CALLBACK_1(PlayerStateMenu::onTouchPause, this));    _pauseMenuItem->setPosition(Point(Director::getInstance()->getVisibleSize().width                                     - _pauseMenuItem->getContentSize().width / 2                                     - 20,                                     Director::getInstance()->getVisibleSize().height                                     - _pauseMenuItem->getContentSize().height / 2                                     + 200));    _pauseMenuItem->setAnchorPoint(Vec2::ANCHOR_TOP_RIGHT);    auto menu = Menu::create(_pauseMenuItem, NULL);    menu->setPosition(Vec2::ZERO);    this->addChild(menu);}void PlayerStateMenu::onTouchPause(Ref *pRef) {    SoundManager::playClickEffect();        this->extensibleSkillButton->unSelected();    this->thunderStoneButton->unSelected();    this->paratrooperButton->unSelected();        this->hideTowerInfo();    this->hideMonsterInfo();    this->addGameOption();}#pragma mark - 和暂停界面相关函数void PlayerStateMenu::initGameOption() {    _gameOption = GameOption::create();    _gameOption->setLevel(this->getLevel());    _gameOption->setDifficult(this->getDifficult());        _gameOption->setPosition(Point(0,                                   Director::getInstance()->getVisibleSize().height));        this->addChild(_gameOption, PlayerStateMenuDrawingOrderGameOption);}void PlayerStateMenu::addGameOption() {    auto colorLayer = LayerColor::create(Color4B(0, 0, 0, 60),                                         Director::getInstance()->getVisibleSize().width,                                         Director::getInstance()->getVisibleSize().height);    colorLayer->setTag(PlayerStateMenuTagColorLayer);    this->addChild(colorLayer, PlayerStateMenuDrawingOrderColorLayer);        auto gameOptionListener = EventListenerTouchOneByOne::create();    gameOptionListener->onTouchBegan = [&](Touch* touch, Event* event){        return true;    };    gameOptionListener->setSwallowTouches(true);    _eventDispatcher->addEventListenerWithSceneGraphPriority(gameOptionListener, colorLayer);        _gameOption->runAction(Sequence::create(MoveBy::create(0.2f, Point(0,                                                                      - Director::getInstance() ->getVisibleSize().height)),                                           CallFuncN::create(CC_CALLBACK_0(PlayerStateMenu::pauseGame, this)),                                           NULL));}void PlayerStateMenu::removeGameOption() {    Director::getInstance()->resume();    _gameOption->runAction(MoveBy::create(0.2f,                                         Point(0,                                               Director::getInstance()->getVisibleSize().height)));        if (this->getChildByTag(PlayerStateMenuTagColorLayer)) {        this->removeChildByTag(PlayerStateMenuTagColorLayer);    }}void PlayerStateMenu::pauseGame() {    Director::getInstance()->pause();}#pragma mark - tower info layervoid PlayerStateMenu::initTowerInfoLayer() {    _towerInfoLayer = TowerInfoLayer::create();    _towerInfoLayer->setVisible(false);    _towerInfoLayer->setAnchorPoint(Vec2::ANCHOR_BOTTOM_RIGHT);    _towerInfoLayer->setPosition(Point(Director::getInstance()->getVisibleSize().width - 10,                                      -10));    this->addChild(_towerInfoLayer, PlayerStateMenuDrawingOrderLayer);}void PlayerStateMenu::showTowerInfo(BaseTower* tower) {    this->hideTowerInfo();    this->hideMonsterInfo();    this->extensibleSkillButton->unSelected();        _towerInfoLayer->setTower(tower);    _towerInfoLayer->setVisible(true);    _towerInfoLayer->runAction(MoveTo::create(0.2f,                                              Point(Director::getInstance()->getVisibleSize().width - 10, 10)));}void PlayerStateMenu::showTowerInfo(int towerType) {//    this->hideTowerInfo();    this->hideMonsterInfo();    this->extensibleSkillButton->unSelected();        _towerInfoLayer->setTowerType(towerType);    _towerInfoLayer->setVisible(true);    _towerInfoLayer->runAction(MoveTo::create(0.2f,                                              Point(Director::getInstance()->getVisibleSize().width - 10, 10)));}void PlayerStateMenu::hideTowerInfo() {    _towerInfoLayer->setPosition(Point(Director::getInstance()->getVisibleSize().width - 10,                                       -10));    _towerInfoLayer->setVisible(false);}#pragma mark - monstervoid PlayerStateMenu::initMonsterInfoLayer() {    _monsterInfoLayer = MonsterInfoLayer::createMonsterInfoLayer();    _monsterInfoLayer->setAnchorPoint(Vec2::ANCHOR_BOTTOM_RIGHT);    _monsterInfoLayer->setPosition(Point(Director::getInstance()->getVisibleSize().width - 10,                                         -10));    _monsterInfoLayer->setVisible(false);    this->addChild(_monsterInfoLayer, PlayerStateMenuDrawingOrderLayer);}void PlayerStateMenu::showMonsterInfo(BaseMonster* monster) {    this->hideTowerInfo();//    this->hideMonsterInfo();    this->extensibleSkillButton->unSelected();        _monsterInfoLayer->setVisible(true);    _monsterInfoLayer->updateMonster(monster);    _monsterInfoLayer->runAction(MoveTo::create(0.2f,                                                Point(Director::getInstance()->getVisibleSize().width - 10, 10)));}void PlayerStateMenu::hideMonsterInfo() {    _monsterInfoLayer->setVisible(false);    _monsterInfoLayer->setPosition(Point(Director::getInstance()->getVisibleSize().width - 10,                                         -10));    _monsterInfoLayer->deleteSchedule();}void PlayerStateMenu::clearMonsters() {    auto monstersVector = GameManager::getInstance()->monsterVector;        for(int i = 0; i < monstersVector.size(); i++){        auto monster = monstersVector.at(i);        if(monster != NULL){            monster->explosion();        }    }}#pragma mark - 和雷石相关的函数void PlayerStateMenu::onThunderStoneTouch(Ref* pSender) {    log("Touch Thunder Stone ");    SkillButton* target = dynamic_cast<SkillButton*>(pSender);    //若冷却结束    mTouchLayer->removeAllListener();    if(target->getIsSelect()){        //改变其他2个按键状态        paratrooperButton->unSelected();        extensibleSkillButton->unSelected();        mTouchLayer->setFireBallTouchShield();    }}void PlayerStateMenu::addThunderStoneSprite() {    float during = GameManager::getInstance()->THUNDER_STONE_PERIOD * (1 + TowerUpdateManager::getInstance()->getTowerUpgradeValue(UpgradeTowerTagFireball01_ReduceCountDownTime));    thunderStoneButton = SkillButton::createSkillButton(during,                                                        "power_loading.png",                                                        "power_portrait_fireball_0001.png",                                                        "power_portrait_fireball_0002.png");    thunderStoneButton->setPosition(Point(thunderStoneButton->getSkillButtonSize().width / 2 + 10,                                          - thunderStoneButton->getSkillButtonSize().height / 2 ));    thunderStoneButton->startSkillButton();    thunderStoneButton->setCallback(CC_CALLBACK_1(PlayerStateMenu::onThunderStoneTouch, this));    this->addChild(thunderStoneButton);}#pragma mark - 和伞兵相关的函数void PlayerStateMenu::onParatrooperTouch(Ref* pSender) {    log("Touch Paratrooper Button ");    SkillButton* target = dynamic_cast<SkillButton*>(pSender);    //若冷却结束    mTouchLayer->removeAllListener();    if(target->getIsSelect()){        //改变其他2个按键状态        thunderStoneButton->unSelected();        extensibleSkillButton->unSelected();        mTouchLayer->setSoldierTouchShield();    }}void PlayerStateMenu::addParatrooperSprite() {    float during = GameManager::getInstance()->THUNDER_STONE_PERIOD * (1 + TowerUpdateManager::getInstance()->getTowerUpgradeValue(UpgradeTowerTagReinforce01_ReduceCountDownTime));    paratrooperButton = SkillButton::createSkillButton( during,                                                        "power_loading.png",                                                        "power_portrait_reinforcement_0001.png",                                                        "power_portrait_reinforcement_0002.png" );    paratrooperButton->setPosition(Point(paratrooperButton->getSkillButtonSize().width * 3 / 2 + 10,                                         - paratrooperButton->getSkillButtonSize().height / 2 ));    paratrooperButton->startSkillButton();    paratrooperButton->setCallback(CC_CALLBACK_1(PlayerStateMenu::onParatrooperTouch, this));    this->addChild(paratrooperButton);}#pragma mark - others functionvoid PlayerStateMenu::executeAtomicBomb() {    auto atomicBombPlaneSprite = Sprite::createWithSpriteFrameName("atomicBomb_plane.png");    atomicBombPlaneSprite->setPosition(Point(0,                                             Director::getInstance()->getWinSize().height / 3 * 2));    this->addChild(atomicBombPlaneSprite);    atomicBombPlaneSprite->runAction(Sequence::create(                                     MoveBy::create(2.0f, Point(Director::getInstance()->getVisibleSize().width,                                                                            0)),                                     CallFuncN::create(CC_CALLBACK_0(Sprite::removeFromParent, atomicBombPlaneSprite))                                                 , NULL));    auto atomicBomb = Sprite::createWithSpriteFrameName("atomicBomb_bomb.png");    atomicBomb->setPosition(Point(Director::getInstance()->getWinSize().width / 2,                                  Director::getInstance()->getWinSize().height / 3 * 2 - 30));    this->addChild(atomicBomb);    atomicBomb->setVisible(false);    atomicBomb->runAction(Sequence::create(DelayTime::create(1.0f),                                                CallFuncN::create(CC_CALLBACK_0(Sprite::setVisible, atomicBomb, true)),                                                MoveBy::create(0.5f,Point(0,-300)),                                                CallFuncN::create(CC_CALLBACK_0(Sprite::removeFromParent, atomicBomb)),                                                CallFuncN::create(CC_CALLBACK_0(PlayerStateMenu::clearMonsters, this)),                                           NULL));}void PlayerStateMenu::executeShopSkill(int type){    switch(type){        case(BackpackIconTag_1)://核弹            this->executeAtomicBomb();            break;        case(BackpackIconTag_2)://大范围冰冻            this->executeFrozen();            break;        case(BackpackIconTag_3)://小范围炸弹            mTouchLayer->removeAllListener();            mTouchLayer->setDynamiteTouchShield();            break;        case(BackpackIconTag_4)://小范围冰冻            mTouchLayer->removeAllListener();            mTouchLayer->setFreezeTouchShield();            break;        case(BackpackIconTag_5)://增加生命            SoundManager::playCash();            GameManager::getInstance()->CURRENT_LIFE = GameManager::getInstance()->CURRENT_LIFE + 5;            break;        case(BackpackIconTag_6)://增加金钱            SoundManager::playHearts();            GameManager::getInstance()->CURRENT_MONEY = GameManager::getInstance()->CURRENT_MONEY + 500;            break;    }}#pragma mark - Frozenvoid PlayerStateMenu::removeFrozen(float dt) {    this->safeRemoveChildByTag(PlayerStateMenuTagIceCornerTopRight);    this->safeRemoveChildByTag(PlayerStateMenuTagIceCornerBottomRight);    this->safeRemoveChildByTag(PlayerStateMenuTagIceCornerBottomLeft);    this->safeRemoveChildByTag(PlayerStateMenuTagIceCornerTopLeft);    _isFrozen = false;}void PlayerStateMenu::executeFrozen(){    if(!_isFrozen){        //右上角        auto winSize = Director::getInstance()->getWinSize();        auto iceCornerTopRight = Sprite::createWithSpriteFrameName("freeze_gfx_corner.png");        iceCornerTopRight->setAnchorPoint(Vec2::ANCHOR_TOP_RIGHT);        iceCornerTopRight->setPosition(Point(winSize.width,winSize.height));        //右下角        auto iceCornerBottomRight = Sprite::createWithSpriteFrameName("freeze_gfx_corner.png");        iceCornerBottomRight->setFlippedY(true);        iceCornerBottomRight->setAnchorPoint(Vec2::ANCHOR_BOTTOM_RIGHT);        iceCornerBottomRight->setPosition(Point(winSize.width, 0));        //左下角        auto iceCornerBottomLeft = Sprite::createWithSpriteFrameName("freeze_gfx_corner.png");        iceCornerBottomLeft->setFlippedX(true);        iceCornerBottomLeft->setFlippedY(true);        iceCornerBottomLeft->setAnchorPoint(Vec2::ANCHOR_BOTTOM_LEFT);        iceCornerBottomLeft->setPosition(Vec2::ZERO);                auto iceCornerTopLeft = Sprite::createWithSpriteFrameName("freeze_gfx_corner.png");        iceCornerTopLeft->setFlippedX(true);        iceCornerTopLeft->setAnchorPoint(Vec2::ANCHOR_TOP_LEFT);        iceCornerTopLeft->setPosition(Point(0, winSize.height));                iceCornerTopRight->setTag(PlayerStateMenuTagIceCornerTopRight);        iceCornerBottomRight->setTag(PlayerStateMenuTagIceCornerBottomRight);        iceCornerBottomLeft->setTag(PlayerStateMenuTagIceCornerBottomLeft);        iceCornerTopLeft->setTag(PlayerStateMenuTagIceCornerTopLeft);                this->addChild(iceCornerTopRight, PlayerStateMenuDrawingOrderIceCorner);        this->addChild(iceCornerBottomRight, PlayerStateMenuDrawingOrderIceCorner);        this->addChild(iceCornerBottomLeft, PlayerStateMenuDrawingOrderIceCorner);        this->addChild(iceCornerTopLeft, PlayerStateMenuDrawingOrderIceCorner);                _isFrozen = true;        auto monstersVector = GameManager::getInstance()->monsterVector;                for (int i = 0; i < monstersVector.size(); i++){            auto monster = monstersVector.at(i);            if(monster != NULL)  monster->frozen();        }                this->scheduleOnce(schedule_selector(PlayerStateMenu::removeFrozen), GAME_COMMON_VAR_FROZEN_TIME);    }}void PlayerStateMenu::safeRemoveChildByTag(int tag) {    if (this->getChildByTag(tag)) {        this->removeChildByTag(tag);    }}