#include "Bomb.h"Bomb* Bomb::createBombWithLevel(int level) {    auto bomb = new Bomb();        if (bomb && bomb->initWithLevel(level)) {        bomb->autorelease();        return bomb;    }    CC_SAFE_DELETE(bomb);    return NULL;}bool Bomb::initWithLevel(int level) {    if (! Bomb::initWithTypeAndLevel(BULLET_TYPE_BOMB, level)) {        return false;    }    return true;}void Bomb::shoot() {    this->runAction(Sequence::create(_bulletAction,                                     CallFuncN::create(CC_CALLBACK_0(Bomb::attackAreaMonster, this)),                                     NULL));}void Bomb::processMonsterDeath(BaseMonster * monster) {    monster->explosion();}void Bomb::handleFinishBullet() {    _bulletSprite->runAction(Sequence::create(Animate::create(AnimationCache::getInstance()->getAnimation("bomb")),                                              CallFuncN::create(CC_CALLBACK_0(Bomb::removeFromParent, this)),                                              NULL));}//void Bomb::removeBullet()//{//    auto bombPostion = this->getPosition() + this->getParent()->getPosition();//    //    auto monsterVector = GameManager::getInstance()->monsterVector;//    //    SoundManager::playBomb();//    for (int j = 0; j < monsterVector.size(); j++)//    {//        auto monster = monsterVector.at(j);//        auto monsterPosition = monster->baseSprite->getPosition();//        //        if(monster != NULL && bombPostion.distance(monsterPosition) <= 50  && monster->getEnableAttackBySoldier())//        {//            auto currentHP = monster->getCurrentHP();//            //            currentHP =  currentHP - this->getMaxForce() + monster->getArmor();//            //            if (currentHP <= 0) currentHP = 0;//            monster->setCurrentHP( currentHP );//            //            monster->getHpBar()->setPercentage((currentHP / monster->getMaxHp()) * 100);//            //            if (currentHP == 0) monster->explosion();//        }		//    }	//    _bulletSprite->runAction(Sequence::create(Animate::create(AnimationCache::getInstance()->getAnimation("bomb")),//                                              CallFuncN::create(CC_CALLBACK_0(Bomb::removeFromParent, this)),//                                              NULL));//}