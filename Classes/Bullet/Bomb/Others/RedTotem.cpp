#include "RedTotem.h"#include "GameManager.h"//RedTotem* RedTotem::createRedTotem(Point point)//{//	auto redTotem = new RedTotem();// //    if (redTotem && redTotem->init())//    {//        redTotem->autorelease();//		redTotem->shoot(point);//        return redTotem;//    }//    CC_SAFE_DELETE(redTotem);//    return NULL;//}bool RedTotem::init(){	if (! BombBulletBase::initWithTypeAndLevel(BULLET_TYPE_DYNAMITE, 1)) {		return false;	}//    this->setBulletType(BULLET_TYPE_REDTOTEM);//    this->setBulletScope(80.0f);//    this->setMaxForce(100.0f);//    this->addBulletSprite("TotemTower_RedTotem_0001.png");	return true;}void RedTotem::shoot(Point point){	this->setPosition(point);	_bulletSprite->runAction(Sequence::create(Animate::create(AnimationCache::getInstance()->getAnimation("TotemTower_RedTotem")),                                              CallFuncN::create(CC_CALLBACK_0(RedTotem::attackAreaMonster, this)),                                              NULL));}void RedTotem::processMonsterDeath(BaseMonster * monster) {    monster->explosion();}//void RedTotem::boom()//{//	auto instance = GameManager::getInstance();//  //	auto bombPostion = this->getPosition() + this->getParent()->getPosition();////	auto monsterVector = instance->monsterVector;////	for (int j = 0; j < monsterVector.size(); j++)//	{//		auto monster = monsterVector.at(j);//		auto monsterPosition = monster->baseSprite->getPosition();////		if(monster != NULL//           && bombPostion.distance(monsterPosition) <= this->getBulletScope()//           && monster->getEnableAttackByTower())//		{//			auto currentHP = monster->getCurrentHP();////            currentHP =  currentHP - this->getMaxForce();//                //			if(currentHP <= 0) currentHP = 0;//            //			monster->setCurrentHP( currentHP );////			monster->getHpBar()->setPercentage((currentHP / monster->getMaxHp()) * 100);//  //			if(currentHP == 0) monster->explosion();//		}		//	}	//}////void RedTotem::removeBullet()//{//	this->removeFromParent();//}