#include "UpdatePanelLayer2.h"#include "GameManager.h"#include "BaseBuildIcon.h"#include "TouchLayer.h"#include "BaseMap.h"USING_NS_CC;UpdatePanelLayer2* UpdatePanelLayer2::createPanel(int icon1, int icon2, int money1, int money2){    auto updatePanelLayer2 = new UpdatePanelLayer2();        if (updatePanelLayer2 && updatePanelLayer2->initWithIcons(icon1, icon2, money1, money2))    {        updatePanelLayer2->autorelease();        return updatePanelLayer2;    }    CC_SAFE_DELETE(updatePanelLayer2);    return NULL;}bool UpdatePanelLayer2::initWithIcons(int icon1, int icon2, int money1, int money2){    if ( !BasePanelLayer::init() )    {        return false;    }        this->_icon1 = icon1;    this->_icon2 = icon2;    this->_money1 = money1;    this->_money2 = money2;        _canUpdate1 = true;    _canUpdate2 = true;        return true;}void UpdatePanelLayer2::addIcons(){    _updateIcon1 = BaseBuildIcon::createIcon(_icon1, _money1);    _updateIcon1->setPosition(Point(_ringBackgroundSprite->getContentSize().width / 4 + 20,                                    _ringBackgroundSprite->getContentSize().height / 4 + 30));    _updateIcon1->setVisible(false);    _updateIcon1->setTag(PanelLayerTagUpdate1);    this->addChild(_updateIcon1, PanelLayerDrawingOrderIcon);        _updateIcon2 = BaseBuildIcon::createIcon(_icon2, _money2);    _updateIcon2->setPosition(Point(-_ringBackgroundSprite->getContentSize().width / 4 - 20,                                   _ringBackgroundSprite->getContentSize().height / 4 + 30));    _updateIcon2->setVisible(false);    _updateIcon2->setTag(PanelLayerTagUpdate2);    this->addChild(_updateIcon2, PanelLayerDrawingOrderIcon);        _sellIcon = SellIcon::create();    _sellIcon->setPosition(Point(0,                                -_ringBackgroundSprite->getContentSize().height/2));    _sellIcon->setVisible(false);    _sellIcon->setTag(PanelLayerTagSell);    this->addChild(_sellIcon, PanelLayerDrawingOrderIcon);        _canUpdate1 = true;    _canUpdate2 = true;    _lockIcon1 = Sprite::createWithSpriteFrameName("main_icons_0014.png");    _lockIcon1->setPosition(Point(_ringBackgroundSprite->getContentSize().width/4 + 20,                             _ringBackgroundSprite->getContentSize().height/4 + 30));    this->addChild(_lockIcon1, PanelLayerDrawingOrderLockIcon);    _lockIcon1->setVisible(false);       _lockIcon2 = Sprite::createWithSpriteFrameName("main_icons_0014.png");    _lockIcon2->setPosition(Point(-_ringBackgroundSprite->getContentSize().width/4 - 20,                             _ringBackgroundSprite->getContentSize().height / 4 + 30));    this->addChild(_lockIcon2, PanelLayerDrawingOrderLockIcon);    _lockIcon2->setVisible(false);        _thisLevelCircle = Circle::create();    _thisLevelCircle->setScale(tower->getAttackScope()  / _thisLevelCircle->getCircleSize().width);    this->addChild(_thisLevelCircle, PanelLayerDrawingOrderCircle);        _nextLevelCircle = Circle::create();    _nextLevelCircle->setScale(tower->getNextScope() / _nextLevelCircle->getCircleSize().width);    this->addChild(_nextLevelCircle, PanelLayerDrawingOrderCircle);    _nextLevelCircle->setVisible(false);    _sellIcon->setVisible(true);        auto touchListener = EventListenerTouchOneByOne::create();    touchListener->setSwallowTouches(true);    touchListener->onTouchBegan = CC_CALLBACK_2(UpdatePanelLayer2::onTouchBegan, this);    touchListener->onTouchEnded = CC_CALLBACK_2(UpdatePanelLayer2::onTouchEnded, this);    _eventDispatcher->addEventListenerWithSceneGraphPriority(touchListener, _sellIcon);    if (_canUpdate1) {        _eventDispatcher->addEventListenerWithSceneGraphPriority(touchListener->clone(), _updateIcon1);        _updateIcon1->setVisible(true);        _updateIcon1->updateMoneyLabel(tower->getUpdateMoney());    } else {        _updateIcon1->setVisible(false);        _lockIcon1->setVisible(true);    }    if (_canUpdate2) {        _eventDispatcher->addEventListenerWithSceneGraphPriority(touchListener->clone(), _updateIcon2);        _updateIcon2->setVisible(true);        _updateIcon2->updateMoneyLabel(tower->getUpdateMoney());    } else {        _updateIcon2->setVisible(false);        _lockIcon2->setVisible(true);    }}bool UpdatePanelLayer2::onTouchBegan(Touch *touch, Event *event){    auto target = static_cast<BaseBuildIcon*>(event->getCurrentTarget());    Point locationInNode = target->convertTouchToNodeSpace(touch);    Size size = target->getSize();    Rect rect = Rect(0-size.width/2, 0-size.height/2, size.width, size.height);    if (rect.containsPoint(locationInNode))    {        if(target->getIsSelected())//如果已经选中（第二次按下）        {            if(target->getIsMoneyEnough())//如果钱够用            {                static_cast<BaseMap*>(this->getParent()->getParent())->playerStateMenu->hideTowerInfo();                switch (target->getTag())                {                    case(PanelLayerTagUpdate1):                        SoundManager::playTowerUpdate();                        GameManager::getInstance()->CURRENT_MONEY -= tower->getUpdateMoney();                        tower->update1();                        break;                    case(PanelLayerTagUpdate2):                        SoundManager::playTowerUpdate();                        GameManager::getInstance()->CURRENT_MONEY -= tower->getUpdateMoney();                        tower->update2();                        break;                    case(PanelLayerTagSell)://售出                        SoundManager::playTowerSell();                        GameManager::getInstance()->CURRENT_MONEY += (tower->getBuildMoney() / 2);                        tower->sellTower();                        break;                }                this->setVisible(false);                isBuilt = true;            }        }else{//第一次按下            _updateIcon1->setSelected(false);            _updateIcon2->setSelected(false);            _sellIcon->setSelected(false);                        target->setSelected(true);//设置为选中状态            switch (target->getTag())            {                case(PanelLayerTagUpdate1)://                    this->showTowerInfo_1();                    _nextLevelCircle->setVisible(true);                    break;                case(PanelLayerTagUpdate2)://                    this->showTowerInfo_2();                    _nextLevelCircle->setVisible(true);                    break;                case(PanelLayerTagSell)://                    _nextLevelCircle->setVisible(false);                    break;            }        }        return true;    }    return false;}void UpdatePanelLayer2::onTouchEnded(Touch* touch, Event* event){    if(isBuilt)    {        removeFromParent();    }}void UpdatePanelLayer2::showTowerInfo_2(){    static_cast<BaseMap*>(this->getParent()->getParent())->playerStateMenu->showTowerInfo(tower);}void UpdatePanelLayer2::showTowerInfo_1(){    static_cast<BaseMap*>(this->getParent()->getParent())->playerStateMenu->showTowerInfo(tower);}