#include "ArrowBulletBase.h"#include "TowerUpdateManager.h"bool ArrowBulletBase::initWithTypeAndLevel(BulletType bulletType, int level){	if (!Bullet::initWithTypeAndLevel(bulletType, level)) {		return false;	}    	return true;}void ArrowBulletBase::attackPointMonster() {    bool isMiss = true;    auto monsterVector = GameManager::getInstance()->monsterVector;        for (int j = 0; j < monsterVector.size(); j++) {        auto monster = monsterVector.at(j);                if ( monster != nullptr            && ((this->getHasTowerProperty() && monster->getEnableAttackByTower())               || (this->getHasSoldierProperty() && monster->getEnableAttackBySoldier()))) {                        if ( ! this->getIsAreaAttack() ) {                //点攻击//                auto monsterRect = monster->getMonsterBoundingBox();//                auto bulletRect = this->getBulletRect();//                log("monster Rect origin.x: %f origin.y: %f size.width= %f size.height: %f)",//                    monsterRect.origin.x, monsterRect.origin.y, monsterRect.size.width, monsterRect.size.height);//                log("bullet Rect origin.x: %f origin.y: %f size.width= %f size.height: %f)",//                    bulletRect.origin.x, bulletRect.origin.y, bulletRect.size.width, bulletRect.size.height);                if (monster->getMonsterBoundingBox().intersectsRect(this->getBulletRect())) {                    isMiss = false;                    this->handleHP(monster);                    break;                }            }        }    }        if (isMiss) {        this->handleMissBullet();    }        this->handleFinishBullet();}void ArrowBulletBase::attackPointWithMonster(BaseMonster* monster) {    bool isMiss = true;    if ( monster != nullptr        && ((this->getHasTowerProperty() && monster->getEnableAttackByTower())            || (this->getHasSoldierProperty() && monster->getEnableAttackBySoldier()))) {                        if ( ! this->getIsAreaAttack() ) {                //点攻击                if (monster->getMonsterBoundingBox().intersectsRect(this->getBulletRect())) {                    isMiss = false;                    this->handleHP(monster);                }            }    }        if (isMiss) {        this->handleMissBullet();    }        this->handleFinishBullet();}