#ifndef _AnimationManager_H_#define _AnimationManager_H_#include "cocos2d.h"#include "BaseMonster.h"USING_NS_CC;class AnimationManager{public:	static AnimationManager* getInstance();        void initMonsterAnimationCache(int monsterType);    void releaseMonsterAnimationCache(int monsterType);    void initTowerAnimationCache();    void releaseTowerAnimationCache();    void load();//    void initMonsterBloodAnimation();    //for tower animation    void loadTowerAnimation();    void releaseTowerAnimation();    //for other animation    void loadOtherAnimationCache();    void releaseOtherAnimationCache();    private:    static AnimationManager * _animationManagerInstance;        virtual void init() {};        Animation* createAnimation(const char* prefixName, int startNumber, int endNumber, float delay);    Animation* createAnimationR(const char* prefixName, int startNumber, int endNumber, float delay);    Animation* createAnimation(const char* prefixName, int startNumber, int endNumber, float delay, std::string lastFrame);        void releaseAnimationCache(std::string fileName);    void loadAnimationCache(std::string fileName);    //    void initTowerArcher();//    void initTowerArtillery();//    void initTowerEarthquake();//    void initTowerArchMage();//    void initTowerMechs();//    void initTowerNecromancer();//    void initTowerBarracks();//    void initTowerMage();//    void initTowerCossbowHunter();//    void initTowerTotem();                //for monster        //	void init_underground();    //	void init_desert();    //	void init_jungle();    //	void initMonsterWaspQueen();//    void releaseMonsterWaspQueen();//    //    void initMonsterWaspHornet();//    void releaseMonsterWaspHornet();//    void initMonsterScorpion();//    void releaseMonsterScorpion();//    //	void init_Munra();//	void init_Thug();//	void init_Raider();//	void init_Gorilla();//	void init_Priest();//	void init_Shaman();//	void init_Hunter();//	void init_Canibal();//////	void init_Shield();//	void init_WingRider();//	void init_Wolf();//	void init_reinforce();//	void init_Immortal();//	void init_Tremor();//	void init_Fallen();////	void init_blazefang();//	void init_broodguard();//	void init_elite();//	void init_myrmidon();//	void init_nightscale();//	void init_Quetza();//	void init_Executioner();    //	void init_BossCanibal();    //	void release_BossEfreeti();    //	void init_BossEfreeti();    //	void release_BossCanibal();    };#endif