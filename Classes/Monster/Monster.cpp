#include "Monster.h"#include "GameManager.h"USING_NS_CC;Monster* Monster::createMonster(int monterType, std::vector<Point> points){    auto monster = new Monster();    if (monster && monster->init(monterType)) {                monster->setPointsVector(points);        monster->runToNextPoint();                monster->autorelease();        return monster;    }    CC_SAFE_DELETE(monster);    return NULL;}Monster* Monster::createMonster(int monterType, std::vector<Point> points, int pointCounter){    auto monster = new Monster();    if (monster && monster->init(monterType)) {                monster->setPointsVector(points);        monster->_pointCounter = pointCounter;                monster->runToNextPoint();                monster->autorelease();        return monster;    }    CC_SAFE_DELETE(monster);    return NULL;}Monster* Monster::createMonster(int monterType, std::vector<Point> points, Point birthLocation, int pointCounter){    auto monster = new Monster();    if (monster && monster->init(monterType)) {                monster->setPointsVector(points);        monster->birth(birthLocation, pointCounter);                monster->autorelease();        return monster;    }    CC_SAFE_DELETE(monster);    return NULL;}bool Monster::init(int monterType) {	if (!BaseMonster::initWithMonsterType(monterType)) {		return false;	}	return true;}#pragma mark - for private functionvoid Monster::birth(Point birthLocation, int pointCounter){    _baseSprite->setPosition(birthLocation);    this->_pointCounter = pointCounter;    _baseSprite->runAction(Sequence::create(                                            Animate::create(AnimationCache::getInstance()->getAnimation(this->getMonsterName() + "birth")),                                            CallFuncN::create(CC_CALLBACK_0(Monster::runToNextPoint, this)),                                            NULL));}void Monster::birthChildrenMonster() {    if (this->getHaveChildren()) {        auto children = Monster::createMonster(this->getChildrenType(), _pointsVector, this->getMonsterPosition(), _pointCounter);        this->getParent()->addChild(children);        GameManager::getInstance()->monsterVector.pushBack(children);    }}