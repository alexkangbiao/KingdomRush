#include "MapFlag.h"#include "GameView.h"#include "TransitionGame.h"#include "GameManager.h"#include "SoundManager.h"#include "BaseMap.h"#include "GameScene.h"#include "ChooseDifficulty.h"#include "Utility.h"MapFlag::MapFlag() {}MapFlag::~MapFlag() {}MapFlag* MapFlag::createWithLevel(int level) {    auto mapFlag = new MapFlag();        if (mapFlag && mapFlag->initWithLevel(level)) {        mapFlag->autorelease();        return mapFlag;    }        CC_SAFE_DELETE(mapFlag);    return NULL;}bool MapFlag::initWithLevel(int level) {    if (!Sprite::init()) {        return false;    }    this->_type  = FlagTypeStart;    this->_level = level;        this->initSpriteFrame();        this->addFlagAndStar();        return true;}void MapFlag::initSpriteFrame() {    _starDarkSpriteFrame    = SpriteFrameCache::getInstance()->getSpriteFrameByName("mapFlag_star_0001.png");    _starShiningSpriteFrame = SpriteFrameCache::getInstance()->getSpriteFrameByName("mapFlag_star_0018.png");        _flagWingSpriteFrame       = SpriteFrameCache::getInstance()->getSpriteFrameByName("mapFlag_wings_0015.png");    _flagFinishedSpriteFrame   = SpriteFrameCache::getInstance()->getSpriteFrameByName("mapFlag_0021.png");    _flagStartSpriteFrame      = SpriteFrameCache::getInstance()->getSpriteFrameByName("mapFlag_0095.png");    _flagExcellenceSpriteFrame = SpriteFrameCache::getInstance()->getSpriteFrameByName("mapFlag_0112.png");        _flagSelectedFinishedSpriteFrame   = SpriteFrameCache::getInstance()->getSpriteFrameByName("mapFlag_0023.png");    _flagSelectedStartSpriteFrame      = SpriteFrameCache::getInstance()->getSpriteFrameByName("mapFlag_0096.png");    _flagSelectedExcellenceSpriteFrame = SpriteFrameCache::getInstance()->getSpriteFrameByName("mapFlag_0117.png");}void MapFlag::addFlagAndStar() {    //    starNumber = 5;    //Sprite::createWithSpriteFrame(_flagFinishedSpriteFrame);    _wingSprite = Sprite::createWithSpriteFrame(_flagWingSpriteFrame);    this->addChild(_wingSprite);    _wingSprite->setVisible(false);        int starNumber = UserDefault::getInstance()->getIntegerForKey(                                StringUtils::format(GameManager::getInstance()->LEVEL_SLOTX_STAR_NUMBER, _level).c_str(), 0);    if (starNumber <= 0) {        this->setFlagType(FlagTypeStart);    } else if (starNumber < 4) {        this->setFlagType(FlagTypeFinished);    } else if (starNumber == 4) {        this->setFlagType(FlagTypeGood);    } else {        this->setFlagType(FlagTypeExcellence);    }    _flagSprite = MenuItemSprite::create(_normalFlagSprite,                                         _selectedFlagSprite,                                         CC_CALLBACK_1(MapFlag::onFlagTouch, this));        Menu *menu = Menu::create(_flagSprite, NULL);    menu->setPosition(Vec2::ZERO);    this->addChild(menu);        auto starSprite0 = Sprite::createWithSpriteFrame(_starDarkSpriteFrame);    starSprite0->setPosition(Point(-25, 45));    auto starSprite1 = Sprite::createWithSpriteFrame(_starDarkSpriteFrame);    starSprite1->setPosition(Point(  0, 43));        auto starSprite2 = Sprite::createWithSpriteFrame(_starDarkSpriteFrame);    starSprite2->setPosition(Point(25, 41));        this->addChild(starSprite0);    this->addChild(starSprite1);    this->addChild(starSprite2);        _starVector.pushBack(starSprite0);    _starVector.pushBack(starSprite1);    _starVector.pushBack(starSprite2);        if (_type != 0) {        if ( starNumber > 0) {            for (int i = 0; i <= starNumber - 1 && i < 3; i++) {                _starVector.at(i)->setSpriteFrame(_starShiningSpriteFrame);            }        }    }}#pragma mark -- for flag touch function//bool MapFlag::onFlagTouchBegan(Touch* touch, Event* event)//{//    auto target = static_cast<Sprite*>(event->getCurrentTarget());//    //    Point locationInNode = target->convertTouchToNodeSpace(touch);//    //    Size size = target->getContentSize();//    Rect rect = Rect(0, size.height/3, size.width, size.height/2);//    if (rect.containsPoint(locationInNode))//    {//        SoundManager::playClickEffect();//        this->setSelectedFlagType(_type);//        return true;//    }//    return false;//}void MapFlag::onFlagTouch(Ref* pSender) {    Director::getInstance()->pushScene(ChooseDifficulty::createSceneWithLevel(getLevel()));}//void MapFlag::onFlagTouchEnded(Touch* touch, Event* event)//{//    this->setFlagType(_type);//    Director::getInstance()->pushScene(ChooseDifficulty::createSceneWithLevel(getLevel()));//}#pragma mark -- for star functionvoid MapFlag::setFlagType(int type) {    this->_type = type;     _wingSprite->setVisible(false);    switch (type) {        case(FlagTypeStart): {            _normalFlagSprite   = Sprite::createWithSpriteFrame(_flagStartSpriteFrame);            _selectedFlagSprite = Sprite::createWithSpriteFrame(_flagSelectedStartSpriteFrame);        }            break;        case(FlagTypeFinished):            _normalFlagSprite   = Sprite::createWithSpriteFrame(_flagFinishedSpriteFrame);            _selectedFlagSprite = Sprite::createWithSpriteFrame(_flagSelectedFinishedSpriteFrame);            break;        case (FlagTypeGood)://得星个数为4            _normalFlagSprite   = Sprite::createWithSpriteFrame(_flagExcellenceSpriteFrame);            _selectedFlagSprite = Sprite::createWithSpriteFrame(_flagSelectedExcellenceSpriteFrame);            break;        case (FlagTypeExcellence): { //得星个数为5             _wingSprite->setVisible(true);            _normalFlagSprite   = Sprite::createWithSpriteFrame(_flagExcellenceSpriteFrame);            _selectedFlagSprite = Sprite::createWithSpriteFrame(_flagSelectedExcellenceSpriteFrame);        }            break;    }}//void MapFlag::setSelectedFlagType(int type) {//    this->_type = type;//    switch (type) {//        case(FlagTypeStart)://            _flagSprite->setSpriteFrame(_flagSelectedStartSpriteFrame);//            break;//        case(FlagTypeFinished)://            _flagSprite->setSpriteFrame(_flagSelectedFinishedSpriteFrame);//            break;//        case (FlagTypeGood)://得星个数为4//            _flagSprite->setSpriteFrame(_flagSelectedExcellenceSpriteFrame);//            break;//        case (FlagTypeExcellence): { //得星个数为5//            _flagSprite->setSpriteFrame(_flagSelectedExcellenceSpriteFrame);//        }//            break;//    }//}void MapFlag::playDropdownAnimation(){    AnimationCache::getInstance()->getAnimation("flag_drop");}void MapFlag::playSuccessAnimation(){    //播放动画    _flagSprite->runAction(Sequence::create(Animate::create(AnimationCache::getInstance()->getAnimation("flag_succeed")),                                            CallFunc::create(CC_CALLBACK_0(MapFlag::playStarAnimation, this)),                                            NULL));    this->setFlagType(FlagTypeFinished);}void MapFlag::playStarAnimation() {    SoundManager::playWinStars();        int shiningNumber = UserDefault::getInstance()->getIntegerForKey(                                StringUtils::format(GameManager::getInstance()->LEVEL_SLOTX_STAR_NUMBER, _level).c_str(), 0);    if ( shiningNumber > 0) {        for (int i = 0; i <= shiningNumber - 1; i++) {            this->playStarShine(i);        }    }}void MapFlag::playStarShine(int number) {    _starVector.at(number)->runAction(Sequence::create(DelayTime::create(number * 0.3),                                                       Animate::create(AnimationCache::getInstance()->getAnimation("star_shine")),                                                       NULL));}void MapFlag::setStarInvisiable() {    for (int i = 0; i < _starVector.size(); i++) {        _starVector.at(i)->setSpriteFrame(_starDarkSpriteFrame);    }}