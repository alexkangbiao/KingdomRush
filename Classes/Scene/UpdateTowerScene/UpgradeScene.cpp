#include "UpgradeScene.h"#include "UpgradeIcon.h"#include "GameManager.h"#include "SoundManager.h"#include "TowerUpdateManager.h"#include "TowerUpdateParameter.h"USING_NS_CC;std::string iconImageName[]  = {    "upgrades_bg_icons_0001.png",    "upgrades_bg_icons_0002.png",    "upgrades_bg_icons_0003.png",    "upgrades_bg_icons_0004.png",    "upgrades_bg_icons_0005.png",    "upgrades_bg_icons_0006.png"};const float ICON_START_HEIGHT = 0.17f;const float ICON_START_WIDTH  = 0.1f;Scene* UpgradeScene::createScene(){	auto scene = Scene::create();	auto layer = UpgradeScene::create();	scene->addChild(layer);		return scene;}bool UpgradeScene::init(){    if ( !Layer::init() ) {        return false;    }        _starAllNumber  = UserDefault::getInstance()->getIntegerForKey(GameManager::getInstance()->SLOT_X_STAR_NUMBER_SUM, 0);    _starLeftNumber = UserDefault::getInstance()->getIntegerForKey(GameManager::getInstance()->SLOT_X_STAR_LEFT, _starAllNumber);        this->initIconsStatus();        this->addBackgroundImage();    this->addMenuItems();    this->addLeftFrame();    this->addRightFrame();        this->initIconSavedStatus();        auto listenerkeyPad = EventListenerKeyboard::create();      listenerkeyPad->onKeyReleased = CC_CALLBACK_2(UpgradeScene::onKeyReleased, this);    _eventDispatcher->addEventListenerWithSceneGraphPriority(listenerkeyPad, this);         return true;}#pragma mark - for add Functionvoid UpgradeScene::addRightFrame() {    auto visibleSize = Director::getInstance()->getVisibleSize();    auto rightFrame  = Sprite::createWithSpriteFrameName("upgrades_info.png");    rightFrame->setAnchorPoint(Vec2::ANCHOR_TOP_RIGHT);    rightFrame->setPosition(Point(visibleSize.width * 0.99,                                  visibleSize.height * 0.93));    this->addChild(rightFrame, UpgradeSceneDrawingOrderFrame);        //剩余的星星显示(标签)    _remainStarLabel = Label::createWithBMFont("fonts/bmfont.fnt", StringUtils::format("%d", _starLeftNumber).c_str());    _remainStarLabel->setPosition(Point(rightFrame->getContentSize().width * 0.65,                                        rightFrame->getContentSize().height * 0.85));    rightFrame->addChild(_remainStarLabel, UpgradeSceneDrawingOrderIcon);        //显示升级所需要的星星(标签)    _updateNeedStarLabel = Label::createWithBMFont("fonts/bmfont.fnt", StringUtils::format("%d", _lastSelectedIcon->getStarNumber()).c_str());    _updateNeedStarLabel->setPosition(Point(rightFrame->getContentSize().width * 0.85,                                            rightFrame->getContentSize().height * 0.63));    rightFrame->addChild(_updateNeedStarLabel, UpgradeSceneDrawingOrderIcon);        //图片展示    _displayIcon=Sprite::create();    _displayIcon->setSpriteFrame(_lastSelectedIcon->getIconSpriteFrame());    _displayIcon->setPosition(Point(rightFrame->getContentSize().width * 0.5,                                    rightFrame->getContentSize().height * 0.55));    rightFrame->addChild(_displayIcon, UpgradeSceneDrawingOrderIcon);    //显示介绍文字(标签)    _nameLabel=Label::createWithSystemFont(_lastSelectedIcon->getIconName(), "Arial", 20);    _nameLabel->setColor(Color3B(150,0,0));    _nameLabel->setPosition(Point(rightFrame->getContentSize().width * 0.5,                                  rightFrame->getContentSize().height * 0.4));    rightFrame->addChild(_nameLabel, UpgradeSceneDrawingOrderIcon);        _introductionLabel = Label::createWithSystemFont(_lastSelectedIcon->getIconIntroduction(), "Arial", 18);    _introductionLabel->setColor(Color3B(0,0,0));    _introductionLabel->setPosition(Point(rightFrame->getContentSize().width * 0.5,                                          rightFrame->getContentSize().height * 0.1));    _introductionLabel->setWidth(rightFrame->getContentSize().width * 0.8);    _introductionLabel->setHeight(rightFrame->getContentSize().height * 0.5);    _introductionLabel->setLineBreakWithoutSpace(true);    _introductionLabel->setAlignment(cocos2d::TextHAlignment::CENTER);    rightFrame->addChild(_introductionLabel, UpgradeSceneDrawingOrderIcon);}void UpgradeScene::addBackgroundImage() {    auto visibleSize = Director::getInstance()->getVisibleSize();    auto sprite = Sprite::createWithSpriteFrameName("encyclopedia_bgTile.png");    int widthNumber = int (visibleSize.width / sprite->getContentSize().width + 1);    int heightNumber = int (visibleSize.height / sprite->getContentSize().height + 1);    for (int i = 0; i < widthNumber; i++) {        for (int j =0; j < heightNumber; j++) {            auto tempSprite = Sprite::createWithSpriteFrameName("encyclopedia_bgTile.png");            tempSprite->setPosition(Point(i * (sprite->getContentSize().width - 1),                                          j * sprite->getContentSize().height));            tempSprite->setAnchorPoint(Vec2::ZERO);            this->addChild(tempSprite, UpgradeSceneDrawingOrderBackground);        }    }}void UpgradeScene::addMenuItems() {    auto visibleSize = Director::getInstance()->getVisibleSize();    _buyMenuItem = MenuItemSprite::create(Sprite::createWithSpriteFrameName("upgrades_buyBut_0001.png"),                                              Sprite::createWithSpriteFrameName("upgrades_buyBut_0002.png"),                                              CC_CALLBACK_1(UpgradeScene::onMenuBuyCallback, this)                                              );    _buyMenuItem->setPosition(Point(visibleSize.width * 0.82,                                   visibleSize.height * 0.23));    auto resetMenuItem = MenuItemSprite::create(Sprite::createWithSpriteFrameName("upgrades_buttons_0001.png"),                                                Sprite::createWithSpriteFrameName("upgrades_buttons_0002.png"),                                                CC_CALLBACK_1(UpgradeScene::onMenuResetCallback, this)                                                );    resetMenuItem->setPosition(Point(visibleSize.width * 0.73,                                     visibleSize.height * 0.07));        auto confirmMenuItem = MenuItemSprite::create(Sprite::createWithSpriteFrameName("upgrades_buttons_0003.png"),                                                  Sprite::createWithSpriteFrameName("upgrades_buttons_0004.png"),                                                  CC_CALLBACK_1(UpgradeScene::onMenuConfirmCallback, this)                                                  );    confirmMenuItem->setPosition(Point(visibleSize.width * 0.91,                                       visibleSize.height * 0.07));        auto menu = Menu::create(_buyMenuItem,                             resetMenuItem,                             confirmMenuItem,                             nullptr);    menu->setPosition(Vec2::ZERO);    this->addChild(menu, UpgradeSceneDrawingOrderIcon);}void UpgradeScene::addLeftFrame() {    //获取屏幕大小    Size visibleSize = Director::getInstance()->getVisibleSize();    auto leftFrameTile  = Sprite::createWithSpriteFrameName("upgrades_bg2_tileRight.png");//左边框    leftFrameTile->setFlippedX(true);//左边框翻转    leftFrameTile->setAnchorPoint(Vec2::ANCHOR_MIDDLE_LEFT);    leftFrameTile->setPosition(Point(visibleSize.width * 0.03,                                     visibleSize.height / 2));    this->addChild(leftFrameTile, UpgradeSceneDrawingOrderFrame);        auto middleFrameTile = Sprite::createWithSpriteFrameName("upgrades_bg2_tileMid.png");    for (int i = 0; i < visibleSize.width / 2 / middleFrameTile->getContentSize().width; i++) {        middleFrameTile = Sprite::createWithSpriteFrameName("upgrades_bg2_tileMid.png");        middleFrameTile->setAnchorPoint(Vec2::ANCHOR_MIDDLE_LEFT);        middleFrameTile->setPosition(Vec2(leftFrameTile->getPosition().x                                      + leftFrameTile->getContentSize().width - 1                                      + i * (middleFrameTile->getContentSize().width - 1),                                      visibleSize.height / 2));        this->addChild(middleFrameTile, UpgradeSceneDrawingOrderFrame);    }        auto rightFrameTile = Sprite::createWithSpriteFrameName("upgrades_bg2_tileRight.png");//右边框    rightFrameTile->setPosition(Point(visibleSize.width * 0.61,                                      visibleSize.height / 2));    this->addChild(rightFrameTile, UpgradeSceneDrawingOrderFrame);        for (int i = 0; i < UpdateIcon_COLUMN; i++) {        auto iconImage = Sprite::createWithSpriteFrameName(iconImageName[i]);        iconImage->setPosition(Point(visibleSize.width * ICON_START_WIDTH + i * iconImage->getContentSize().width,                                     visibleSize.height * ICON_START_HEIGHT));        this->addChild(iconImage, UpgradeSceneDrawingOrderIcon);    }        //矩阵动态图片初始化    for (int i = 0; i < UpdateIcon_ROW; i++) {        for (int j = 0; j < UpdateIcon_COLUMN; j++) {            TowerUpdateParameter* updateParameter = TowerUpdateManager::getInstance()->getParameterByType(j * UpdateIcon_ROW + i);            _icons[i][j] = UpgradeIcon::createNewIcons(updateParameter->getOnIconImageName(),                                                       updateParameter->getOffIconImageName(),                                                       updateParameter->getTitle(),                                                       updateParameter->getExplain(),                                                       i + 2,                                                       UpgradeIconsStatusDisable,                                                       i,                                                       j);            _icons[i][j]->setPosition(Point(visibleSize.width * ICON_START_WIDTH + j * _icons[i][j]->getIconContentSize().width,                                            visibleSize.height * ICON_START_HEIGHT + (i + 1) * _icons[i][j]->getIconContentSize().height));            _icons[i][j]->setIconSelected(false);            _lastSelectedIcon = _icons[i][j];            this->addChild(_icons[i][j], UpgradeSceneDrawingOrderIcon);                        auto listener = EventListenerTouchOneByOne::create();            listener->onTouchBegan = CC_CALLBACK_2(UpgradeScene::onIconTouchBegan, this);            listener->onTouchEnded = CC_CALLBACK_2(UpgradeScene::onIconTouchEnded, this);            _eventDispatcher->addEventListenerWithSceneGraphPriority(listener, _icons[i][j]);        }    }}#pragma mark - for init Functionvoid UpgradeScene::initIconsStatus(){    for (int i = 0; i < UpdateIcon_ROW; i++) {        for (int j = 0; j < UpdateIcon_COLUMN; j++) {            _iconStatus[i][j] = UpgradeIconsStatusDisable;        }    }}void UpgradeScene::initIconSavedStatus(){	if (! UserDefault::getInstance()->getBoolForKey("upgrades_icon_sta_isExit", false)) {        for (int i = 0; i < UpdateIcon_ROW; i++) {            for (int j = 0; j < UpdateIcon_COLUMN; j++) {                UserDefault::getInstance()->setIntegerForKey(                            StringUtils::format("upgrades_icon_%d_%d", i, j).c_str(), (int) _iconInitStatus[i][j]);            }        }		UserDefault::getInstance()->setBoolForKey("upgrades_icon_sta_isExit", true);	}        for (int j = 0; j < UpdateIcon_COLUMN; j++) {        for (int i = 0; i < UpdateIcon_ROW; i++) {            if (UserDefault::getInstance()->getIntegerForKey(StringUtils::format("upgrades_icon_%d_%d", i, j).c_str()) == 1) {                _icons[i][j]->setIconStatus(UpgradeIconsStatusBuy);            } else {                if (_icons[i][j]->getStarNumber() <= _starLeftNumber) {                    _icons[i][j]->setIconStatus(UpgradeIconsStatusEnable);                                        i ++;                    while (i < UpdateIcon_ROW) {                        _icons[i++][j]->setIconStatus(UpgradeIconsStatusDisable);                    }                } else {                    _icons[i][j]->setIconStatus(UpgradeIconsStatusDisable);                }            }        }    }}void UpgradeScene::setBuyMenuItemShow(UpgradeIcon* iconSelect){    if (iconSelect->getIconStatus() == UpgradeIconsStatusEnable)        _buyMenuItem->setVisible(true);    else        _buyMenuItem->setVisible(false);}#pragma mark - for Callback Functionbool UpgradeScene::onIconTouchBegan(Touch* touch, Event* event){	auto target = dynamic_cast <UpgradeIcon *> (event->getCurrentTarget());		Point locationInNode = target->convertToNodeSpace(touch->getLocation());	Size size = target->getIconContentSize();	Rect rect = Rect(0 - size.width/2, 0 - size.height/2, size.width, size.height);	if (rect.containsPoint(locationInNode))	{  			SoundManager::playClickEffect();		_lastSelectedIcon->setIconSelected(false);		target->setIconSelected(true);		_updateNeedStarLabel->setString(StringUtils::format("%d", _lastSelectedIcon->getStarNumber()).c_str());		_nameLabel->setString(target->getIconName());		_introductionLabel->setString(target->getIconIntroduction());		_displayIcon->setSpriteFrame(target->getIconSpriteFrame());		this->setBuyMenuItemShow(target);				_lastSelectedIcon = target;		return true; 	}  	return false;  }void UpgradeScene::onMenuResetCallback(Ref* pSender) {    _starLeftNumber = _starAllNumber;        for (int i = 0; i < UpdateIcon_ROW; i++) {        for (int j = 0; j < UpdateIcon_COLUMN; j++) {            _icons[i][j]->setIconStatus(UpgradeIconsStatusDisable);            UserDefault::getInstance()->setIntegerForKey(StringUtils::format("upgrades_icon_%d_%d",i,j).c_str(), 0);        }    }    this->initIconSavedStatus();        UserDefault::getInstance()->setIntegerForKey(GameManager::getInstance()->SLOT_X_STAR_LEFT, _starLeftNumber);    _remainStarLabel->setString(StringUtils::format("%d", _starLeftNumber).c_str());}void UpgradeScene::onMenuBuyCallback(Ref* pSender) {    SoundManager::playClickEffect();    _lastSelectedIcon->setIconStatus(UpgradeIconsStatusBuy);        UserDefault::getInstance()->setIntegerForKey(StringUtils::format("upgrades_icon_%d_%d",                                                                     _lastSelectedIcon->getIconRow(),                                                                     _lastSelectedIcon->getIconColumn()).c_str(),                                                 1);    _starLeftNumber -= _lastSelectedIcon->getStarNumber();    UserDefault::getInstance()->setIntegerForKey(GameManager::getInstance()->SLOT_X_STAR_LEFT, _starLeftNumber);    _remainStarLabel->setString(StringUtils::format("%d", _starLeftNumber).c_str());    _buyMenuItem->setVisible(false);        this->initIconSavedStatus();}void UpgradeScene::onKeyReleased(EventKeyboard::KeyCode keycode, Event* event){    switch (keycode)    {	case EventKeyboard::KeyCode::KEY_BACK:   //返回键听		Director::getInstance()->popScene();        break;    case EventKeyboard::KeyCode::KEY_MENU:      //菜单监听        break;    case::EventKeyboard::KeyCode::KEY_HOME:        break;    default:        break;    }}void UpgradeScene::onMenuConfirmCallback(Ref* pSender) {    SoundManager::playClickEffect();    Director::getInstance()->popScene();}