#include "Boss_Efreeti.h"#include "GameManager.h"#include "BaseMap.h"//#include "Efreeti.h"#include "Monster.h"#include "SoundManager.h"Boss_Efreeti* Boss_Efreeti::createMonster(std::vector<Point> points,                                          std::vector<std::vector<std::vector<Point>>> sonpath){    auto monster = new Boss_Efreeti();    if (monster && monster->init(MOSTER_TYPE_BOSS_EFREETI))    {        monster->setPointsVector(points);		monster->_sonPathVector = sonpath;        monster->runToNextPoint();                monster->autorelease();        return monster;    }    CC_SAFE_DELETE(monster);    return NULL;}void Boss_Efreeti::addAdditionalSprite() {    _cloud = Sprite::createWithSpriteFrameName("Boss_Efreeti_Cloud_0001.png");    _cloud->setPosition(Point(_baseSprite->getContentSize().width / 2,                              _baseSprite->getContentSize().height / 2));    _baseSprite->addChild(_cloud, BaseMonsterDrawingOrderCloud);    _cloud->runAction(RepeatForever::create(                                            Animate::create(AnimationCache::getInstance()->getAnimation(this->getMonsterName() + "cloud"))));        this->schedule(schedule_selector(Boss_Efreeti::skill), 20.0f, 2, 5.0f);}void Boss_Efreeti::skill(float dt){	this->setIsAttacking(true);	this->stopWalking();    	SoundManager::playEfreetiClap();    	_baseSprite->runAction(Sequence::create(		Animate::create(AnimationCache::getInstance()->getAnimation(this->getMonsterName() + "skill")),		CallFuncN::create(CC_CALLBACK_0(Boss_Efreeti::addChildrenMonsters, this)),		CallFuncN::create(CC_CALLBACK_0(Boss_Efreeti::laugh, this)),		CallFuncN::create(CC_CALLBACK_0(Boss_Efreeti::restartWalking, this)),		CallFuncN::create(CC_CALLBACK_0(Boss_Efreeti::setIsAttacking, this, false)),		NULL));}void Boss_Efreeti::addChildrenMonsters(){	for (int i = 0; i < _sonPathVector.size(); i++) {		for (int j = 1; j < _sonPathVector.at(i).size(); j++) {			std::vector<Point> points = _sonPathVector.at(i).at(j);			auto childrenMonster = Monster::createMonster(MOSTER_TYPE_EFREETI, points, _pointCounter);			this->getParent()->addChild(childrenMonster);			GameManager::getInstance()->monsterVector.pushBack(childrenMonster);		}	}}void Boss_Efreeti::laugh() {	SoundManager::playEfreetiLaugh();}