#ifndef _BASE_MONSTER_H_#define _BASE_MONSTER_H_#include "cocos2d.h"USING_NS_CC;typedef enum {    MonsterStateNone = 0,  //无状态    MonsterStateWalkRight, //向右走走状态    MonsterStateWalkLeft,  //向左走	MonsterStateWalkUp,    //向上走	MonsterStateWalkDown,  //向下走	MonsterStateAttackLeft,	MonsterStateAttackRight, //攻击	MonsterStateDeath,     //死亡	MonsterStateFrozen} MonsterState;typedef enum MonsterType {    MOSTER_TYPE_THUG        = 0,    MOSTER_TYPE_RADIER      = 1,    MOSTER_TYPE_WOLF        = 2,    MOSTER_TYPE_IMMORTAL    = 3,    MOSTER_TYPE_FALLEN      = 4,	MOSTER_TYPE_WASPHORNET  = 5,    MOSTER_TYPE_WASPQUEEN   = 6,    MOSTER_TYPE_SCORPION    = 7,    MOSTER_TYPE_TREMOR      = 8,    MOSTER_TYPE_MUNRA       = 9,    MOSTER_TYPE_EXECUTIONER = 10,    MOSTER_TYPE_CANIBAL     = 11,    MOSTER_TYPE_GORILLA     = 12,    MOSTER_TYPE_HUNTER      = 13,    MOSTER_TYPE_PRIEST      = 14,    MOSTER_TYPE_SHAMAN      = 15,    MOSTER_TYPE_SHIELD      = 16,    MOSTER_TYPE_WINGRIDER   = 17,    MOSTER_TYPE_BLAZEFANG   = 18,    MOSTER_TYPE_BROODGUARD  = 19,    MOSTER_TYPE_ELITE       = 20,    MOSTER_TYPE_MYRMIDON    = 21,    MOSTER_TYPE_NIGHTSCALE  = 22,    MOSTER_TYPE_QUETZAL     = 23,	MOSTER_TYPE_BOSS_EFREETI= 100,	MOSTER_TYPE_BOSS_CANIBAL= 101,    MOSTER_TYPE_EFREETI     = 201,	MOSTER_TYPE_CANIBAL_OFFSPRING = 202} MonsterType;enum BaseMonsterDrawingOrder : unsigned int {    BaseMonsterDrawingOrderCloud = 0,    BaseMonsterDrawingOrderBackground,    BaseMonsterDrawingOrderHPBar,    BaseMonsterDrawingOrderBlood};class BaseMonster : public Sprite{public:    BaseMonster();    ~BaseMonster();    bool initWithMonsterType(int monsterType);        int _monsterType;    void setMonsterType(int monsterType);    int getMonsterType();        CC_SYNTHESIZE(float, _maxHp, MaxHp);                    //HP    CC_SYNTHESIZE(float, _currentHP, CurrentHP);            //当前HP    CC_SYNTHESIZE(float, _force, Force);                    //攻击力    CC_SYNTHESIZE(float, _armor, Armor);                    //防护力    CC_SYNTHESIZE(int,   _money, Money);                    //价值    CC_SYNTHESIZE(float, _runSpeed, RunSpeed);              //速度    CC_SYNTHESIZE(std::string, _monsterName, MonsterName);  //MonsterName        CC_SYNTHESIZE(std::vector<Point>, _pointsVector, PointsVector);    //行进路线	CC_SYNTHESIZE(bool, _enableAttackBySoldier, EnableAttackBySoldier);//能否被soldier攻击	CC_SYNTHESIZE(bool, _enableAttackByTower, EnableAttackByTower);    //能否被tower攻击	CC_SYNTHESIZE(bool, _isAttacking, IsAttacking);                    //是否正在被攻击	CC_SYNTHESIZE(float, _hpPercentage, HPPercentage);                 //HP百分比	CC_SYNTHESIZE(MonsterState, _state, MonsterState);                 //monster状态    CC_SYNTHESIZE_READONLY(ProgressTimer*, _hpBar, HpBar);             //HP bar状态    CC_SYNTHESIZE(bool, _isSlowed, IsSlowed);                          //是否处于被减速状态        CC_SYNTHESIZE(bool, _haveChildren, HaveChildren);                  //HaveChildren    CC_SYNTHESIZE(int, _childrenType, ChildrenType);                   //ChildrenType    CC_SYNTHESIZE(bool, _isFly, IsFly);                                //IsFly        CC_SYNTHESIZE(std::string, _portraitsImageName, PortraitsImageName); //portraitsImageName    CC_SYNTHESIZE(std::string, _portraitsName, PortraitsName);           //portraitsName        //run on slowly speed    virtual void runOnSlowSpeed(float dt, float dis);        virtual void stopWalking();	virtual void restartWalking();        Sprite* _ice;	virtual void frozen();	virtual void refrozen(float dt);        virtual void hurt();         //流血    virtual void death();        //躺着死    virtual void explosion();    //被炸死    Size getMonsterContentSize(); //获得怪物的大小    Rect getMonsterBoundingBox(); //获得怪物的边界    Point getMonsterPosition();        void resetWithPaths(std::vector<Point> points);    protected:    std::string _baseSpriteImageName;    Sprite* _baseSprite;             //怪物的主图片    void addBaseSprite();        //和流血相关    std::string _bloodColor;    Sprite* _bloodSprite;    void addBloodSprite(std::string bloodColor);        //流血    Sprite* _decalBlood;        //HP显示背景    Sprite* _hpBackgroundSprite;    void addHPBackgroundAndBar();    	void setMonsterZOrder(int yOrder);    	int _pointCounter;            //行动到某个位置的计数器    Point _tempNextPoint;    	Point getCurrentPoint();      //获得当前的位置坐标    Point getNextPoint();         //获得下一个位置的坐标    Point getAndMoveToNextPoint();//获得下一个位置坐标，并将计数器（_pointCounter）加一        void runToNextPoint();        //将monster运动到下一个点    	MonsterState _tempState;	MonsterState _lastState;	void showInfo();        virtual void update(float dt) override;        bool onTouchBegan(Touch* touch, Event* event);    void onTouchEnded(Touch* touch, Event* event);        virtual void birthChildrenMonster() {};    virtual void handleDeathMonster();private:    void playCommonDeath(Sequence* sequence);    void addMoneyLabel();};#endif