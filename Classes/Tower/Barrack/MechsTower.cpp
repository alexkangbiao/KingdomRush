#include "MechsTower.h"#include "SimplePanleLayerWithFlag.h"#include "BaseMap.h"bool MechsTower::init(){	if (!BaseTower::init()) {		return false;	}        this->addTerrainSprite("terrain_barrack_0004.png");	this->setTowerType(TOWER_TYPE_MECHS);//	this->setScope(220.0f);//	this->setBuildMoney(550);//    this->setScope(200);    	SoundManager::playMechLoading();        this->initLayers();	return true;}#pragma mark - for init function//初始化机器人。void MechsTower::initMech() {    _mecha = Mecha::create();    _mecha->setPosition(Point(0, 40));    this->getParent()->addChild(_mecha);}void MechsTower::initLayers() {    auto layer1 = Sprite::createWithSpriteFrameName("tower_mechs_layer1_0001.png");    //	auto layer2 = Sprite::createWithSpriteFrameName("tower_mechs_layer2_0001.png");    auto layer3 = Sprite::createWithSpriteFrameName("tower_mechs_layer3_0001.png");    auto layer4 = Sprite::createWithSpriteFrameName("tower_mechs_layer4_0001.png");    auto layer5 = Sprite::createWithSpriteFrameName("tower_mechs_layer5_0001.png");    auto layer6 = Sprite::createWithSpriteFrameName("tower_mechs_layer6_0001.png");    auto layer7 = Sprite::createWithSpriteFrameName("tower_mechs_layer7_0001.png");    auto layer8 = Sprite::createWithSpriteFrameName("tower_mechs_layer8_0001.png");    auto layer9 = Sprite::createWithSpriteFrameName("tower_mechs_layer9_0001.png");        this->addChild(layer1);    //this->addChild(layer2);    this->addChild(layer3);    this->addChild(layer4);    this->addChild(layer5);    this->addChild(layer6);    this->addChild(layer7);    this->addChild(layer8);    this->addChild(layer9);        //layer2->runAction(Animate::create(AnimationCache::getInstance()->getAnimation("MechsTower_layer2")));    layer3->runAction(Animate::create(AnimationCache::getInstance()->getAnimation("MechsTower_layer3")));    layer4->runAction(Animate::create(AnimationCache::getInstance()->getAnimation("MechsTower_layer4")));    layer6->runAction(Animate::create(AnimationCache::getInstance()->getAnimation("MechsTower_layer6")));    layer7->runAction(Animate::create(AnimationCache::getInstance()->getAnimation("MechsTower_layer7")));    layer8->runAction(Animate::create(AnimationCache::getInstance()->getAnimation("MechsTower_layer8")));    layer9->runAction(Sequence::create(Animate::create(AnimationCache::getInstance()->getAnimation("MechsTower_layer9")),                                       CallFuncN::create(CC_CALLBACK_0(MechsTower::initMech,this)),                                       NULL));        layer3->runAction(Sequence::create(DelayTime::create(2.0f),                                       Animate::create(AnimationCache::getInstance()->getAnimation("MechsTower_layer3_r")),                                       NULL));        layer4->runAction(Sequence::create(DelayTime::create(2.0f),                                       Animate::create(AnimationCache::getInstance()->getAnimation("MechsTower_layer4_r")),                                       CallFuncN::create(CC_CALLBACK_0(MechsTower::playReadySound, this)),                                       NULL));}#pragma mark - for private functionvoid MechsTower::playReadySound(){	SoundManager::playMechReady();}void MechsTower::sellTower(){	if (_mecha != nullptr) {		_mecha->stopAllActions();		_mecha->unscheduleAllCallbacks();		_mecha->removeFromParent();	}	static_cast<Terrain*>(this->getParent())->executeSmokeEffect();	static_cast<Terrain*>(this->getParent())->setTerrainBaseSpriteVisible(true);	this->unscheduleAllCallbacks();	this->removeAllChildren();	this->removeFromParent();}void MechsTower::showUpdateMenu(){	auto updatePanleLayer = SimplePanleLayerWithFlag::create();	updatePanleLayer->setTag(_terrain->getTag() + UPDATE_MENU_TAG);	updatePanleLayer->setTower(this);	updatePanleLayer->setPosition(this->getParent()->getPosition());	static_cast<BaseMap*>(this->getParent()->getParent())->mTouchLayer->addChild(updatePanleLayer);	updatePanleLayer->playShowAnimation();	_isUpdateMenuShown = true;}void MechsTower::setRallyPoint(Point location) {	_mecha->runToLocation(location - this->getParent()->getPosition());}