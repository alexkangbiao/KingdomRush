#include "NecromancerTower.h"#include "UpdatePanelLayer.h"#include "BaseMap.h"#include "GameManager.h"#include "NecrBolt.h"#include "BaseMap.h"#include "SimplePanleLayerWithFlag.h"bool NecromancerTower::init(){	if (! BaseMageTower::init()) {		return false;	}	this->setTowerType(TOWER_TYPE_NEC);	this->initMageTower(this->getLevel());	this->schedule(schedule_selector(NecromancerTower::shoot), this->getShootPeriod());        this->addDeathKnight();    	SoundManager::playNecTowerReady();    this->addAdditional();    	this->schedule(schedule_selector(NecromancerTower::cureSoldiers), 10.0f, -1, 10.0f);    	return true;}#pragma mark - for init(add) functionvoid NecromancerTower::addDeathKnight() {    _deathKnight = DeathKnight::createDeathKnight(Point(0, -40));    this->addChild(_deathKnight, BaseTowerDrawingOrderSoldier);}void NecromancerTower::addAdditional() {    _glow = Sprite::createWithSpriteFrameName("NecromancerTowerGlow.png");    this->addChild(_glow);    _glow->setPosition(Point(0,-5));    _glow->setVisible(false);        auto effect = Sprite::createWithSpriteFrameName("NecromancerTowerEffect_0001.png");    effect->setPosition(Point(0,10));    this->addChild(effect);    effect->runAction(RepeatForever::create(Animate::create(AnimationCache::getInstance()->getAnimation("NecromancerTower_Effect"))));}#pragma mark - for attck functionBullet* NecromancerTower::getMageTowerBullet(){//    log("Artillery bullet vector number is : %ld", _bulletVector.size());        //循环使用已经生成的子弹，否则就转到生成新子弹    for (int i = 0; i < _bulletVector.size(); i++) {        if (!_bulletVector.at(i)->getParent()) {            _bulletVector.at(i)->restoreBullet();            _bulletVector.at(i)->setPosition(_bulletInitPoint);            this->getParent()->addChild(_bulletVector.at(i));            return _bulletVector.at(i);        }    }	auto bullet = NecrBolt::create();	bullet->setPosition(_bulletInitPoint);//    bullet->setMaxForce(this->getForce());	this->getParent()->addChild(bullet);    _bulletVector.pushBack(bullet);        return bullet;}void NecromancerTower::prepareAnimation() {    _shootUpAnimation   = AnimationCache::getInstance()->getAnimation("NecomancerMage_shoot_up");    _shootDownAnimation = AnimationCache::getInstance()->getAnimation("NecomancerMage_shoot_down");}void NecromancerTower::playShootVoice() {    SoundManager::playNecShot();}void NecromancerTower::playAdditionalAnimate() {    _glow->runAction(Sequence::create(CallFuncN::create(CC_CALLBACK_0(Sprite::setVisible, _glow, true)),                                      DelayTime::create(0.5f),                                      CallFuncN::create(CC_CALLBACK_0(Sprite::setVisible, _glow, false)),                                      NULL));}#pragma mark - for update functionvoid NecromancerTower::showUpdateMenu() {	auto simplePanleLayer = SimplePanleLayerWithFlag::create();	simplePanleLayer->setTag(_terrain->getTag() + UPDATE_MENU_TAG);	simplePanleLayer->setTower(this);	simplePanleLayer->setPosition(this->getParent()->getPosition());	static_cast<BaseMap*>(this->getParent()->getParent())->mTouchLayer->addChild(simplePanleLayer);	simplePanleLayer->playShowAnimation();	_isUpdateMenuShown = true;}void NecromancerTower::setRallyPoint(Point point){	auto rallyPoint = point - this->getParent()->getPosition();	SoundManager::playDKTaunt();	_deathKnight->setLocation(rallyPoint);	if(_deathKnight->getNearestMonster() != nullptr       && _deathKnight->getNearestMonster()->getMonsterState() != MonsterStateDeath)		_deathKnight->getNearestMonster()->restartWalking();    	_deathKnight->runToLocation(_deathKnight->getLocation());}#pragma mark - for others functionvoid NecromancerTower::cureSoldiers(float dt){	if (_deathKnight->getState() == SoldierStateWait) {		_deathKnight->setCurrentHP(_deathKnight->getMaxHp());		_deathKnight->setHpPercentage(100);		_deathKnight->getHpBar()->setPercentage(100);	} else if (_deathKnight->getState() == SoldierStateDeath) {		auto point = _deathKnight->getLocation();		_deathKnight ->removeFromParent();		_deathKnight = nullptr;		_deathKnight = DeathKnight::createDeathKnight(point);		this->addChild(_deathKnight);	}}