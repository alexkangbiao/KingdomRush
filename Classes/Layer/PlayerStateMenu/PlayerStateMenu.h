#ifndef _PLAYER_STATE_MENU_H_#define _PLAYER_STATE_MENU_H_#include "cocos2d.h"#include "TouchLayer.h"#include "GameManager.h"#include "BaseTower.h"#include "BaseMonster.h"#include "GameOption.h"#include "PlayerStateLabel.h"#include "SkillButton.h"#include "ExtensibleSkillButton.h"#include "MonsterInfoLayer.h"#include "TowerInfoLayer.h"USING_NS_CC;enum PlayerStateMenuDrawingOrder : unsigned int {    PlayerStateMenuDrawingOrderBoard = 0,    PlayerStateMenuDrawingOrderLayer,    PlayerStateMenuDrawingOrderColorLayer,    PlayerStateMenuDrawingOrderGameOption,    PlayerStateMenuDrawingOrderStory,    PlayerStateMenuDrawingOrderIceCorner,    PlayerStateMenuDrawingOrderNoticeInterface};enum PlayerStateMenuTag : unsigned int {    PlayerStateMenuTagColorLayer = 100,    PlayerStateMenuTagIceCornerTopLeft,    PlayerStateMenuTagIceCornerBottomLeft,    PlayerStateMenuTagIceCornerTopRight,    PlayerStateMenuTagIceCornerBottomRight};class PlayerStateMenu : public Layer {    private:    CC_SYNTHESIZE(int, _level, Level);    CC_SYNTHESIZE(int, _difficult, Difficult);    void addStateSprites();        MenuItemSprite* _pauseMenuItem;    void addPauseSprites();    void onTouchPause(Ref *pRef);        //thunder Stone    void onThunderStoneTouch(Ref* pSender);    void onParatrooperTouch(Ref* pSender);    void onBackpackIconTouch(Ref* pSender);    void onBackpackTouch(Ref* pSender);        void addThunderStoneSprite();    void addParatrooperSprite();    void addBackPackSprite();            void executeShopSkill(int type);        void executeAtomicBomb();    void executeFrozen();    void removeFrozen(float dt);    void clearMonsters();        void safeRemoveChildByTag(int tag);        bool _isFrozen;    GameOption * _gameOption;    void addGameOption();    void pauseGame();    void initGameOption();        void onEnterTransitionDidFinish();public:        static Scene* createScene();    virtual bool init();    CREATE_FUNC(PlayerStateMenu);        PlayerStateLabel *playerStateLabel;        SkillButton* thunderStoneButton;    SkillButton* paratrooperButton;    ExtensibleSkillButton* extensibleSkillButton;    	std::string stringForSkillFileName;	GameManager* instance;	TouchLayer* mTouchLayer;    TowerInfoLayer* _towerInfoLayer;    void initTowerInfoLayer();    void showTowerInfo(BaseTower* tower);    void showTowerInfo(int towerType);	void hideTowerInfo();        MonsterInfoLayer* _monsterInfoLayer;    void initMonsterInfoLayer();	void showMonsterInfo(BaseMonster* monster);	void hideMonsterInfo();    	void removeGameOption();};#endif