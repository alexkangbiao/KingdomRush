#ifndef _BASE_TOWER_H_#define _BASE_TOWER_H_#include "cocos2d.h"#include "Circle.h"#include "Terrain.h"#include "BaseMonster.h"#include "SoundManager.h"//#include "Bullet.h"USING_NS_CC;typedef enum{    TOWER_TYPE_ARCHER_1 = 0,     //级箭塔    TOWER_TYPE_ARCHER_2 = 1,     //2级箭塔    TOWER_TYPE_ARCHER_3 = 2,     //3级箭塔    TOWER_TYPE_COSSBOW  = 3,     //弩塔    TOWER_TYPE_TOTEMTOWER  = 4,  //野人    TOWER_TYPE_ARTILLERY_1 = 5,  //1级炮塔    TOWER_TYPE_ARTILLERY_2 = 6,  //2级炮塔    TOWER_TYPE_ARTILLERY_3 = 7,  //3级炮塔    TOWER_TYPE_EARTHQUAKE  = 8,  //地震    TOWER_TYPE_MECHS       = 9,  //机器    TOWER_TYPE_BARAACKS_1  = 10,   //1级兵营    TOWER_TYPE_BARAACKS_2  = 11,   //2级兵营    TOWER_TYPE_BARAACKS_3  = 12,   //3级兵营    TOWER_TYPE_ASSASSIN    = 13,     //盗贼    TOWER_TYPE_TEMPLAR     = 14,      //战士    TOWER_TYPE_MAGE_1      = 15,  //1级法师塔    TOWER_TYPE_MAGE_2      = 16,       //2级法师塔    TOWER_TYPE_MAGE_3      = 17,       //3级法师塔    TOWER_TYPE_ARCHMAGE    = 18,     //龙卷风    TOWER_TYPE_NEC         = 19,    //死灵法}TowerType;enum BaseTowerDrawingOrder : unsigned int {    BaseTowerDrawingOrderTerrain = 0,    BaseTowerDrawingOrderTowerBase,    BaseTowerDrawingOrderEffect,    BaseTowerDrawingOrderAdditional,    BaseTowerDrawingOrderSoldier};const unsigned int UPDATE_MENU_TAG = 100;class BaseTower: public Sprite{public:    BaseTower();    ~BaseTower();    CREATE_FUNC(BaseTower);    virtual bool init();        int _towerType;    int getTowerType();    void setTowerType(int towerType);        CC_SYNTHESIZE(Terrain*, _terrain, Terrain);    CC_SYNTHESIZE(std::string, _towerName, TowerName); //Tower Name    CC_SYNTHESIZE(int,   _level, Level);               //Level    CC_SYNTHESIZE(float, _attackScope, AttackScope);   //攻击范围    CC_SYNTHESIZE(float, _nextScope, NextScope);       //下一级别攻击范围//    CC_SYNTHESIZE(float, _rate, Rate);    CC_SYNTHESIZE(float, _shootPeriod, ShootPeriod);   //攻击间隔时间//    CC_SYNTHESIZE(int, _force, Force);                 //攻击强度    CC_SYNTHESIZE(int, _updateMoney, UpdateMoney);     //Update需要钱数    CC_SYNTHESIZE(int, _buildMoney, BuildMoney);       //建造钱数        CC_SYNTHESIZE(int, _update1StartLevel, Update1StartLevel);//Update 1 Start Level    CC_SYNTHESIZE(int, _update2StartLevel, Update2StartLevel);//Update 2 Start Level        CC_SYNTHESIZE(std::string, _portraitsImageName, PortraitsImageName); //portraitsImageName        bool _isUpdateMenuShown;        virtual void showTowerInfo();    virtual void removeTowerInfo();    virtual void updateTower(){};    virtual void sellTower();    virtual void removeTower();    virtual void update1(){};    virtual void update2(){};        virtual void setRallyPoint(Point point){};    virtual void playBuildingAnimation();        virtual Point getTowerPosition();protected:    //这个主要目的是为了响应点击，点击之后弹出更新和信息窗口    Sprite* towerBase;        Sprite* _terrainSprite;    void addTerrainSprite(std::string terrainImageName);    bool onTerrainTouchBegan(Touch *touch, Event *event);    void onTerrainTouchEnded(Touch* touch, Event* event);    BaseMonster* _nearestMonster;    //    virtual void checkNearestMonster();    virtual BaseMonster* getCanAttackMonster();        virtual void showUpdateMenu();    virtual void hideUpdateMenu();        virtual void playSmokeEfftectAnimation();    virtual void initTownForReady(float dt) {};        //存放子弹的队列//    Vector<Bullet*> _bulletVector;        //在攻击范围内怪物的数量    int _monstersCount;    virtual void prepareAnimation() {};    //    virtual Bullet* getTowerBullet() {};        float caculateSpendTime(Point toPoint, float bulletSpeed);        //添加由于武器升级造成的士兵参数调整    virtual void addAdditionalParameterConfig() {};};#endif