#include "AppDelegate.h"#include "LoadingScene.h"#include "SimpleAudioEngine.h" using namespace CocosDenshion;USING_NS_CC;//static cocos2d::Size designResolutionSize = cocos2d::Size(1200, 1000);//static cocos2d::Size designResolutionSize = cocos2d::Size(960, 640);static cocos2d::Size designResolutionSize = cocos2d::Size(1024, 768);static cocos2d::Size smallResolutionSize  = cocos2d::Size(960, 640);static cocos2d::Size mediumResolutionSize = cocos2d::Size(1024, 768);static cocos2d::Size largeResolutionSize  = cocos2d::Size(2048, 1536);AppDelegate::AppDelegate() {}AppDelegate::~AppDelegate() {}//if you want a different context,just modify the value of glContextAttrs//it will takes effect on all platformsvoid AppDelegate::initGLContextAttrs(){    //set OpenGL context attributions,now can only set six attributions:    //red,green,blue,alpha,depth,stencil    GLContextAttrs glContextAttrs = {8, 8, 8, 8, 24, 8};    GLView::setGLContextAttrs(glContextAttrs);}bool AppDelegate::applicationDidFinishLaunching() {    // initialize director    auto director = Director::getInstance();    auto glview = director->getOpenGLView();    if(!glview) {#if (CC_TARGET_PLATFORM == CC_PLATFORM_WIN32) || (CC_TARGET_PLATFORM == CC_PLATFORM_MAC) || (CC_TARGET_PLATFORM == CC_PLATFORM_LINUX)           glview = GLViewImpl::createWithRect("KingdomRush", Rect(0, 0, designResolutionSize.width, designResolutionSize.height));#else        glview = GLViewImpl::create("KingdomRush");#endif//		glview->setFrameSize(designResolutionSize.width, designResolutionSize.height);                director->setOpenGLView(glview);    }        // Set the design resolution//    glview->setDesignResolutionSize(designResolutionSize.width, designResolutionSize.height, ResolutionPolicy::NO_BORDER);    glview->setDesignResolutionSize(designResolutionSize.width, designResolutionSize.height, ResolutionPolicy::FIXED_HEIGHT);    Size frameSize = glview->getFrameSize();    FileUtils::getInstance()->addSearchPath("res");        std::vector<std::string> searchResolutionsOrder(1);        // if the frame's height is larger than the height of medium size.    if (frameSize.height > mediumResolutionSize.height)    {        director->setContentScaleFactor(MIN(largeResolutionSize.height/designResolutionSize.height, largeResolutionSize.width/designResolutionSize.width));        searchResolutionsOrder[0] = "resources-3x";    // if the frame's height is larger than the height of small size.    } else if (frameSize.height > smallResolutionSize.height) {        director->setContentScaleFactor(MIN(mediumResolutionSize.height/designResolutionSize.height, mediumResolutionSize.width/designResolutionSize.width));        searchResolutionsOrder[0] = "resources-2x";    } else {        director->setContentScaleFactor(MIN(smallResolutionSize.height/designResolutionSize.height, smallResolutionSize.width/designResolutionSize.width));        searchResolutionsOrder[0] = "resources-1x";    }        searchResolutionsOrder[0] = "resources-1x";        FileUtils::getInstance()->setSearchResolutionsOrder(searchResolutionsOrder);        director->setDisplayStats(true);    // set FPS. the default value is 1.0/60 if you don't call this    director->setAnimationInterval(1.0 / 60);        // create a scene. it's an autorelease object    auto scene = LoadingScene::createScene();    // run    director->runWithScene(scene);    return true;}// This function will be called when the app is inactive. When comes a phone call,it's be invoked toovoid AppDelegate::applicationDidEnterBackground() {    Director::getInstance()->stopAnimation();    // if you use SimpleAudioEngine, it must be pause     SimpleAudioEngine::getInstance()->pauseBackgroundMusic();}// this function will be called when the app is active againvoid AppDelegate::applicationWillEnterForeground() {    Director::getInstance()->startAnimation();    // if you use SimpleAudioEngine, it must resume here     SimpleAudioEngine::getInstance()->resumeBackgroundMusic();}//http://becomingindiedev.blogspot.com/2014/05/multi-resolution-support-in-ios-with.html