#include "MonsterInfoLayer.h"#include "Utility.h"#include "GameManager.h"MonsterInfoLayer* MonsterInfoLayer::createMonsterInfoLayer(){    auto monsterInfoLayer = new MonsterInfoLayer();    if(monsterInfoLayer && monsterInfoLayer->init()){        monsterInfoLayer->autorelease();        return monsterInfoLayer;    }    CC_SAFE_DELETE(monsterInfoLayer);    return NULL;}bool MonsterInfoLayer::init() {    if (!Sprite::init()) {        return false;    }        this->initBackgroundAndLabel();    return true;}void MonsterInfoLayer::updateMonsterHP(float dt) {    if (_monster == nullptr || !_monster->getParent() || _monster->getCurrentHP() <= 0) {        this->deleteSchedule();    } else        _hpLabel->setString(Utility::string_format("%d/%d",                                                  (int)_monster->getCurrentHP(),                                                  (int)_monster->getMaxHp()));}void MonsterInfoLayer::updateMonster(BaseMonster* monster) {    _monster = monster;    CC_SAFE_RETAIN(_monster);    _portraitsImage->setSpriteFrame(_monster->getPortraitsImageName());    _monsterName->setString(_monster->getPortraitsName());    _hpLabel->setString(Utility::string_format("%d/%d",                                               (int)_monster->getMaxHp(),                                               (int)_monster->getMaxHp()));    _forceLabel->setString(Utility::string_format("%d",                                                  (int)_monster->getForce()));    _armorLabel->setString(Utility::string_format("%d",                                                  (int)_monster->getArmor()));    this->schedule(schedule_selector(MonsterInfoLayer::updateMonsterHP), GameManager::getInstance()->MONSTERINFOLAYER_UPDATE_PERIOD);}void MonsterInfoLayer::deleteSchedule() {    this->unschedule(schedule_selector(MonsterInfoLayer::updateMonsterHP));    CC_SAFE_RELEASE_NULL(_monster);}void MonsterInfoLayer::initBackgroundAndLabel() {    this->setSpriteFrame("menu_bottom_bg.png");        auto protraits = Sprite::createWithSpriteFrameName("portraits_sc.png");    protraits->setPosition(Point(protraits->getContentSize().width / 2,                                 protraits->getContentSize().height / 2));    this->addChild(protraits, MonsterInfoLayerDrawingOrderBackground);        _portraitsImage = Sprite::createWithSpriteFrameName("portraits_sc.png");    _portraitsImage->setPosition(Point(protraits->getContentSize().width / 2,                                       protraits->getContentSize().height / 2));    protraits->addChild(_portraitsImage, MonsterInfoLayerDrawingOrderLabel);    _monsterName = Label::createWithBMFont("fonts/bmfont.fnt", "");//createWithTTF("", "fonts/Comic_Book.ttf", 20);    _monsterName->setPosition((Point(protraits->getContentSize().width + MONSTERINFO_LAYER_MARGIN,                                     this->getContentSize().height / 2)));    _monsterName->setAnchorPoint(Vec2::ANCHOR_MIDDLE_LEFT);    this->addChild(_monsterName, MonsterInfoLayerDrawingOrderLabel);        auto hpSprite = Sprite::createWithSpriteFrameName("icon_0006.png");    hpSprite->setPosition(Point(this->getContentSize().width * 0.4f,                                this->getContentSize().height / 2));    this->addChild(hpSprite);        _hpLabel = Label::createWithBMFont("fonts/bmfont.fnt", "0/0");    _hpLabel->setAnchorPoint(Vec2::ANCHOR_MIDDLE_LEFT);    _hpLabel->setPosition(Point(hpSprite->getPosition().x + hpSprite->getContentSize().width + MONSTERINFO_LAYER_MARGIN,                                this->getContentSize().height / 2));    this->addChild(_hpLabel, MonsterInfoLayerDrawingOrderLabel);        auto forceSprite = Sprite::createWithSpriteFrameName("icon_0007.png");    forceSprite->setPosition(Point(this->getContentSize().width * 0.6f,                                   this->getContentSize().height / 2));    this->addChild(forceSprite, MonsterInfoLayerDrawingOrderLabel);        _forceLabel = Label::createWithBMFont("fonts/bmfont.fnt", "0");    _forceLabel->setAnchorPoint(Vec2::ANCHOR_MIDDLE_LEFT);    _forceLabel->setPosition(Point(forceSprite->getPosition().x + forceSprite->getContentSize().width + MONSTERINFO_LAYER_MARGIN,                                   this->getContentSize().height / 2));    this->addChild(_forceLabel, MonsterInfoLayerDrawingOrderLabel);        //显示护甲    auto armorSprite = Sprite::createWithSpriteFrameName("icon_0004.png");    armorSprite->setPosition(Point(this->getContentSize().width * 0.8f,                                   this->getContentSize().height / 2));    this->addChild(armorSprite, MonsterInfoLayerDrawingOrderLabel);        _armorLabel = Label::createWithBMFont("fonts/bmfont.fnt", "0");    _armorLabel->setAnchorPoint(Vec2::ANCHOR_MIDDLE_LEFT);    _armorLabel->setPosition(Point(armorSprite->getPosition().x + armorSprite->getContentSize().width + MONSTERINFO_LAYER_MARGIN,                                   this->getContentSize().height / 2));    this->addChild(_armorLabel, MonsterInfoLayerDrawingOrderLabel);    }