#ifndef __UPGRADES_H__#define __UPGRADES_H__#include <vector>#include "cocos2d.h"#include "UpgradeIcon.h"const int UpdateIcon_ROW = 5;const int UpdateIcon_COLUMN = 6;USING_NS_CC;enum UpgradeSceneDrawingOrder : unsigned int {    UpgradeSceneDrawingOrderBackground = 0,    UpgradeSceneDrawingOrderFrame,    UpgradeSceneDrawingOrderIcon};class UpgradeScene :public Layer{public:		static Scene* createScene();	virtual bool init();	CREATE_FUNC(UpgradeScene);    private:    /*所有星星*/    int _starAllNumber;    /*剩余星星*/    int _starLeftNumber;        /*剩余星星数量*/    Label* _remainStarLabel;    /*升级所需星星*/    Label* _updateNeedStarLabel;    //显示选中icon名称    Label* _nameLabel;    //显示icon介绍信息    Label* _introductionLabel;        /*显示点击的图标*/    Sprite* _displayIcon;    /*显示购买按钮*/    MenuItemSprite* _buyMenuItem;        /*上一次点击的图标*/    UpgradeIcon* _lastSelectedIcon;//    UpgradeIcon* _currentSelectedIcon;        void addBackgroundImage();    void addMenuItems();    void addLeftFrame();    void addRightFrame();    	/*初始化状态*/	void initIconSavedStatus();	//定义原始状态	void initIconsStatus();	/*储存现有状态*/	UpgradeIconsStatus _iconStatus[UpdateIcon_ROW][UpdateIcon_COLUMN];	/*储存原始状态*/	UpgradeIconsStatus _iconInitStatus[UpdateIcon_ROW][UpdateIcon_COLUMN];	/*储存动态可升级图标的精灵矩阵*/	UpgradeIcon* _icons[UpdateIcon_ROW][UpdateIcon_COLUMN];    //    std:vector <std::string > _onIconImageName1;    //    std::string _onIconImageName[UpdateIcon_ROW * UpdateIcon_COLUMN];//    std::string _offIconImageName[UpdateIcon_ROW * UpdateIcon_COLUMN];//    std::string _title[UpdateIcon_ROW * UpdateIcon_COLUMN];//    std::string _explain[UpdateIcon_ROW * UpdateIcon_COLUMN];    //    void readParameterFromFile();	void setBuyMenuItemShow(UpgradeIcon* iconSelect);	bool onIconTouchBegan(Touch * touch, Event* event);    void onIconTouchEnded(Touch * touch, Event* event) {};        void onMenuBuyCallback(Ref* pSender);    void onMenuResetCallback(Ref* pSender);    void onMenuConfirmCallback(Ref* pSender);        void onKeyReleased(EventKeyboard::KeyCode keycode, Event* event);    };#endif