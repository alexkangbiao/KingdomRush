#include "TransitionGame.h"#include "SimpleAudioEngine.h" using namespace CocosDenshion;USING_NS_CC;TransitionGame::TransitionGame() {}TransitionGame::~TransitionGame() {}TransitionGame * TransitionGame::create(float t, Scene *scene)//, TransitionSceneTag sceneTag){	TransitionGame * pScene = new TransitionGame();    if (pScene && pScene->initWithDuration(t, scene)) {//        pScene->_sceneTag = sceneTag;        		pScene->autorelease();        return pScene;     }     CC_SAFE_DELETE(pScene);     return NULL;}TransitionGame * TransitionGame::createWithRenderTexture(float t, Scene *scene, RenderTexture *sqr){	TransitionGame * pScene = new TransitionGame();    if (pScene && pScene->initWithDuration(t, scene))    {		pScene->initRenderTexture(sqr);		pScene->autorelease();        return pScene;     }     CC_SAFE_DELETE(pScene);     return NULL;}#pragma mark - on private functionvoid TransitionGame::initRenderTexture(RenderTexture *sqr) {	auto _spriteRender = Sprite::createWithTexture(sqr->getSprite()->getTexture());    _spriteRender->setPosition(Point(Director::getInstance()->getVisibleSize().width / 2,                                     Director::getInstance()->getVisibleSize().height / 2));	this->addChild(_spriteRender, TransitionGameDrawingOrderBackground);}void TransitionGame::onEnter(){	//要切入的场景    switch (_sceneTag) {        case TransitionSceneTagGameView:                        break;        case TransitionSceneTagChooseDifficult:                        break;        case TransitionSceneTagGame:                        break;    }	this->_inScene->setVisible(false);	TransitionScene::onEnter();        this->initOpenAndCloseDoorEffect();}void TransitionGame::initOpenAndCloseDoorEffect() {    Size visibleSize = Director::getInstance()->getVisibleSize();    Point leftStartPoint, leftEndPoint, rightStartPoint, rightEndPoint;        leftStartPoint.setPoint(0, visibleSize.height / 2.0f);    leftEndPoint.setPoint(visibleSize.width / 2.0f, visibleSize.height / 2.0f);        rightStartPoint.setPoint(visibleSize.width, visibleSize.height / 2.0f);    rightEndPoint.setPoint(visibleSize.width / 2.0f, visibleSize.height / 2.0f);        auto leftDoor = Sprite::createWithSpriteFrameName("transitionDoor.png");//    leftDoor->setScaleX(visibleSize.width/960);    leftDoor->setAnchorPoint(Point(1, 0.5));        auto rightDoor = Sprite::createWithSpriteFrameName("transitionDoor.png");//    rightDoor->setScaleX(visibleSize.width/960);    rightDoor->setAnchorPoint(Point(0, 0.5));        auto leftLoading = Sprite::createWithSpriteFrameName("transitionLoading_left.png");    leftLoading->setAnchorPoint(Point(1, 0.5));    leftLoading->setPosition(Point(leftDoor->getContentSize().width,                                   leftDoor->getContentSize().height / 2));        auto rightLoading = Sprite::createWithSpriteFrameName("transitionLoading_right.png");    rightLoading->setAnchorPoint(Point(0,0.5));    rightLoading->setPosition(Point(0,                                    rightDoor->getContentSize().height/2));        this->addChild(leftDoor, TransitionGameDrawingOrderEffect);    this->addChild(rightDoor, TransitionGameDrawingOrderEffect);        rightDoor->setFlippedX(true);    leftDoor->setPosition(leftStartPoint);    rightDoor->setPosition(rightStartPoint);        leftDoor->addChild(leftLoading);    rightDoor->addChild(rightLoading);        //关门动作    auto closeLeftAction  = MoveTo::create(_duration / 3, leftEndPoint);    auto closeRightAction = MoveTo::create(_duration / 3, rightEndPoint);    //开门动作    auto openLeftAction  = MoveTo::create(_duration / 3, leftStartPoint);    auto openRightAction = MoveTo::create(_duration / 3, rightStartPoint);        if (UserDefault::getInstance()->getIntegerForKey("backeffect", 1) == 1) {        SimpleAudioEngine::getInstance()->playEffect("sound/GUITransitionOpen.wav");    }        leftDoor->runAction(Sequence::create(closeLeftAction,                                         CallFuncN::create(CC_CALLBACK_0(TransitionGame::OnCloseDoorActionFinish, this)),                                         DelayTime::create(1.0f),                                         openLeftAction,                                         CallFuncN::create(CC_CALLBACK_0(TransitionGame::OnOpenDoorActionFinish, this)),                                         NULL));        rightDoor->runAction(Sequence::create(closeRightAction,                                          DelayTime::create(1.0f),                                          openRightAction,                                          NULL));}//void TransitionGame::initOpenAndCloseDoorEffect() {//    Size visibleSize = Director::getInstance()->getVisibleSize();//    //    //    _leftStartPoint.setPoint(0, visibleSize.height / 2.0f);//    _leftEndPoint.setPoint(visibleSize.width / 2.0f,//                           visibleSize.height / 2.0f);//    //    _rightStartPoint.setPoint(visibleSize.width,//                              visibleSize.height / 2.0f);//    _rightEndPoint.setPoint(visibleSize.width / 2.0f,//                            visibleSize.height / 2.0f);//    //    _leftDoor = Sprite::createWithSpriteFrameName("transitionDoor.png");//    _leftDoor->setAnchorPoint(Vec2::ANCHOR_MIDDLE_RIGHT);//    //    _rightDoor = Sprite::createWithSpriteFrameName("transitionDoor.png");//    _rightDoor->setAnchorPoint(Vec2::ANCHOR_MIDDLE_LEFT);//    //    auto leftLoading = Sprite::createWithSpriteFrameName("transitionLoading_left.png");//    leftLoading->setAnchorPoint(Vec2::ANCHOR_MIDDLE_RIGHT);//    leftLoading->setPosition(Point(_leftDoor->getContentSize().width,//                                   _leftDoor->getContentSize().height / 2));//    //    auto rightLoading = Sprite::createWithSpriteFrameName("transitionLoading_right.png");//    rightLoading->setAnchorPoint(Vec2::ANCHOR_MIDDLE_LEFT);//    rightLoading->setPosition(Point(0,//                                    _rightDoor->getContentSize().height/2));//    //    this->addChild(_leftDoor, TransitionGameDrawingOrderEffect);//    this->addChild(_rightDoor, TransitionGameDrawingOrderEffect);//    //    _rightDoor->setFlippedX(true);//    _leftDoor->setPosition(_leftStartPoint);//    _rightDoor->setPosition(_rightStartPoint);//    //    _leftDoor->addChild(leftLoading);//    _rightDoor->addChild(rightLoading);//}////void TransitionGame::playOpenDoorAction() {//    if (UserDefault::getInstance()->getIntegerForKey("backeffect", 1) == 1) {//        SimpleAudioEngine::getInstance()->playEffect("sound/GUITransitionOpen.wav");//    }//    //开门动作//    auto openLeftAction  = MoveTo::create(_duration / 3, _leftStartPoint);//    auto openRightAction = MoveTo::create(_duration / 3, _rightStartPoint);//    //    _leftDoor->runAction(Sequence::create(openLeftAction,//                                          CallFuncN::create(CC_CALLBACK_0(TransitionGame::OnOpenDoorActionFinish, this)),//                                          NULL));//    //    _rightDoor->runAction(Sequence::create(openRightAction,//                                           NULL));//    //}//void TransitionGame::playCloseDoorAction() {//    //关门动作//    auto closeLeftAction  = MoveTo::create(_duration / 3, _leftEndPoint);//    auto closeRightAction = MoveTo::create(_duration / 3, _rightEndPoint);//    //    //    _leftDoor->runAction(Sequence::create(closeLeftAction,//                                          CallFuncN::create(CC_CALLBACK_0(TransitionGame::OnCloseDoorActionFinish, this)),//                                          NULL));//    //    _rightDoor->runAction(Sequence::create(closeRightAction,//                                           NULL));//}#pragma mark - on callback functionvoid TransitionGame::OnCloseDoorActionFinish(void) {    if (UserDefault::getInstance()->getIntegerForKey("backeffect",1) == 1) {        SimpleAudioEngine::getInstance()->playEffect("sound/GUITransitionClose.wav");    }    _inScene->setVisible(true);    _outScene->setVisible(false);}void TransitionGame::OnOpenDoorActionFinish(void) {	//所以的活动完成后，要执行场行的Finish	TransitionScene::finish();}