#include "BaseMageTower.h"#include "UpdatePanelLayer.h"#include "BaseMap.h"#include "GameManager.h"#include "math.h"#include "MageBolt.h"#include "TowerUpdateManager.h"bool BaseMageTower::init() {    if (!BaseTower::init()) {        return false;    }        this->addTerrainSprite("terrain_mage_0004.png");        _currentBullet = nullptr;    return true;}void BaseMageTower::initMageTower(const int level) {	if (level < 4) {		towerBase = Sprite::createWithSpriteFrameName(StringUtils::format("mage_lvl%d_0001.png", level).c_str());		_shooter   = Sprite::createWithSpriteFrameName(StringUtils::format("mage_shooter_0001.png").c_str());	} else if (4 == level) {		towerBase = Sprite::createWithSpriteFrameName("ArchMageTower.png" );		_shooter   = Sprite::createWithSpriteFrameName("ArchMageGuy_0001.png");	} else if (5 == level) {		towerBase = Sprite::createWithSpriteFrameName("NecromancerTower.png");		_shooter   = Sprite::createWithSpriteFrameName("NecomancerMage_0001.png");	}    _shooter->setPosition(Point(towerBase->getContentSize().width / 2,                                towerBase->getContentSize().height / 2                                + _shooter->getContentSize().height ));        _bulletInitPoint = _shooter->getPosition();    	towerBase->setPosition(Point(0, -10));	towerBase->addChild(_shooter);	this->addChild(towerBase, BaseTowerDrawingOrderTowerBase);}void BaseMageTower::prepareAnimation() {    _shootUpAnimation   = AnimationCache::getInstance()->getAnimation("mage_shoot_up");    _shootDownAnimation = AnimationCache::getInstance()->getAnimation("mage_shoot_down");    _shiningAnimation   = AnimationCache::getInstance()->getAnimation(                                        StringUtils::format("level%d_mage_shine", _level).c_str());}void BaseMageTower::playShootVoice() {    SoundManager::playMageTowerShot();}void BaseMageTower::playAdditionalAnimate() {    towerBase->runAction(Animate::create(_shiningAnimation));}void BaseMageTower::shoot(float dt){//	this->checkNearestMonster();    _nearestMonster = this->getCanAttackMonster();    	if (_nearestMonster != NULL && _nearestMonster->getCurrentHP() > 0)  {        		_currentBullet = this->getMageTowerBullet();		Point shootVector = _nearestMonster->getMonsterPosition() - this->getParent()->getPosition();				auto position = _currentBullet->getPosition() - shootVector;		auto rotation = atan2(position.y, position.x);		float angleDegrees = CC_RADIANS_TO_DEGREES(rotation);		_currentBullet->setRotation(180.0f - angleDegrees);		if (shootVector.y > 0) {			_shooter->runAction(Animate::create(_shootUpAnimation));		} else {			_shooter->runAction(Animate::create(_shootDownAnimation));		}                //play shoot voice        this->playShootVoice();                //play additional animation        this->playAdditionalAnimate();                float duringTime = this->caculateSpendTime(_nearestMonster->getMonsterPosition(), _currentBullet->getBulletSpeed());		auto action = Spawn::create(MoveTo::create(duringTime, shootVector),                                    NULL);		_currentBullet->setBulletAction(action);		_currentBullet->shoot();		_currentBullet = nullptr;	}}Bullet* BaseMageTower::getMageTowerBullet() {    //    log("Artillery bullet vector number is : %ld", _bulletVector.size());        //循环使用已经生成的子弹，否则就转到生成新子弹    for (int i = 0; i < _bulletVector.size(); i++) {        if (!_bulletVector.at(i)->getParent()) {            _bulletVector.at(i)->restoreBullet();            _bulletVector.at(i)->setPosition(_bulletInitPoint);            this->getParent()->addChild(_bulletVector.at(i));            return _bulletVector.at(i);        }    }        auto bullet = MageBolt::createMageBoltWithLevel(_level);    bullet->setPosition(_bulletInitPoint);//    bullet->refreshTypeAndLevel(bullet->getBulletType(), this->getLevel());    this->getParent()->addChild(bullet);    _bulletVector.pushBack(bullet);    return bullet;}void BaseMageTower::refreshBulletVector() {    _bulletVector.clear();}void BaseMageTower::addAdditionalParameterConfig() {    this->setUpdateMoney(this->getUpdateMoney() * (1 + TowerUpdateManager::getInstance()->getTowerUpgradeValue(UpgradeTowerTagMage02_ReduceBuildMoney)));    this->setAttackScope(this->getAttackScope() * (1 + TowerUpdateManager::getInstance()->getTowerUpgradeValue(UpgradeTowerTagMage03_AttackScope)));    this->setShootPeriod(this->getShootPeriod() * (1 + TowerUpdateManager::getInstance()->getTowerUpgradeValue(UpgradeTowerTagMage04_ShootPeriod)));}