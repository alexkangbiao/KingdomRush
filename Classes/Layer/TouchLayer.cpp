#include "TouchLayer.h"#include "GameManager.h"#include "RallyCircle.h"#include "BaseMap.h"#include "RallyCircle.h"#include "ReinforceSoldier1.h"#include "ReinforceSoldier2.h"#include "Freeze.h"#include "Dynamite.h"#include "FireBall.h"#include "PlayerStateMenu.h"#include "Utility.h"#include "TowerUpdateManager.h"bool TouchLayer::init() {    if (! Layer::init()) {        return false;    }        this->initAnimation();    _winSize = Director::getInstance()->getWinSize();        _soldierListener  = nullptr;    _freezeListener   = nullptr;    _dynamiteListener = nullptr;    _fireBallListener = nullptr;        _isFlag = false;    setTouchShield();        _isMoved = false;    return true;}void TouchLayer::initAnimation() {    SpriteFrame* spriteFrame = nullptr;    Vector<SpriteFrame*> spriteFrameVector;    for (int length = 1; length <= 30; length++) {        spriteFrame = SpriteFrameCache::getInstance()->getSpriteFrameByName(                             Utility::string_format("rally_feedback_00%2d.png", length));        if(spriteFrame != nullptr)            spriteFrameVector.pushBack(spriteFrame);    }    AnimationCache::getInstance()->addAnimation(Animation::createWithSpriteFrames(spriteFrameVector, 0.04f), "rally_flag");}void TouchLayer::setTouchShield() {    _touchListener = EventListenerTouchOneByOne::create();    _touchListener->onTouchBegan = CC_CALLBACK_2(TouchLayer::onTouchBegan, this);    _touchListener->onTouchEnded = CC_CALLBACK_2(TouchLayer::onTouchEnded, this);    _touchListener->onTouchMoved = CC_CALLBACK_2(TouchLayer::onTouchMoved, this);    _touchListener->setSwallowTouches(true);    //	_eventDispatcher->addEventListenerWithFixedPriority(touchlistener, -1);        _eventDispatcher->addEventListenerWithSceneGraphPriority(_touchListener, this);    _eventDispatcher->setPriority(_touchListener, TouchLayerPriorityOrderTouchListener);}void TouchLayer::removeTouchShield() {    if(_touchListener != nullptr)        _eventDispatcher->removeEventListener(_touchListener);}void TouchLayer::removeAllListener() {    this->removeFireBallTouchShield();    this->removeFreezeTouchShield();    this->removeSoldierTouchShield();    this->removeRallyFlagTouchShield();    this->removeDynamiteTouchShield();}#pragma mark - for touch listener callback function//添加这个监听器的原因是判断鼠标移动的范围，或者判断是否为点，如果点而超过某个距离的话就是为移动会将下面的监听吞咽下去，而不做反馈bool TouchLayer::onTouchBegan(Touch* touch, Event* event) {    _touchListener->setSwallowTouches(false);    return true;}void TouchLayer::onTouchEnded(Touch* touch, Event* event) {    _touchListener->setSwallowTouches(_isMoved);    if (!_isMoved){        static_cast<BaseMap*>(this->getParent())->playerStateMenu->hideTowerInfo();        static_cast<BaseMap*>(this->getParent())->playerStateMenu->hideMonsterInfo();    }    _isMoved = false;}void TouchLayer::onTouchMoved(Touch* touch, Event* event) {    // 计算滑动过程中std::abs滑动增量    //手指移动修正，因为手指触摸不像鼠标触摸那么固定    if(std::abs(touch->getDelta().x) > 5 || std::abs(touch->getDelta().y) > 5){        _isMoved = true;    }    // 得到当前bgSprite的位置    auto currentPos = this->getParent()->getPosition();    // 得到滑动后bgSprite应该所在的位置    auto pos = currentPos + touch->getDelta();        //边界控制，约束pos的位置    pos.x = MIN(pos.x, 0);    pos.x = MAX(pos.x, -1200 + _winSize.width);    pos.y = MIN(pos.y, 0);    pos.y = MAX(pos.y, -1000 + _winSize.height);    // 重设bgSprite位置        this->getParent()->setPosition(pos);}#pragma mark -陨石技能触摸void TouchLayer::setFireBallTouchShield() {    //调用此方法创建陨石技能触摸时间    _fireBallListener = EventListenerTouchOneByOne::create();    _fireBallListener->onTouchBegan = CC_CALLBACK_2(TouchLayer::onFireBallTouchBegan, this);    _fireBallListener->onTouchEnded = CC_CALLBACK_2(TouchLayer::onFireBallTouchEnded, this);    _fireBallListener->setSwallowTouches(true);    //设置比移动触摸事件高即可    //	_eventDispatcher->addEventListenerWithFixedPriority(FiereBalllistener, 1);    _eventDispatcher->addEventListenerWithSceneGraphPriority(_fireBallListener, this);    _eventDispatcher->setPriority(_fireBallListener, TouchLayerPriorityOrderListener);}void TouchLayer::removeFireBallTouchShield() {    //使用技能完毕去除此监听时间    if (_fireBallListener != nullptr)        _eventDispatcher->removeEventListener(_fireBallListener);}bool TouchLayer::onFireBallTouchBegan(Touch* touch, Event* event) {    //直接返回TRUE，拦截其他时间    return true;}void TouchLayer::onFireBallTouchEnded(Touch* touch, Event* event) {    //播放音效    SoundManager::playFireballUnleash();        Point point = static_cast<TouchLayer*>(event->getCurrentTarget())->convertTouchToNodeSpace(touch);    //创建3个陨石    auto fireBall1 = FireBall::create();    this->addChild(fireBall1);    fireBall1->shoot(point + Point(-fireBall1->getBulletScope(),                                   fireBall1->FIREBALL_FALLDOWN_START_HEIGHT - fireBall1->getBulletScope()));        auto fireBall2 = FireBall::create();    this->addChild(fireBall2);    fireBall2->shoot(point + Point(fireBall2->getBulletScope(),                                   fireBall2->FIREBALL_FALLDOWN_START_HEIGHT - fireBall2->getBulletScope()));            if (TowerUpdateManager::getInstance()->hasTowerUpgradeParameter(UpgradeTowerTagFireball02_IncreaseNumber)) {        auto fireBall3 = FireBall::create();        this->addChild(fireBall3);        fireBall3->shoot(point + Point(-fireBall3->getBulletScope(),                                       fireBall3->FIREBALL_FALLDOWN_START_HEIGHT + fireBall3->getBulletScope()));                auto fireBall4 = FireBall::create();        this->addChild(fireBall4);        fireBall4->shoot(point + Point(fireBall4->getBulletScope(),                                       fireBall4->FIREBALL_FALLDOWN_START_HEIGHT + fireBall4->getBulletScope()));    } else {        auto fireBall3 = FireBall::create();        this->addChild(fireBall3);        fireBall3->shoot(point + Point(0,                                       fireBall3->FIREBALL_FALLDOWN_START_HEIGHT + fireBall3->getBulletScope()));    }        //陨石坠落之后获取父类的玩家状态层，调用startStone,重新开始计时并且重置ProgressTimer遮盖层    static_cast<BaseMap*>(this->getParent())->playerStateMenu->thunderStoneButton->startSkillButton();    //移除此监听事件    this->removeFireBallTouchShield();}#pragma mark - 炸药技能触摸void TouchLayer::setDynamiteTouchShield(){    _dynamiteListener = EventListenerTouchOneByOne::create();    _dynamiteListener->onTouchBegan = CC_CALLBACK_2(TouchLayer::onDynamiteTouchBegan, this);    _dynamiteListener->onTouchEnded = CC_CALLBACK_2(TouchLayer::onDynamiteTouchEnded, this);    _dynamiteListener->setSwallowTouches(true);    _eventDispatcher->addEventListenerWithSceneGraphPriority(_dynamiteListener, this);    _eventDispatcher->setPriority(_dynamiteListener, TouchLayerPriorityOrderListener);}void TouchLayer::removeDynamiteTouchShield(){    if (_dynamiteListener != NULL)        _eventDispatcher->removeEventListener(_dynamiteListener);}bool TouchLayer::onDynamiteTouchBegan(Touch* touch, Event* event) {    return true;}void TouchLayer::onDynamiteTouchEnded(Touch* touch, Event* event){    auto dynamite = Dynamite::create();    this->getParent()->addChild(dynamite);    dynamite->shoot(static_cast<TouchLayer*>(event->getCurrentTarget())->convertTouchToNodeSpace(touch));    removeDynamiteTouchShield();}#pragma mark - 冰冻技能触摸void TouchLayer::setFreezeTouchShield() {    _freezeListener = EventListenerTouchOneByOne::create();    _freezeListener->onTouchBegan = CC_CALLBACK_2(TouchLayer::onFreezeTouchBegan, this);    _freezeListener->onTouchEnded = CC_CALLBACK_2(TouchLayer::onFreezeTouchEnded, this);    _freezeListener->setSwallowTouches(true);    _eventDispatcher->addEventListenerWithSceneGraphPriority(_freezeListener, this);    _eventDispatcher->setPriority(_freezeListener, TouchLayerPriorityOrderListener);}void TouchLayer::removeFreezeTouchShield() {    if (_freezeListener != NULL)        _eventDispatcher->removeEventListener(_freezeListener);}bool TouchLayer::onFreezeTouchBegan(Touch* touch, Event* event) {    return true;}void TouchLayer::onFreezeTouchEnded(Touch* touch, Event* event) {    SoundManager::playFreeze();    auto freeze = Freeze::create();    this->getParent()->addChild(freeze);    freeze->shoot(static_cast<TouchLayer*>(event->getCurrentTarget())->convertTouchToNodeSpace(touch));    removeFreezeTouchShield();}#pragma mark - 钱标签void TouchLayer::addMoneyLabel(Point location, int money) {//    log("money label size = %ld", _moneyLabelVector.size());    Label * addMoneyLabel  = nullptr;    for (int i = 0; i < _moneyLabelVector.size(); i++) {        if (!_moneyLabelVector.at(i)->getParent()) {            addMoneyLabel =  _moneyLabelVector.at(i);            addMoneyLabel->setVisible(true);            break;        }    }    if (! addMoneyLabel) {        addMoneyLabel = Label::createWithBMFont("fonts/bmfont.fnt", StringUtils::format("+%d", money));        _moneyLabelVector.pushBack(addMoneyLabel);    } else {        addMoneyLabel->setString(StringUtils::format("+%d", money));    }    addMoneyLabel->setPosition(location);    this->addChild(addMoneyLabel);    addMoneyLabel->runAction(Sequence::create(DelayTime::create(1.0f),                                              FadeOut::create(1.0f),//                                              CallFuncN::create(CC_CALLBACK_0(Sprite::setVisible, addMoneyLabel, false)),                                              FadeIn::create(0.0f),                                              CallFuncN::create(CC_CALLBACK_0(Sprite::removeFromParent, addMoneyLabel)),                                              nullptr));}#pragma mark - 集合技能触摸void TouchLayer::setRallyFlagTouchShield() {    auto rallyCircle = RallyCircle::create();    rallyCircle->setPosition(_tower->getParent()->getPosition());    rallyCircle->setTag(TouchLayerTagRallyCircle);    this->addChild(rallyCircle);        _rallyFlaglistener = EventListenerTouchOneByOne::create();    _rallyFlaglistener->onTouchBegan = CC_CALLBACK_2(TouchLayer::onRallyFlagTouchBegan, this);    _rallyFlaglistener->onTouchEnded = CC_CALLBACK_2(TouchLayer::onRallyFlagTouchEnded, this);    _rallyFlaglistener->setSwallowTouches(true);    _eventDispatcher->addEventListenerWithSceneGraphPriority(_rallyFlaglistener, this);    _eventDispatcher->setPriority(_rallyFlaglistener, TouchLayerPriorityOrderListener);}void TouchLayer::removeRallyFlagTouchShield() {    if (this->getChildByTag(TouchLayerTagRallyCircle)) {        this->removeChildByTag(TouchLayerTagRallyCircle);    }        if(_rallyFlaglistener != NULL)        _eventDispatcher->removeEventListener(_rallyFlaglistener);}bool TouchLayer::onRallyFlagTouchBegan(Touch* touch, Event* event) {    auto target = static_cast<TouchLayer*>(event->getCurrentTarget());    Point locationInNode = target->convertTouchToNodeSpace(touch);    float rallyScope = RALLY_SCOPE * (1 + TowerUpdateManager::getInstance()->getTowerUpgradeValue(UpgradeTowerTagSoldier02_RallyScope));    if (locationInNode.distance(_tower->getTowerPosition()) < rallyScope       && locationInNode.distance(_tower->getTowerPosition()) > rallyScope / 2.0f) {        this->addRallyFlag(locationInNode);        _tower->setRallyPoint(locationInNode);        SoundManager::playRallyPointPlaced();        _isFlag = true;    } else {        this->addWrongPlace(static_cast<TouchLayer*>(event->getCurrentTarget())->convertTouchToNodeSpace(touch));    }    return true;}void TouchLayer::onRallyFlagTouchEnded(Touch* touch, Event* event) {    if (_isFlag) {        this->removeRallyFlagTouchShield();        this->_isFlag = false;    }}void TouchLayer::addRallyFlag(Point location) {    auto flag = Sprite::createWithSpriteFrameName("rally_feedback_0015.png");    flag->setPosition(location);    this->addChild(flag);    flag->runAction(Sequence::create(Animate::create(AnimationCache::getInstance()->getAnimation("rally_flag")),                                     CallFuncN::create(CC_CALLBACK_0(Sprite::removeFromParent, flag)),                                     NULL));}void TouchLayer::addWrongPlace(Point location) {    auto wrong = Sprite::createWithSpriteFrameName("error_feedback_0001.png");    wrong->setPosition(location);    wrong->runAction(Sequence::create(FadeOut::create(1.0f),                                      CallFuncN::create(CC_CALLBACK_0(Sprite::removeFromParent, wrong)),                                      NULL));    this->addChild(wrong);}#pragma mark - for soldier touch listener 伞降void TouchLayer::setSoldierTouchShield() {    _soldierListener = EventListenerTouchOneByOne::create();    _soldierListener->onTouchBegan = CC_CALLBACK_2(TouchLayer::onSoldierTouchBegan, this);    _soldierListener->onTouchEnded = CC_CALLBACK_2(TouchLayer::onSoldierTouchEnded, this);    _soldierListener->setSwallowTouches(true);    _eventDispatcher->addEventListenerWithSceneGraphPriority(_soldierListener, this);}void TouchLayer::removeSoldierTouchShield() {    _eventDispatcher->removeEventListener(_soldierListener);}bool TouchLayer::onSoldierTouchBegan(Touch* touch, Event* event) {    return true;}void TouchLayer::onSoldierTouchEnded(Touch* touch, Event* event) {    SoundManager::playReinforcement();    auto target = static_cast<TouchLayer*>(event->getCurrentTarget());    Point locationInNode = target->convertTouchToNodeSpace(touch);        auto feedBack = Sprite::createWithSpriteFrameName("confirm_feedback_layer2_0001.png");    feedBack->setPosition(locationInNode);    this->addChild(feedBack);    feedBack->runAction(Sequence::create(FadeOut::create(1.0f),                                         CallFuncN::create(CC_CALLBACK_0(Sprite::removeFromParent, feedBack)),                                         NULL));        auto reinforceSoldier1 = ReinforceSoldier1::createReinforceSoldier(                                                Point(locationInNode.x + 15,                                                      locationInNode.y + 20));    this->getParent()->addChild(reinforceSoldier1);        auto reinforceSoldier2 = ReinforceSoldier2::createReinforceSoldier(                                                Point(locationInNode.x - 15,                                                      locationInNode.y + 20));    this->getParent()->addChild(reinforceSoldier2);        if (TowerUpdateManager::getInstance()->hasTowerUpgradeParameter(UpgradeTowerTagReinforce05_IncreaseNumber)) {        auto reinforceSoldier3 = ReinforceSoldier1::createReinforceSoldier(                                                                           Point(locationInNode.x + 15,                                                                                 locationInNode.y - 20));        this->getParent()->addChild(reinforceSoldier3);                auto reinforceSoldier4 = ReinforceSoldier2::createReinforceSoldier(                                                                           Point(locationInNode.x - 15,                                                                                 locationInNode.y - 20));        this->getParent()->addChild(reinforceSoldier4);    }            static_cast<BaseMap*>(this->getParent())->playerStateMenu->paratrooperButton->startSkillButton();    this->removeSoldierTouchShield();}