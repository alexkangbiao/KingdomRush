#include "SimpleArtilleryTowerlvl1.h"#include "SimpleArtilleryTowerlvl2.h"#include "UpdatePanelLayer.h"#include "GameManager.h"#include "BaseMap.h"bool SimpleArtilleryTowerlvl1::init() {	if (!BaseArtilleryTower::init()) {		return false;	}    this->setTowerType(TOWER_TYPE_ARTILLERY_1);//	this->setLevel(1);//	this->setScope(160.0f);//	this->setUpdateMoney(150);//	this->setBuildMoney(120);//    this->setShootPeriod(3.0f);        //程序的开头，执行建造动画    this->playBuildingAnimation();   	return true;}#pragma mark - for animation functionvoid SimpleArtilleryTowerlvl1::initTownForReady(float dt) {	SoundManager::playArtilleryReady();	this->initArtilleryTower(this->getLevel());	this->schedule(schedule_selector(SimpleArtilleryTowerlvl1::shoot), this->getShootPeriod());}#pragma mark - for update functionvoid SimpleArtilleryTowerlvl1::updateTower() {	auto simpleArtilleryTowerlvl2 = SimpleArtilleryTowerlvl2::create();	simpleArtilleryTowerlvl2->setTerrain(_terrain);	simpleArtilleryTowerlvl2->setTag(_terrain->getTag());	simpleArtilleryTowerlvl2->setPosition(Point(0, 20));	_terrain->addChild(simpleArtilleryTowerlvl2);        //删除在缓冲子弹队列中的内容    this->refreshBulletVector();	this->removeTower();}void SimpleArtilleryTowerlvl1::showUpdateMenu(){	auto updatePanelLayer = UpdatePanelLayer::create();	updatePanelLayer->setTag(_terrain->getTag() + UPDATE_MENU_TAG);	updatePanelLayer->setTower(this);	updatePanelLayer->setPosition(this->getParent()->getPosition());	static_cast<BaseMap*>(this->getParent()->getParent())->mTouchLayer->addChild(updatePanelLayer);	if (GameManager::getInstance()->CURRENT_LEVEL <= this->getUpdate1StartLevel()) {        updatePanelLayer->setCanUpdate(false);	}	updatePanelLayer->playShowAnimation();	_isUpdateMenuShown = true;}