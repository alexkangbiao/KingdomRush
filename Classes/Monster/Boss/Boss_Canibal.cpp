#include "Boss_Canibal.h"#include "GameManager.h"#include "BaseMap.h"//#include "CanibalOffspring.h"#include "SoundManager.h"#include "Monster.h"Boss_Canibal* Boss_Canibal::createMonster(std::vector<Point> points,                                          std::vector<std::vector<std::vector<Point>>> sonpaths){    auto monster = new Boss_Canibal();    if (monster && monster->init(MOSTER_TYPE_BOSS_CANIBAL)) {        monster->setPointsVector(points);		monster->_sonPathVector = sonpaths;        monster->runToNextPoint();                monster->autorelease();        return monster;    }    CC_SAFE_DELETE(monster);    return NULL;}void Boss_Canibal::addAdditionalSprite() {    this->schedule(schedule_selector(Boss_Canibal::beforeSkill), 50.0f, 2, 20.0f);        _skillTag = 0;}void Boss_Canibal::beforeSkill(float dt){	SoundManager::playChestdrum();	if (_skillTag == 0) {		_pointCounter += 60;		_location     = this->getPointsVector().at(_pointCounter);	}	if (_skillTag == 1) {		this->setPointsVector(_sonPathVector.at(0).at(1));		_pointCounter = 100;		_location = this->getPointsVector().at(_pointCounter);	}    	this->setIsAttacking(true);	this->setEnableAttackBySoldier(false);	this->setEnableAttackByTower(false);	this->stopWalking();    	_baseSprite->runAction(Sequence::create(                    Animate::create(AnimationCache::getInstance()->getAnimation(this->getMonsterName() + "skill_before")),                    Animate::create(AnimationCache::getInstance()->getAnimation(this->getMonsterName() + "jump")),                    MoveTo::create(0.5f, Point(590,510)),                    CallFuncN::create(CC_CALLBACK_0(Boss_Canibal::skill, this)),                    NULL));	_skillTag ++;}void Boss_Canibal::changePositionLeft() {	SoundManager::playChimps_1();	_baseSprite->setPosition(Point(590, 510));}	void Boss_Canibal::changePositionRight() {	SoundManager::playChimps_2();	_baseSprite->setPosition(Point(680, 510));}void Boss_Canibal::skill() {	this->setEnableAttackByTower(false);	this->setEnableAttackBySoldier(false);    	_baseSprite->runAction(Sequence::create(		CallFuncN::create(CC_CALLBACK_0(Boss_Canibal::setFlippedX, this->_baseSprite, false)),		Animate::create((AnimationCache::getInstance()->getAnimation(this->getMonsterName() + "skill"))),		CallFuncN::create(CC_CALLBACK_0(Boss_Canibal::addChildrenMonsters, this)),		CallFuncN::create(CC_CALLBACK_0(Boss_Canibal::changePositionRight, this)),		CallFuncN::create(CC_CALLBACK_0(Boss_Canibal::setFlippedX, this->_baseSprite,true)),		Animate::create((AnimationCache::getInstance()->getAnimation(this->getMonsterName() + "skill"))),		CallFuncN::create(CC_CALLBACK_0(Boss_Canibal::addChildrenMonsters, this)),				CallFuncN::create(CC_CALLBACK_0(Boss_Canibal::setFlippedX, this->_baseSprite,false)),		CallFuncN::create(CC_CALLBACK_0(Boss_Canibal::changePositionLeft, this)),		Animate::create((AnimationCache::getInstance()->getAnimation(this->getMonsterName()+"skill"))),		CallFuncN::create(CC_CALLBACK_0(Boss_Canibal::addChildrenMonsters, this)),		CallFuncN::create(CC_CALLBACK_0(Boss_Canibal::changePositionRight, this)),		CallFuncN::create(CC_CALLBACK_0(Boss_Canibal::setFlippedX, this->_baseSprite,true)),		Animate::create((AnimationCache::getInstance()->getAnimation(this->getMonsterName()+"skill"))),		CallFuncN::create(CC_CALLBACK_0(Boss_Canibal::addChildrenMonsters, this)),		CallFuncN::create(CC_CALLBACK_0(Boss_Canibal::changePositionLeft, this)),		CallFuncN::create(CC_CALLBACK_0(Boss_Canibal::setFlippedX, this->_baseSprite,false)),		CallFuncN::create(CC_CALLBACK_0(Boss_Canibal::afterSkill, this)),		NULL));}void Boss_Canibal::afterSkill(){	_tempNextPoint = this->getPointsVector().at(_pointCounter+1);	_baseSprite->runAction(Sequence::create(		Animate::create((AnimationCache::getInstance()->getAnimation(this->getMonsterName() + "skill_after"))),		MoveTo::create(0.5f, _location),		CallFuncN::create(CC_CALLBACK_0(Boss_Canibal::restartWalking, this)),		CallFuncN::create(CC_CALLBACK_0(Boss_Canibal::setEnableAttackBySoldier, this, true)),		CallFuncN::create(CC_CALLBACK_0(Boss_Canibal::setEnableAttackByTower, this, true)),		CallFuncN::create(CC_CALLBACK_0(Boss_Canibal::setIsAttacking, this, false)),		NULL));}void Boss_Canibal::addChildrenMonsters(){	for (unsigned int i = 0; i < _sonPathVector.size(); i++) {		for (unsigned int j = 1; j < _sonPathVector.at(i).size(); j++){			std::vector<Point> points = _sonPathVector.at(i).at(j);			auto childrenMonster = Monster::createMonster(MOSTER_TYPE_CANIBAL_OFFSPRING, points, _pointCounter);			this->getParent()->addChild(childrenMonster);			GameManager::getInstance()->monsterVector.pushBack(childrenMonster);		}	}}