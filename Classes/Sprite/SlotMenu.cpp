#include "SlotMenu.h"#include "GameView.h"#include "TransitionGame.h"#include "SimpleAudioEngine.h"#include "CommonDefine.h"#include "LanguageManager.h"#include "Utility.h"#include "UserDefaultManager.hpp"#include "GameManager.h"using namespace CocosDenshion;SlotMenu::~SlotMenu(){}SlotMenu::SlotMenu(){}SlotMenu* SlotMenu::createMenu(int number) {    auto slotMenu = new SlotMenu();        if (slotMenu && slotMenu->initWithNumber(number)) {        slotMenu->autorelease();        return slotMenu;    }    CC_SAFE_DELETE(slotMenu);    return NULL;}bool SlotMenu::initWithNumber(int number) {	if (!Sprite::init()) {		return false;	}        this->setNumber(number);    this->createBackground();    this->createConfirmInterface();    	if ( UserDefaultManager::getInstance()->getIntegerForKey(Utility::string_format("Slot%d", this->getNumber())) == 0) {		this->createNewGameInterface();	} else {        this->createSaveSlotInterface();	}    	return true;}Size SlotMenu::getSlotMenuSize() {    return this->_background->getContentSize();}#pragma mark for on callback functionbool SlotMenu::onTouchBackgroundBegan(Touch *touch, Event *event) {    auto target = static_cast<Sprite*>(event->getCurrentTarget());        Point locationInNode = target->convertTouchToNodeSpace(touch);        Size size = target->getContentSize();    Rect rect = Rect(0, 0, size.width, size.height);        if (rect.containsPoint(locationInNode) && !_background->getChildByTag(SlotMenuTagConfirmInterfaceNode)->isVisible())    {        target->setSpriteFrame(SpriteFrameCache::getInstance()->getSpriteFrameByName("mainmenu_saveslot_0002.png"));        return true;      }    return false;}void SlotMenu::onTouchBackgroundEnded(Touch *touch, Event *event) {    GameManager::getInstance()->setSlotNumber(getNumber());    SimpleAudioEngine::getInstance()->stopBackgroundMusic();    UserDefault::getInstance()->setIntegerForKey(GameManager::getInstance()->SLOTX_ISEXIT, 1);        Director::getInstance()->replaceScene(TransitionGame::create(1.0f, GameView::createScene()));}void SlotMenu::onTouchDeleteButtonCallback(Ref* pSender){	_background->getChildByTag(SlotMenuTagNewGame)->setVisible(false);	_deleteButton->setVisible(false);	_background->getChildByTag(SlotMenuTagConfirmInterfaceNode)->setVisible(true);}void SlotMenu::onTouchCancelDeleteCallback(Ref* pSender){	_background->getChildByTag(SlotMenuTagNewGame)->setVisible(true);	_deleteButton->setVisible(true);	_background->getChildByTag(SlotMenuTagConfirmInterfaceNode)->setVisible(false);}void SlotMenu::onTouchConfirmDeleteCallback(Ref* pSender){	_background->getChildByTag(SlotMenuTagConfirmInterfaceNode)->setVisible(false);	_background->removeChildByTag(SlotMenuTagNewGame);	this->createNewGameInterface();	this->deleteRecord();}#pragma mark -- for interfacevoid SlotMenu::createBackground() {    //添加背景图片    _background = Sprite::createWithSpriteFrameName("mainmenu_saveslot_0001.png");    this->addChild(_background, 0);        _deleteButton = MenuItemSprite::create(                                          Sprite::createWithSpriteFrameName("mainmenu_saveslot_delete_0001.png"),                                          Sprite::createWithSpriteFrameName("mainmenu_saveslot_delete_0002.png"),                                          CC_CALLBACK_1(SlotMenu::onTouchDeleteButtonCallback, this)                                          );    _deleteButton->setPosition(Point(                                    _background->getContentSize().width/2 - _deleteButton->getContentSize().width/2,                                    _background->getContentSize().height/2 - _deleteButton->getContentSize().height/2));    auto menu = Menu::create(_deleteButton, NULL);    menu->setPosition(Vec2::ZERO);    this->addChild(menu);        auto backgroundListener = EventListenerTouchOneByOne::create();    backgroundListener->onTouchBegan = CC_CALLBACK_2(SlotMenu::onTouchBackgroundBegan, this);    backgroundListener->onTouchEnded = CC_CALLBACK_2(SlotMenu::onTouchBackgroundEnded, this);    backgroundListener->setSwallowTouches(true);    Director::getInstance()->getEventDispatcher()->addEventListenerWithSceneGraphPriority(backgroundListener, _background);}void SlotMenu::createConfirmInterface() {    //for delete confirm interface    _hintLabel = Label::createWithBMFont("fonts/slotfont.fnt",                                         LanguageManager::getInstance()->getStringForKey("save_menu_label_delete_slot"),                                         TextHAlignment::LEFT);    _hintLabel->setPosition(Point(_background->getContentSize().width / 2,                                  _background->getContentSize().height / 3 * 2));        MenuItemSprite * confirmDeleteItem =    MenuItemSprite::create(Sprite::createWithSpriteFrameName("mainmenu_saveslot_confirmdelete_0001.png"),                           Sprite::createWithSpriteFrameName("mainmenu_saveslot_confirmdelete_0001.png"),                           CC_CALLBACK_1(SlotMenu::onTouchConfirmDeleteCallback, this));    confirmDeleteItem->setPosition( Point(_background->getContentSize().width/4,                                          _background->getContentSize().height/3) );        MenuItemSprite* cancelDeleteItem =    MenuItemSprite::create(Sprite::createWithSpriteFrameName("mainmenu_saveslot_confirmdelete_0002.png"),                           Sprite::createWithSpriteFrameName("mainmenu_saveslot_confirmdelete_0002.png"),                           CC_CALLBACK_1(SlotMenu::onTouchCancelDeleteCallback, this));    cancelDeleteItem->setPosition( Point(_background->getContentSize().width/4*3,                                         _background->getContentSize().height/3));    auto deleteMenu = Menu::create(confirmDeleteItem, cancelDeleteItem,NULL);    deleteMenu->setPosition(Vec2::ZERO);        Node * confirmInterfaceNode = Node::create();    confirmInterfaceNode->addChild(_hintLabel);    confirmInterfaceNode->addChild(deleteMenu);    confirmInterfaceNode->setTag(SlotMenuTagConfirmInterfaceNode);    confirmInterfaceNode->setVisible(false);    _background->addChild(confirmInterfaceNode);}void SlotMenu::createSaveSlotInterface() {    auto saveSlotInterfaceNode = Node::create();    saveSlotInterfaceNode->setAnchorPoint(Vec2::ANCHOR_BOTTOM_LEFT);        auto labelSlot = Label::createWithBMFont("fonts/slotfont.fnt",                            Utility::string_format(LanguageManager::getInstance()->getStringForKey("save_menu_label_slot_number"), _number),                            TextHAlignment::LEFT                            );    labelSlot->setPosition(Point(_background->getContentSize().width / 2,                                 _background->getContentSize().height / 3 * 2));    saveSlotInterfaceNode->addChild(labelSlot);        auto starImage = Sprite::createWithSpriteFrameName("mainmenu_saveslot_icons_0001.png");    starImage->setPosition(Point(                                 _background->getContentSize().width / 4,                                 _background->getContentSize().height / 3));    saveSlotInterfaceNode->addChild(starImage);    int starCountInt = UserDefault::getInstance()->getIntegerForKey(Utility::string_format("Slot%d_Star", getNumber()).c_str(), 0);        auto slotLabel = Label::createWithBMFont("fonts/slotfont.fnt",                                             Utility::string_format("%d/%d", starCountInt,                                                                    GameManager::getInstance()->GAME_SUM_STAR_NUMBER),                                             TextHAlignment::LEFT                                             );    slotLabel->setPosition(Point(_background->getContentSize().width / 4 * 2.5,                                 _background->getContentSize().height / 3));    saveSlotInterfaceNode->addChild(slotLabel);    saveSlotInterfaceNode->setTag(SlotMenuTagNewGame);        _background->addChild(saveSlotInterfaceNode);}void SlotMenu::createNewGameInterface() {    auto labelNewGame = Label::createWithBMFont("fonts/slotfont.fnt",                                                LanguageManager::getInstance()->getStringForKey("save_menu_label_new_game"),                                                TextHAlignment::LEFT);	labelNewGame->setPosition(Point(_background->getContentSize().width / 2,                                    _background->getContentSize().height / 2));	labelNewGame->setTag(SlotMenuTagNewGame);	_background->addChild(labelNewGame);        _deleteButton->setVisible(false);}void SlotMenu::deleteRecord() {    UserDefault::getInstance()->setIntegerForKey(StringUtils::format("Slot%d",getNumber()).c_str(), 0);	for (int i = 0; i < 13; i++) {		UserDefault::getInstance()->setIntegerForKey(StringUtils::format("Slot%d_Level_%d", getNumber(),i).c_str(), 0);	}	for (int i = 0; i < 13; i++) {		UserDefault::getInstance()->setIntegerForKey(StringUtils::format("Slot%d_Level_%d_star",getNumber(),i).c_str(), 0);	}	UserDefault::getInstance()->setIntegerForKey(StringUtils::format("Slot%d_DownCount",getNumber()).c_str(), 0); 	UserDefault::getInstance()->setIntegerForKey(StringUtils::format("Slot%d_NewDown",getNumber()).c_str(), 0);	UserDefault::getInstance()->setIntegerForKey(StringUtils::format("Slot%d_StarLeft",getNumber()).c_str(), 0);	UserDefault::getInstance()->setIntegerForKey(StringUtils::format("Slot%d_Star",getNumber()).c_str(), 0);	UserDefault::getInstance()->setIntegerForKey(StringUtils::format("Slot%d_Gem",getNumber()).c_str(), 0);	for (int i = 0; i < 6; i++) {		UserDefault::getInstance()->setIntegerForKey(StringUtils::format("Slot%d_Shop_%d", getNumber(),i).c_str(), 0);	}}