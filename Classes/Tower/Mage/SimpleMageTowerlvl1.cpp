#include "SimpleMageTowerlvl1.h"#include "SimpleMageTowerlvl2.h"#include "UpdatePanelLayer.h"#include "BaseMap.h"#include "GameManager.h"#include "MageBolt.h"bool SimpleMageTowerlvl1::init(){	if(!BaseMageTower::init())	{		return false;	}	setTowerType(TOWER_TYPE_MAGE_1);//	setLevel(1);//    setScope(160);//    setUpdateMoney(160);//    setBuildMoney(100);//    this->setForce(15.0f);//    this->setShootPeriod(2.0f);        //程序的开头，执行建造动画    this->playBuildingAnimation();	return true;}#pragma mark - for init function void SimpleMageTowerlvl1::initTownForReady(float dt) {     this->initMageTower(this->getLevel());	schedule(schedule_selector(SimpleMageTowerlvl1::shoot), this->getShootPeriod());	SoundManager::playMageTowerReady();}#pragma mark - for update functionvoid SimpleMageTowerlvl1::updateTower(){	auto simpleMageTowerlvl2 = SimpleMageTowerlvl2::create();	simpleMageTowerlvl2->setTerrain(_terrain);	simpleMageTowerlvl2->setTag(_terrain->getTag());	simpleMageTowerlvl2->setPosition(Point(0,20));	_terrain->addChild(simpleMageTowerlvl2);        //删除在缓冲子弹队列中的内容    this->refreshBulletVector();	this->removeTower();}void SimpleMageTowerlvl1::showUpdateMenu(){	auto updatePanelLayer = UpdatePanelLayer::create();	updatePanelLayer->setTag(_terrain->getTag() + UPDATE_MENU_TAG);	updatePanelLayer->setTower(this);	updatePanelLayer->setPosition(this->getParent()->getPosition());	static_cast<BaseMap*>(this->getParent()->getParent())->mTouchLayer->addChild(updatePanelLayer);	if (GameManager::getInstance()->CURRENT_LEVEL <= this->getUpdate1StartLevel()) {        updatePanelLayer->setCanUpdate(false);	}	updatePanelLayer->playShowAnimation();	_isUpdateMenuShown = true;}