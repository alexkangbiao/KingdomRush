#include "Missile.h"#include "GameManager.h"bool Missile::init() {	if (! BombBulletBase::initWithTypeAndLevel(BULLET_TYPE_MISSILE, 1)) {		return false;	}//    this->setBulletType(BULLET_TYPE_MISSILE);//    //    this->addBulletSprite("mech_missile_0001.png");//    //	setMaxForce(100);	return true;}void Missile::shoot(BaseMonster* monster, Point mechaPosition){    if (monster != nullptr) {//        CC_SAFE_RETAIN(monster);        //        if (monster->getHpBar()->getPercentage() < 20.0f) {//            auto monsterVector = GameManager::getInstance()->monsterVector;//            //            for (int j = 0; j < monsterVector.size(); j++)//            {//                if (monster != nullptr//                    && monsterVector.at(j)->getHpBar()->getPercentage() > 20.0f//                    && (monster->getEnableAttackBySoldier()//                        || monster->getEnableAttackByTower())){//                        monster = monsterVector.at(j);//                        break;//                    }//            }//        }//        log("Monster Position x: %f y: %f )",//            monster->getMonsterPosition().x, monster->getMonsterPosition().y);//        log("this->getParent()->getPosition() x: %f y: %f )",//            this->getParent()->getPosition().x, this->getParent()->getPosition().y);//        log("mechaPosition x: %f y: %f )",//            mechaPosition.x, mechaPosition.y);//        log("getPosition x: %f y: %f )",//            getPosition().x, getPosition().y);        auto shootVector = monster->getMonsterPosition() - this->getParent()->getPosition() - mechaPosition;        auto pVectr = this->getPosition() - shootVector;        float angleRadians = atan(pVectr.y / pVectr.x);        float angleDegrees = CC_RADIANS_TO_DEGREES(angleRadians);        if (shootVector.x < 0) angleDegrees = 180 + angleDegrees;        _bulletSprite->setRotation(-angleDegrees);                log("_bulletSprite getPosition x: %f y: %f )",                    _bulletSprite->getPosition().x, _bulletSprite->getPosition().y);                float duringTime = this->caculateSpendTime(monster->getMonsterPosition());        _bulletSprite->runAction(Sequence::create(MoveTo::create(duringTime, Point(shootVector)),                                                  CallFuncN::create(CC_CALLBACK_0(Missile::attackMonster, this, monster)),                                                  NULL));    }}void Missile::attackMonster(BaseMonster* monster) {    if (monster != nullptr && monster->getCurrentHP() > 0) {        this->handleHP(monster);    }        this->handleFinishBullet();}void Missile::processMonsterDeath(BaseMonster * monster) {    monster->explosion();}void Missile::handleFinishBullet() {    _bulletSprite->runAction(Sequence::create(Animate::create(AnimationCache::getInstance()->getAnimation("bomb")),                                              CallFuncN::create(CC_CALLBACK_0(Missile::removeFromParent, this)),                                              NULL));}//void Missile::removeBullet(BaseMonster* monster)//{//	if (monster != nullptr && monster->getCurrentHP() > 0) {//		auto currentHp = monster->getCurrentHP();//		SoundManager::playBomb();//		currentHp =  currentHp - this->getMaxForce() + monster->getArmor();//                //		if (currentHp <= 0) {//			currentHp = 0;//		}//		monster->setCurrentHP(currentHp);////		monster->getHpBar()->setPercentage((currentHp / monster->getMaxHp()) * 100);//    //		if (currentHp == 0) {//            this->handleHP(monster);//		}//	}////    CC_SAFE_RELEASE(monster);//    //	_bulletSprite->runAction(Sequence::create(Animate::create(AnimationCache::getInstance()->getAnimation("bomb")),//                                              CallFuncN::create(CC_CALLBACK_0(Missile::removeFromParent, this)),//                                              NULL));//}