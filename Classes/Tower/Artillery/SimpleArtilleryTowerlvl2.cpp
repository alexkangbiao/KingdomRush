#include "SimpleArtilleryTowerlvl2.h"#include "SimpleArtilleryTowerlvl3.h"#include "UpdatePanelLayer.h"#include "GameManager.h"#include "BaseMap.h"bool SimpleArtilleryTowerlvl2::init() {	if (!BaseArtilleryTower::init()) {		return false;	}	this->setTowerType(TOWER_TYPE_ARTILLERY_2);//	this->setLevel(2);//    this->setScope(180.0f);//    this->setUpdateMoney(150);//    this->setBuildMoney(270);//    this->setShootPeriod(3.0f);    	this->initArtilleryTower(this->getLevel());	this->schedule(schedule_selector(SimpleArtilleryTowerlvl2::shoot), this->getShootPeriod());    	SoundManager::playArtillery2Ready();    	return true;}#pragma mark - for update functionvoid SimpleArtilleryTowerlvl2::updateTower() {	auto simpleArtilleryTowerlvl3 = SimpleArtilleryTowerlvl3::create();	simpleArtilleryTowerlvl3->setTerrain(_terrain);	simpleArtilleryTowerlvl3->setTag(_terrain->getTag());	simpleArtilleryTowerlvl3->setPosition(Point(0,20));	_terrain->addChild(simpleArtilleryTowerlvl3);        //删除在缓冲子弹队列中的内容    this->refreshBulletVector();	this->removeTower();}void SimpleArtilleryTowerlvl2::showUpdateMenu() {	auto updatePanelLayer = UpdatePanelLayer::create();	updatePanelLayer->setTag(_terrain->getTag() + UPDATE_MENU_TAG);	updatePanelLayer->setTower(this);	updatePanelLayer->setPosition(this->getParent()->getPosition());	static_cast<BaseMap*>(this->getParent()->getParent())->mTouchLayer->addChild(updatePanelLayer);	if (GameManager::getInstance()->CURRENT_LEVEL <= this->getUpdate1StartLevel()) {		updatePanelLayer->setCanUpdate(false);	}	updatePanelLayer->playShowAnimation();	_isUpdateMenuShown = true;}