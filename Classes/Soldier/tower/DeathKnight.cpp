#include "DeathKnight.h"#include "GameManager.h"DeathKnight* DeathKnight::createDeathKnight(Point point) {    DeathKnight* deathKnight = new DeathKnight();    if (deathKnight && deathKnight->init()) {        deathKnight->setLocation(point);		deathKnight->birth(point);        deathKnight->autorelease();        return deathKnight;    }    	CC_SAFE_DELETE(deathKnight);        return NULL;}bool DeathKnight::init() {    if (!BaseSoldier::initWithSoldierType(SOLDIER_TYPE_DEATHKNIGHT, 1)) {        return false;    }        return true;}#pragma mark - for some private functionvoid DeathKnight::birth(Point point){	SoundManager::playDKReady();	this->setPosition(point);	baseSprite->runAction(Sequence::create(Animate::create(_animationBirth),                                           CallFuncN::create(CC_CALLBACK_0(DeathKnight::setState, this, SoldierStateWait)),                                           NULL));	this->schedule(schedule_selector(DeathKnight::lookingForMonsters), this->getAttackPeriod(), -1, this->caculateSpendTime(point));}void DeathKnight::setAnimationAndOthers() {    _animationDeath  = AnimationCache::getInstance()->getAnimation("DK_death");    _animationAttack = AnimationCache::getInstance()->getAnimation("DK_attack");    _animationRun    = AnimationCache::getInstance()->getAnimation("DK_run");    _animationBirth  = AnimationCache::getInstance()->getAnimation("DK_birth");    _soldierWaitingSpriteFrame = SpriteFrameCache::getInstance()->getSpriteFrameByName("NecromancerDeathKnight_0001.png");}