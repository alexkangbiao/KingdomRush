#include "Templar.h"#include "GameManager.h"Templar* Templar::createTemplar(Point point){    auto templar = new Templar();    if (templar && templar->init()) {        templar->setLocation(point);        templar->runToLocation(point);                templar->autorelease();        templar->_attackCount = 1;        return templar;    }        CC_SAFE_DELETE(templar);    return NULL;}bool Templar::init(){    if (!BaseSoldier::initWithSoldierType(SOLDIER_TYPE_TEMPLAR, 1)) {        return false;    }    return true;}void Templar::setAnimationAndOthers() {    _animationDeath  = AnimationCache::getInstance()->getAnimation("Templar_dead");    _animationAttack = AnimationCache::getInstance()->getAnimation("Templar_attack");    _animationRun    = AnimationCache::getInstance()->getAnimation("Templar_run");    _animationSkill1  = AnimationCache::getInstance()->getAnimation("Templar_skill1");    _animationSkill2  = AnimationCache::getInstance()->getAnimation("Templar_skill2");    _soldierWaitingSpriteFrame = SpriteFrameCache::getInstance()->getSpriteFrameByName("Templar_0001.png");}void Templar::setSoldierAttackState(float & monsterCurrentHP) {    _attackCount++;    switch(_attackCount % 3)    {        case(0):            this->setState(SoldierStateSkill1);            monsterCurrentHP =  monsterCurrentHP - this->getForce() - 30 + _nearestMonster->getArmor();            break;        case(1):            this->setState(SoldierStateAttack);            monsterCurrentHP =  monsterCurrentHP - this->getForce() + _nearestMonster->getArmor();            break;        case(2):            this->setState(SoldierStateSkill2);            this->setCurrentHP(this->getMaxHp());            this->setHpPercentage(100);            this->getHpBar()->setPercentage(100);            break;    }}//void Templar::attackMonster(float dt)//{//    if (nearestMonster != NULL && nearestMonster->getCurrentHP() > 0) {//        if (!this->checkDirectionForMonster()) {//            nearestMonster->setMonsterState(MonsterStateAttackLeft);//        } else {//            nearestMonster->setMonsterState(MonsterStateAttackRight);//        }//        auto monsterCurrentHP = nearestMonster->getCurrentHP();//        auto soldierCurrentHP = this->getCurrentHP();////        //        ////        if (_attackCount == 6) _attackCount = 1;//        if (monsterCurrentHP <= 0) {//            monsterCurrentHP = 0;//        }//        if (soldierCurrentHP <= 0) {//            soldierCurrentHP = 0;//        }//        nearestMonster->setCurrentHP( monsterCurrentHP );//        this->setCurrentHP(soldierCurrentHP);//        //        nearestMonster->getHpBar()->setPercentage((monsterCurrentHP / nearestMonster->getMaxHp()) * 100);//        this->getHpBar()->setPercentage((soldierCurrentHP / this->getMaxHp()) * 100);////        GameManager::getInstance()->CURRENT_MONEY = GameManager::getInstance()->CURRENT_MONEY + 5;//        if (monsterCurrentHP == 0) {//            this->unschedule(schedule_selector(Templar::attackMonster));//            nearestMonster->death();//            if (this->getCurrentHP()>0)//                this->runToLocation(_location);//        }//        if (soldierCurrentHP == 0) {//            _lastState = SoldierStateDeath;//            this->setState(SoldierStateDeath);//            this->unscheduleAllCallbacks();//            this->stopAllActions();//            baseSprite->stopAllActions();//            _hpBackgroungSprite->setVisible(false);//            //            if (nearestMonster != NULL && nearestMonster->getCurrentHP() > 0) {//                nearestMonster->restartWalking();//                nearestMonster->setIsAttacking(false);//            }//            baseSprite->runAction(Sequence::create(Animate::create(_animationDeath),//                                                   FadeOut::create(1.0f),//                                                   NULL));//        }//    } else {//        this->unschedule(schedule_selector(Templar::attackMonster));//        if (this->getCurrentHP() > 0)//            this->runToLocation(_location);//    }//    //}