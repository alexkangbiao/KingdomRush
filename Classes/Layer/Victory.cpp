#include "Victory.h"#include "TransitionGame.h"#include "GameView.h"#include "GameScene.h"#include "GameManager.h"USING_NS_CC;Victory* Victory::createVictory(int starNumber, int diamondNumber) {    auto layer = Victory::create();    layer->initVictory(starNumber, diamondNumber);    return layer;}bool Victory::initVictory(int starNumber, int diamondNumber) {    if ( ! Layer::init() ) {        return false;    }    _position = Point(Director::getInstance()->getVisibleSize().width / 2,                     Director::getInstance()->getVisibleSize().height * 0.7);        this->addColorLayer();    this->addMenuItems();        this->addVictoryBackgroundImage(starNumber);    this->addDiamondImage(diamondNumber);    this->initAnimation();            auto Sequence = Sequence::create(CallFuncN::create(CC_CALLBACK_0(Victory::victoryAnimation, this)),                                     DelayTime::create(0.5f),                                     CallFuncN::create(CC_CALLBACK_0(Victory::continueItemAnimation, this)),                                     DelayTime::create(0.5f),                                     CallFuncN::create(CC_CALLBACK_0(Victory::restartItemAnimation, this)),                                     DelayTime::create(0.5f),                                     CallFuncN::create(CC_CALLBACK_0(Victory::showStar, this, starNumber)),                                     CallFuncN::create(CC_CALLBACK_0(Victory::showDiamond, this)),                                     NULL);    this->runAction(Sequence);        SoundManager::playQuestCompleted();    return true;}#pragma mark - for 初始化函数void Victory::initAnimation() {    SpriteFrame* frame = NULL;    Vector<SpriteFrame*> aFrames;        for (int i = 1; i <= 9; i++) {        frame = SpriteFrameCache::getInstance()->getSpriteFrameByName(StringUtils::format("victoryStars_star_00%02d.png", i).c_str());        if (frame != nullptr)            aFrames.pushBack(frame);    }    AnimationCache::getInstance()->addAnimation(Animation::createWithSpriteFrames(aFrames, 0.04f), "victory_star");    }void Victory::showDiamond(){    _diamondSprite->setVisible(true);    _diamondSprite->runAction(MoveBy::create(1.0f, Point(300,0)));}void Victory::victoryAnimation(){    _victorySprite->runAction(ScaleTo::create(0.5f,1.0f,1.0f));}void Victory::continueItemAnimation(){    _continueMenuItem->setVisible(true);    auto move = MoveTo::create(0.5f,Point(_position.x,                                          _position.y-240));    _continueMenuItem->runAction(move);}void Victory::restartItemAnimation(){    _restartMenuItem->setVisible(true);    auto move = MoveTo::create(0.5f,Point(_position.x,                                          _position.y-335));    _restartMenuItem->runAction(move);    }void Victory::showStar(int starNumber){    for (int i = 0; i < starNumber; i++) {        auto star = Sprite::createWithSpriteFrameName("victoryStars_star_0001.png");        star->setPosition(Point(_position.x - 50 + i * 50,                                _position.y - 100));        star->setScale(0.0f);        this->addChild(star, VictoryDrawingOrderStar);        star->runAction(Sequence::create(DelayTime::create(i * 0.5f),                                         ScaleTo::create(0.5f, 1, 1),                                         NULL                                         ));    }    //    switch (starNumber)//    {//        case(1):{//            auto star = Sprite::createWithSpriteFrameName("victoryStars_star_0001.png");//            star->setPosition(Point(_position.x,//                                    _position.y - 100));//            star->setScale(0.0f);//            this->addChild(star,3);//            star->runAction(ScaleTo::create(0.5f,1,1));//        }//            break;//        case(2):{//            auto star1 = Sprite::createWithSpriteFrameName("victoryStars_star_0001.png");//            star1->setPosition(Point(_position.x -25,//                                     _position.y-100));//            star1->setScale(0.0f);//            this->addChild(star1,3);//            star1->runAction(ScaleTo::create(0.5f,1,1));//            auto star2 = Sprite::createWithSpriteFrameName("victoryStars_star_0001.png");//            star2->setPosition(Point(_position.x + 25,_position.y-100));//            star2->setScale(0.0f);//            this->addChild(star2,3);//            star2->runAction(Sequence::create(DelayTime::create(0.5f),ScaleTo::create(0.5f,1,1),NULL));//        }//            break;//        case(3):{//            auto star1 = Sprite::createWithSpriteFrameName("victoryStars_star_0001.png");//            star1->setPosition(Point(_position.x - 50,_position.y-100));//            star1->setScale(0.0f);//            this->addChild(star1,3);//            star1->runAction(ScaleTo::create(0.5f,1,1));//            auto star2 = Sprite::createWithSpriteFrameName("victoryStars_star_0001.png");//            star2->setPosition(Point(_position.x ,_position.y-100));//            star2->setScale(0.0f);//            this->addChild(star2,3);//            star2->runAction(Sequence::create(DelayTime::create(0.5f),ScaleTo::create(0.5f,1,1),NULL));//            auto star3 = Sprite::createWithSpriteFrameName("victoryStars_star_0001.png");//            star3->setPosition(Point(_position.x + 50,_position.y-100));//            star3->setScale(0.0f);//            this->addChild(star3,3);//            star3->runAction(Sequence::create(DelayTime::create(1.0f),ScaleTo::create(0.5f,1,1),NULL));//        }//            break;//        default://            break;//    }    }#pragma mark for callback functionvoid Victory::onContinueButtonTouch(Ref* pSpender){    Director::getInstance()->replaceScene(TransitionGame::create(1.0f, GameView::createScene()));    }void Victory::onRestartButtonTouch(Ref* pSpender){    Director::getInstance()->replaceScene(TransitionGame::create(1.0f, GameScene::playGame(_level, _difficult)));}#pragma mark for private functionvoid Victory::addColorLayer() {    Size visibleSize = Director::getInstance()->getVisibleSize();    auto colorLayer = LayerColor::create(Color4B(0, 0, 0, 60), visibleSize.width, visibleSize.height);    this->addChild(colorLayer, VictoryDrawingOrderColorLayer);    auto listener = EventListenerTouchOneByOne::create();    listener->onTouchBegan = [&](Touch* touch, Event* event){        return true;    };    listener->setSwallowTouches(true);    Director::getInstance()->getEventDispatcher()->addEventListenerWithSceneGraphPriority(listener, colorLayer);}void Victory::addMenuItems() {    auto continueOffSprite = Sprite::createWithSpriteFrameName("button_continue_0001.png");    auto continueOnSprite  = Sprite::createWithSpriteFrameName("button_continue_0002.png");    auto restartOffSprite  = Sprite::createWithSpriteFrameName("button_restart_0001.png");    auto restartOnSprite   = Sprite::createWithSpriteFrameName("button_restart_0002.png");    _continueMenuItem = MenuItemSprite::create(continueOffSprite,                                               continueOnSprite,                                               CC_CALLBACK_1(Victory::onContinueButtonTouch, this));    _continueMenuItem->setPosition(Director::getInstance()->getVisibleSize().width / 2,                                   Director::getInstance()->getVisibleSize().height * 0.7);    _continueMenuItem->setVisible(false);            _restartMenuItem = MenuItemSprite::create(restartOffSprite,                                              restartOnSprite,                                              CC_CALLBACK_1(Victory::onRestartButtonTouch, this));    _restartMenuItem->setPosition(Director::getInstance()->getVisibleSize().width / 2,                                  Director::getInstance()->getVisibleSize().height * 0.7 - _continueMenuItem->getContentSize().height);    _restartMenuItem->setVisible(false);        auto menu = Menu::create(_restartMenuItem,                             _continueMenuItem,                             NULL);    menu->setPosition(Vec2::ZERO);    this->addChild(menu, VictoryDrawingOrderMenu);}void Victory::addVictoryBackgroundImage(int starNumber) {    switch (starNumber)    {        case(1):            _victorySprite = Sprite::createWithSpriteFrameName("victoryBadges_0002.png");            break;        case(2):            _victorySprite = Sprite::createWithSpriteFrameName("victoryBadges_0002.png");            break;        case(3):            _victorySprite = Sprite::createWithSpriteFrameName("victoryBadges_0002.png");            break;        case(4):            _victorySprite = Sprite::createWithSpriteFrameName("victoryBadges_0003.png");            break;        case(5):            _victorySprite = Sprite::createWithSpriteFrameName("victoryBadges_0004.png");            break;        default:            _victorySprite = Sprite::createWithSpriteFrameName("victoryBadges_0001.png");            break;    }    _victorySprite->setPosition(_position);    _victorySprite->setScale(0.2f);    this->addChild(_victorySprite, VictoryDrawingOrderBadge);}void Victory::addDiamondImage(int diamondNumber) {    _diamondSprite = Sprite::createWithSpriteFrameName("win_Gnome.png");    _diamondSprite->setPosition(Director::getInstance()->getVisibleSize().width / 2,                                Director::getInstance()->getVisibleSize().height / 2 + 100);    this->addChild(_diamondSprite, VictoryDrawingOrderDiamondImage);    auto oneDigit = Sprite::createWithSpriteFrameName(StringUtils::format("win_Gnome_Numbers_000%d.png", diamondNumber % 10).c_str());    auto tenDigit = Sprite::createWithSpriteFrameName(StringUtils::format("win_Gnome_Numbers_000%d.png", (diamondNumber / 10) % 10).c_str());    tenDigit->setPosition(Point(160, 60));    oneDigit->setPosition(Point(180, 50));    _diamondSprite->addChild(oneDigit);    _diamondSprite->addChild(tenDigit);    _diamondSprite->setVisible(false);}