#include "FireBall.h"#include "GameManager.h"#include "Smoke.h"#include "TowerUpdateManager.h"bool FireBall::init(){	if (! BombBulletBase::initWithTypeAndLevel(BULLET_TYPE_FIREBALL, 1))	{		return false;	}	this->round();    	this->schedule(schedule_selector(FireBall::smoke), 0.01f);    	return true;}void FireBall::shoot(Point location){	this->setPosition(location);	this->runAction(Sequence::create(MoveBy::create(0.5f, Point(0, -FIREBALL_FALLDOWN_START_HEIGHT)),                                     CallFuncN::create(CC_CALLBACK_0(FireBall::attackAreaMonster, this)),                                     NULL));}void FireBall::round(){	auto repeat = RepeatForever::create(Animate::create(AnimationCache::getInstance()->getAnimation("fireBall_fire")));	_bulletSprite->setRotation(90.f);	repeat->setTag(0);	_bulletSprite->runAction(repeat);}void FireBall::processMonsterDeath(BaseMonster * monster) {    monster->explosion();}//用于由于武器升级造成的影响void FireBall::addAdditionalParameterConfig() {    this->setMaxForce(this->getMaxForce() * (1 + TowerUpdateManager::getInstance()->getTowerUpgradeValue(UpgradeTowerTagFireball04_Force)));    this->setBulletScope(this->getBulletScope() * (1 + TowerUpdateManager::getInstance()->getTowerUpgradeValue(UpgradeTowerTagFireball05_Scope)));}void FireBall::handleFinishBullet() {    this->unscheduleAllCallbacks();    _bulletSprite->stopAllActions();    _bulletSprite->runAction(Sequence::create(Animate::create(AnimationCache::getInstance()->getAnimation("fireBall_explosion")),                                                  CallFuncN::create(CC_CALLBACK_0(FireBall::removeFromParent, this)),                                                  NULL));}void FireBall::smoke(float dt){    auto smoke = Smoke::create();    this->getParent()->addChild(smoke);    smoke->setPosition(this->getPosition());    smoke->fadeSmoke(AnimationCache::getInstance()->getAnimation("fireBall_smoke"), 10);    smoke->removeFromParent();}