#include "Dynamite.h"#include "GameManager.h"bool Dynamite::init(){	if (! BombBulletBase::initWithTypeAndLevel(BULLET_TYPE_DYNAMITE, 1)){		return false;	}//    this->setBulletType(BULLET_TYPE_DYNAMITE);//    this->setBulletScope(50.0f);//    this->setMaxForce(500.0f);//    this->addBulletSprite("dynamite.png");	return true;}void Dynamite::shoot(Point point) {	this->setPosition(point);	_bulletSprite->runAction(Spawn::create(Sequence::create(MoveBy::create(0.5f, Point(0, 50)),                                                            MoveBy::create(0.5f, Point(0, -50)),                                                            Animate::create(AnimationCache::getInstance()->getAnimation("bomb")),                                                            CallFuncN::create(CC_CALLBACK_0(Dynamite::attackAreaMonster, this)),                                                            NULL),                                           RotateBy::create(1.0f, 1080.0f),                                           NULL));}void Dynamite::processMonsterDeath(BaseMonster * monster) {    monster->explosion();}//void Dynamite::removeBullet()//{//    auto monsterVector = GameManager::getInstance()->monsterVector;//	SoundManager::playBomb();//    //	for(int i = 0; i < monsterVector.size(); i++)//	{//		auto monster = monsterVector.at(i);//		double distance = (this->getPosition()).getDistance(monster->baseSprite->getPosition());////		if (monster != NULL && distance < this->getBulletScope()) {//			auto currentHP = monster->getCurrentHP();////			currentHP =  currentHP - this->getMaxForce();//                //			if(currentHP <= 0){//				currentHP = 0;//			}//			monster->setCurrentHP( currentHP );////			monster->getHpBar()->setPercentage((currentHP / monster->getMaxHp()) * 100);//  //			if(currentHP == 0){//				monster->explosion();//			}//		}//	}//	this->removeFromParent();//}