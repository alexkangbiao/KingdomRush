#include "Skeleton.h"#include "GameManager.h"Skeleton* Skeleton::createSkeleton(Point point){    auto skeleton = new Skeleton();    if (skeleton && skeleton->init())    {        skeleton->setLocation(point);		skeleton->birth(point);        skeleton->autorelease();        return skeleton;    }	CC_SAFE_DELETE(skeleton);    return NULL;}void Skeleton::birth(Point point){	this->setPosition(point);	this->scheduleUpdate();	baseSprite->runAction(Sequence::create(Animate::create(_animationBirth),                                           CallFuncN::create(CC_CALLBACK_0(Skeleton::setState, this, SoldierStateWait)),                                           NULL));	this->schedule(schedule_selector(Skeleton::lookingForMonsters), 1.0f, -1, this->caculateSpendTime(point));}bool Skeleton::init(){	if (!BaseSoldier::initWithSoldierType(SOLDIER_TYPE_SKELETON, 1)){		return false;	}	return true;}void Skeleton::setAnimationAndOthers() {    _animationDeath  = AnimationCache::getInstance()->getAnimation("skeleton_death");    _animationAttack = AnimationCache::getInstance()->getAnimation("skeleton_attack");    _animationRun    = AnimationCache::getInstance()->getAnimation("skeleton_run");    _animationBirth  = AnimationCache::getInstance()->getAnimation("skeleton_birth");    _soldierWaitingSpriteFrame = SpriteFrameCache::getInstance()->getSpriteFrameByName("skeleton_0001.png");}//void Skeleton::attackMonster(float dt)//{//	if(nearestMonster!=NULL && nearestMonster->getCurrentHP()>0){//		if (!checkDirectionForMonster()){//			nearestMonster->setMonsterState(MonsterStateAttackLeft);//		}else{//			nearestMonster->setMonsterState(MonsterStateAttackRight);//		}//		setState(SoldierStateAttack);////		auto monsterCurrHp = nearestMonster->getCurrentHP();//		auto SoldierHp = this->getCurrentHP();////		monsterCurrHp =  monsterCurrHp - this->getForce();////		if(nearestMonster->getMonsterState()!=MonsterStateFrozen)//			SoldierHp =  SoldierHp - nearestMonster->getForce();////		if(monsterCurrHp <= 0){//			monsterCurrHp = 0;//		}//		if(SoldierHp <= 0){//			SoldierHp = 0;//		}//		nearestMonster->setCurrentHP( monsterCurrHp );//		this->setCurrentHP(SoldierHp);////		nearestMonster->getHpBar()->setPercentage((monsterCurrHp/nearestMonster->getMaxHp())*100);//		this->getHpBar()->setPercentage((SoldierHp/this->getMaxHp())*100);////		if(monsterCurrHp == 0){//			unschedule(schedule_selector(Skeleton::attackMonster));//			//GameManager::getInstance()->monsterVector.eraseObject(nearestMonster);//			nearestMonster->death();//			if(this->getCurrentHP()>0)//				runToLocation(_location);//		}//		if (SoldierHp == 0){//			_lastState = SoldierStateDeath;//			setState(SoldierStateDeath);//			unscheduleAllCallbacks();//			stopAllActions();//			baseSprite->stopAllActions();//			_hpBackgroungSprite->setVisible(false);//			if(nearestMonster != NULL && nearestMonster->getCurrentHP()>0){//				nearestMonster->restartWalking();//				nearestMonster->setIsAttacking(false);//			}//			baseSprite->runAction(Sequence::create(Animate::create(_animationDeath),//                                                   FadeOut::create(1.0f),//                                                   CallFuncN::create(CC_CALLBACK_0(Skeleton::removeFromParent, this)),//                                                   NULL));//		}//	}else{//		unschedule(schedule_selector(Skeleton::attackMonster));//		if(this->getCurrentHP()>0)//				runToLocation(_location);//	}//}//void Skeleton::update(float dt)//{//	//若状态更新//	if (_lastState != this->getState()) {//        baseSprite->stopActionByTag(_lastState);//        _lastState = this->getState();////		//根据状态判断//		switch (this->getState()) {//            case(SoldierStateRun): {//                auto action = RepeatForever::create(Animate::create(_animationRun));//                action->setTag(this->getState());//                baseSprite->runAction(action);//            }//                break;//            case(SoldierStateHit): {//                auto action = RepeatForever::create(Animate::create(_animationAttack));//                action->setTag(this->getState());//                baseSprite->runAction(action);//            }//                break;//            case (SoldierStateWait): {//                baseSprite->setSpriteFrame(_soldierWaitingSpriteFrame);//            }//                break;//            default://                break;//        }//    }//}//void Skeleton::runToMonster()//{//	Point destination;//	if (!checkDirectionForMonster()){//怪在右边//		destination.x = nearestMonster->getMonsterPosition().x//                        + nearestMonster->getMonsterContentSize().width / 2//                        - this->getParent()->getPositionX()//                        - this->baseSprite->getContentSize().width / 2;//		destination.y = nearestMonster->getMonsterPosition().y//                        - this->getParent()->getPositionY()//                        - this->baseSprite->getContentSize().height / 4;//	}else{//左边//		destination.x = nearestMonster->getMonsterPosition().x//                        - nearestMonster->getMonsterContentSize().width / 2//                        - this->getParent()->getPositionX()//                        + this->baseSprite->getContentSize().width / 2;//		destination.y = nearestMonster->getMonsterPosition().y//                        - this->getParent()->getPositionY()//                        - this->baseSprite->getContentSize().height / 4;//	}//	setState(SoldierStateRun);//	runAction(Sequence::create(MoveTo::create(this->caculateSpendTime(destination),destination) , NULL));//	schedule(schedule_selector(Skeleton::attackMonster), 1.0f,-1, this->caculateSpendTime(destination));//}//void Skeleton::checkNearestMonster()//{//	auto instance = GameManager::getInstance();//    auto monsterVector = instance->monsterVector;//    nearestMonster = NULL;//	for(int i = 0; i < monsterVector.size(); i++)//	{//		auto monster = monsterVector.at(i);//		double distance = (this->getParent()->getPosition()+this->getPosition()).getDistance(monster->getMonsterPosition());////		if (monster->getEnableAttackBySoldier() && distance < 50 && (!monster->getIsAttacking())) {//            nearestMonster = monster;//			nearestMonster->stopWalking();//			nearestMonster->setIsAttacking(true);//			break;//		}//	}//}////bool Skeleton::checkDirectionForMonster()//{//	if((nearestMonster->getMonsterPosition().x - (this->getParent()->getPositionX() + this->getPositionX()))>0){//		baseSprite->setFlippedX(false);//		return false;//	}else{//		baseSprite->setFlippedX(true);//		return true;//	}//}//void Skeleton::createAndSetHpBar()//{//    _hpBackgroungSprite = Sprite::createWithSpriteFrameName("lifebar_bg_small.png");////    _hpBackgroungSprite->setPosition(Point(baseSprite->getContentSize().width / 2, baseSprite->getContentSize().height));//    baseSprite->addChild(_hpBackgroungSprite);//    //	_hpBar = ProgressTimer::create(Sprite::createWithSpriteFrameName("lifebar_small.png"));//	_hpBar->setType(ProgressTimer::Type::BAR);//	_hpBar->setMidpoint(Point(0, 0.5f));//	_hpBar->setBarChangeRate(Point(1, 0));//	_hpBar->setPercentage(100);//    _hpBar->setPosition(Point(_hpBackgroungSprite->getContentSize().width / 2,//                              _hpBackgroungSprite->getContentSize().height / 2 ));//    _hpBackgroungSprite->addChild(_hpBar);//}