#include "BaseBuildIcon.h"#include "GameManager.h"#include "Utility.h"BaseBuildIcon* BaseBuildIcon::createIcon(int type, int money){    auto baseBuildIcon = new BaseBuildIcon();        if (baseBuildIcon && baseBuildIcon->initIcon(type, money))    {        baseBuildIcon->autorelease();        return baseBuildIcon;    }    CC_SAFE_DELETE(baseBuildIcon);        return NULL;}bool BaseBuildIcon::initIcon(int type, int money) {	if (!Sprite::init()) {		return false;	}	_isSelected = false;    _isMoneyEnough = false;        CCASSERT(type != 0, "BaseBuildIcon::initIcon type = 0");	_baseIcon = Sprite::createWithSpriteFrameName(Utility::string_format("main_icons_00%02d.png", type));	this->addChild(_baseIcon, BaseBuildIconDrawingOrderBaseIcon);    	_priceFrameIcon = Sprite::createWithSpriteFrameName("price_tag.png");	_priceFrameIcon->setPosition(Point(0,                                 - _baseIcon->getContentSize().height / 2));	this->addChild(_priceFrameIcon, BaseBuildIconDrawingOrderBaseIcon);   	_priceLabel = Label::createWithTTF(Utility::string_format("%d", money),                                       "fonts/arial.ttf",                                       20);	_priceLabel->setColor(Color3B(255, 153, 0));	_priceLabel->setPosition(Point(_priceFrameIcon->getContentSize().width / 2,                                   _priceFrameIcon->getContentSize().height / 2 - 2));	_priceFrameIcon->addChild(_priceLabel);        //confirm icon	_confirmIcon = Sprite::createWithSpriteFrameName("main_icons_0019.png");	_confirmIcon->setPosition(Point(_baseIcon->getContentSize().width/2,                                    _baseIcon->getContentSize().height/2));	_confirmIcon->setVisible(false);    _baseIcon->addChild(_confirmIcon);	this->setMoney(money);	this->setType(type);        this->scheduleUpdate();	return true;}void BaseBuildIcon::updateMoneyLabel(int money) {	this->_money = money;	_priceLabel->setString(Utility::string_format("%d", money));}void BaseBuildIcon::setSelected(bool isSelected) {    this->_isSelected = isSelected;    _confirmIcon->setVisible(isSelected);}void BaseBuildIcon::update(float dt) {	if (this->getMoney() <= GameManager::getInstance()->CURRENT_MONEY) {		this->haveEnoughMoney();	} else {		this->noEnoughMoney();	}}Size BaseBuildIcon::getSize() {    return this->_baseIcon->getContentSize();}void BaseBuildIcon::noEnoughMoney() {    _isMoneyEnough = false;    _priceLabel->setColor(Color3B(102, 102, 102));    _baseIcon->setSpriteFrame(               SpriteFrameCache::getInstance()->getSpriteFrameByName(                            Utility::string_format("main_icons_disabled_00%02d.png", _type)));    _priceFrameIcon->setSpriteFrame(SpriteFrameCache::getInstance()->getSpriteFrameByName("price_tag_disabled.png"));    _confirmIcon->setSpriteFrame(SpriteFrameCache::getInstance()->getSpriteFrameByName("main_icons_disabled_0019.png"));}void BaseBuildIcon::haveEnoughMoney() {    _isMoneyEnough = true;    _priceLabel->setColor(Color3B(255, 153, 0));    _confirmIcon->setSpriteFrame(SpriteFrameCache::getInstance()->getSpriteFrameByName("main_icons_0019.png"));    _baseIcon->setSpriteFrame(               SpriteFrameCache::getInstance()->getSpriteFrameByName(                            Utility::string_format("main_icons_00%02d.png", _type)));    _priceFrameIcon->setSpriteFrame(SpriteFrameCache::getInstance()->getSpriteFrameByName("price_tag.png"));}