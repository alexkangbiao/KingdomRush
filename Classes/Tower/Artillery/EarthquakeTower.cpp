#include "EarthquakeTower.h"#include "EarthquakeSmoke.h"#include "GameManager.h"#include "Drill.h"#include "SimplePanleLayer.h"#include "BaseMap.h"#include "Utility.h"bool EarthquakeTower::init(){	if(!BaseTower::init()){		return false;	}	this->setTowerType(TOWER_TYPE_EARTHQUAKE);	this->addTerrainSprite("terrain_specials_0004.png");//	this->setScope(220.0f);//	this->setBuildMoney(550);//    this->setShootPeriod(2.5f);        this->initTower();	_attackCount = 0;	this->schedule(schedule_selector(EarthquakeTower::shoot), this->getShootPeriod());    	SoundManager::playEarthquakeReady();//	addListener();	return true;}void EarthquakeTower::initTower() {    _towerBase = Sprite::createWithSpriteFrameName("EarthquakeTower_Base.png");    this->addChild(_towerBase);        _operation = Sprite::createWithSpriteFrameName("EarthquakeTower_0001.png");    this->addChild(_operation);        _glow = Sprite::createWithSpriteFrameName("EarthquakeTower_Glow_0001.png");    _glow->setPosition(Point(0, 40));    this->addChild(_glow);    _glow->setVisible(false);        _hitSmoke = EarthquakeSmoke::create();    this->addChild(_hitSmoke);        _lava = Lava::create();    this->addChild(_lava);        _hitDecal = Sprite::createWithSpriteFrameName("EarthquakeTower_HitDecal3.png");    this->addChild(_hitDecal);    _hitDecal->setVisible(false);        _light = Sprite::createWithSpriteFrameName("EarthquakeTower_lights_0001.png");    this->addChild(_light);}//void EarthquakeTower::addTerrain()//{//	_terrainSprite = Sprite::createWithSpriteFrameName("terrain_specials_0004.png");//	_terrainSprite->setAnchorPoint(Point(0.5,1));//	this->addChild(_terrainSprite, -1);//}void EarthquakeTower::prepareAnimation() {    _operationDownAnimation = AnimationCache::getInstance()->getAnimation("EarthquakeTower_operation_down");    _operationUpAnimation   = AnimationCache::getInstance()->getAnimation("EarthquakeTower_operation_up");    _glowAnimation          = AnimationCache::getInstance()->getAnimation("EarthquakeTower_glow");    _lightAnimation         = AnimationCache::getInstance()->getAnimation("EarthquakeTower_light");    _drillingAnimation      = AnimationCache::getInstance()->getAnimation("EarthquakeTower_drilling");}void EarthquakeTower::shoot(float dt){//	this->checkNearestMonster();    _nearestMonster = this->getCanAttackMonster();    	_hitDecal->setScale(1.0f);	if (_nearestMonster != nullptr && _nearestMonster->getCurrentHP() > 0)    {		_attackCount ++;		if( _attackCount % 3 != 0){			SoundManager::playEarthquakeHit();			_hitDecal->runAction(Sequence::create(				DelayTime::create(1.0f),				CallFuncN::create(CC_CALLBACK_0(Sprite::setVisible, _hitDecal, true)),				ScaleTo::create(0.5f, 3.5f, 3.5f),				CallFuncN::create(CC_CALLBACK_0(Sprite::setVisible, _hitDecal, false)),				NULL));			_operation->runAction(Sequence::create(				Animate::create(_operationDownAnimation),				CallFuncN::create(CC_CALLBACK_0(EarthquakeSmoke::shoot, _hitSmoke)),				CallFuncN::create(CC_CALLBACK_0(EarthquakeTower::attackMonsters, this, 60)),				Animate::create(_operationUpAnimation),				NULL));		} else {			SoundManager::playEarthquakeLava();			_hitDecal->runAction(Sequence::create(				DelayTime::create(1.0f),				CallFuncN::create(CC_CALLBACK_0(Sprite::setVisible, _hitDecal, true)),				ScaleTo::create(0.5f,3.5f,3.5f),				CallFuncN::create(CC_CALLBACK_0(Sprite::setVisible, _hitDecal, false)),				NULL));			_operation->runAction(Sequence::create(				Animate::create(_operationDownAnimation),				CallFuncN::create(CC_CALLBACK_0(Lava::shoot, _lava)),				CallFuncN::create(CC_CALLBACK_0(EarthquakeTower::attackMonsters, this, 100)),				Animate::create(_operationUpAnimation),				NULL));			_glow->runAction(Sequence::create(				CallFuncN::create(CC_CALLBACK_0(Sprite::setVisible, _glow,true)),				Repeat::create(Animate::create(_glowAnimation), 3),				CallFuncN::create(CC_CALLBACK_0(Sprite::setVisible, _glow,false)),				NULL));		}	}//    else {//		bool shouldDrill = false;//		auto monsterVector = GameManager::getInstance()->monsterVector;//		for (int j = 0; j < monsterVector.size(); j++){//			auto monster = monsterVector.at(j);////			if (monster != NULL && monster->getCurrentHP() > 0 && monster->getEnableAttackBySoldier()){//				shouldDrill = true;//				break;//			}//		}//		if (shouldDrill) {//			SoundManager::playEarthquakeDrillin();//			auto drill = Drill::create();//			this->getParent()->getParent()->addChild(drill);//			_light->runAction(Repeat::create(Animate::create(_lightAnimation), 10));//			//			_operation->runAction(Sequence::create(//				Animate::create(_drillingAnimation),//				CallFuncN::create(CC_CALLBACK_0(Drill::shoot, drill)),//				NULL));//		}//	}}void EarthquakeTower::attackMonsters(int force){	auto monsterVector = GameManager::getInstance()->monsterVector;	for (int j = 0; j < monsterVector.size(); j++)	{		auto monster = monsterVector.at(j);        if (monster->getEnableAttackByTower()) {            if (Utility::estimationNearestDistance(this->getTowerPosition().x - monster->getMonsterPosition().x,                                                   this->getTowerPosition().y - monster->getMonsterPosition().y,                                                   this->getAttackScope() )) {                monster->runOnSlowSpeed(2.0f, 5);                                auto currentHP = monster->getCurrentHP();                currentHP =  currentHP - force + monster->getArmor();                                if(currentHP <= 0) currentHP = 0;                                monster->setCurrentHP( currentHP );                monster->getHpBar()->setPercentage((currentHP/monster->getMaxHp()) * 100.0f);                                if (currentHP == 0) {                    monster->explosion();                }            }        }	}}//void EarthquakeTower::showUpdateMenu()//{//	auto updatePanleLayer = SimplePanleLayer::create();//	updatePanleLayer->setTag(_terrain->getTag() + 100);//	updatePanleLayer->setTower(this);//	updatePanleLayer->setPosition(this->getParent()->getPosition());//	static_cast<BaseMap*>(this->getParent()->getParent())->mTouchLayer->addChild(updatePanleLayer);//	updatePanleLayer->playShowAnimation();//	_isUpdateMenuShown = true;//}//void EarthquakeTower::checkNearestMonster()//{//    auto instance = GameManager::getInstance();//    auto monsterVector = instance->monsterVector;//    //	auto currMinDistant = this->_scope;//    //	BaseMonster *monsterTemp = NULL;//	for(int i = 0; i < monsterVector.size(); i++)//	{//		auto monster = monsterVector.at(i);//		double distance = this->getParent()->getPosition().getDistance(monster->getMonsterPosition());////		if (distance < currMinDistant && monster->getEnableAttackBySoldier() ) {//			currMinDistant = distance;//            monsterTemp = monster;//		}//	}//    _nearestMonster = monsterTemp;//}