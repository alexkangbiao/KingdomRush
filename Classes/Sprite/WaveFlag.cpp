#include "WaveFlag.h"bool WaveFlag::init() {	if (!Sprite::init()) {		return false;	}	_waveProgressTimer = ProgressTimer::create(Sprite::createWithSpriteFrameName("waveFlag_0003.png"));	_waveProgressTimer->setType(ProgressTimer::Type::RADIAL);        auto flagSprite = Sprite::createWithSpriteFrameName("waveFlag_0001.png");	flagSprite->setPosition(Point(_waveProgressTimer->getContentSize().width / 2,                                  _waveProgressTimer->getContentSize().height / 2));    _waveProgressTimer->addChild(flagSprite);    	_selectedSprite = Sprite::createWithSpriteFrameName("waveFlag_selected.png");	_selectedSprite->setPosition(Point(_waveProgressTimer->getContentSize().width / 2,                                       _waveProgressTimer->getContentSize().height / 2));	_selectedSprite->setVisible(false);    _waveProgressTimer->addChild(_selectedSprite);	this->addChild(_waveProgressTimer);    	this->setScale(0.8f);	this->setVisible(false);	this->_isShown = false;    	return true;}void WaveFlag::startRespiration(float dt) {	_waveProgressTimer->setPercentage(_percentage);	this->runAction(Sequence::create(ScaleTo::create(0.25f, 0.6f, 0.6f),                                     ScaleTo::create(0.25f, 0.8f, 0.8f),                                     NULL));	_percentage = _percentage + 2.5f;	if (_percentage > 100) {		this->_isShown = false;		this->setVisible(false);		this->unschedule(schedule_selector(WaveFlag::startRespiration));	}}void WaveFlag::stopRespiration() {	_waveProgressTimer->setPercentage(100);	_isShown = false;	this->setVisible(false);	this->unschedule(schedule_selector(WaveFlag::startRespiration));}void WaveFlag::restartWaveFlag() {	_isShown = true;	this->setVisible(true);	_waveProgressTimer->setPercentage(0);	_percentage = 0;	this->schedule(schedule_selector(WaveFlag::startRespiration), 0.5f);}float WaveFlag::getWavePercentage() {	return _waveProgressTimer->getPercentage();}void WaveFlag::setWavePercentage(float percent) {	 _waveProgressTimer->setPercentage(percent);}void WaveFlag::setSelected() {	if (_selectedSprite->isVisible()) {		_selectedSprite->setVisible(false);	} else {		_selectedSprite->setVisible(true);	}}Size WaveFlag::getWaveFlagContentSize() {    return this->_waveProgressTimer->getContentSize();}Point WaveFlag::getWaveFlagPosition() {    return this->getPosition();}