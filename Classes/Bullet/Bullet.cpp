#include "Bullet.h"#include "BulletParameter.h"#include "BulletManager.hpp"#include "Utility.h"Bullet::Bullet() :_bulletSprite(nullptr),_maxForce(0),_bulletScope(0),_hasTowerProperty(true),_hasSoldierProperty(true),_isAreaAttack(true),_bulletType(BULLET_TYPE_ARROW),_bulletAction(nullptr){}Bullet::~Bullet(){}bool Bullet::init(){	if (!Sprite::init())	{		return false;	}	return true;}bool Bullet::initWithTypeAndLevel(BulletType bulletType, int level){    if (!Sprite::init()) {        return false;    }        this->refreshTypeAndLevel(bulletType, level);    this->addBulletSprite(this->getBulletImageName());    return true;}#pragma mark - for 初始化函数void Bullet::refreshTypeAndLevel(BulletType bulletType, int level) {    this->setBulletType(bulletType);    this->setLevel(level);        auto bulletParameter = BulletManager::getInstance()->getParameterByType(bulletType, level);    this->setBulletImageName(bulletParameter->getBaseImageName());    this->setMaxForce(bulletParameter->getForce());    this->setBulletScope(bulletParameter->getScope());    this->setBulletSpeed(bulletParameter->getSpeed());    this->setIsAreaAttack(bulletParameter->getIsArea());    this->setHasTowerProperty(bulletParameter->getIsTower());    this->setHasSoldierProperty(bulletParameter->getIsSoldier());        this->addAdditionalParameterConfig();}void Bullet::addBulletSprite(std::string bulletImageName) {    _bulletSprite = Sprite::createWithSpriteFrameName(bulletImageName);    this->addChild(_bulletSprite, BulletDrawingOrderBulletSprite);}void Bullet::restoreBullet() {    _bulletAction = nullptr;    this->setVisible(true);    _bulletSprite->setVisible(true);    _bulletSprite->setSpriteFrame(this->getBulletImageName());}#pragma mark - for protected functionvoid Bullet::attackMonster() {    bool isMiss = true;    auto monsterVector = GameManager::getInstance()->monsterVector;        for (int j = 0; j < monsterVector.size(); j++) {        auto monster = monsterVector.at(j);                if ( monster != nullptr            && ((this->getHasTowerProperty() && monster->getEnableAttackByTower())               || (this->getHasSoldierProperty() && monster->getEnableAttackBySoldier()))) {                        //面攻击            if (this->getIsAreaAttack()) {                                if (Utility::estimationNearestDistance(this->getBulletPosition().x - monster->getMonsterPosition().x,                                                this->getBulletPosition().y - monster->getMonsterPosition().y,                                                this->getBulletScope() )) {                    isMiss = false;                    this->handleHP(monster);                }            } else {//点攻击                                auto monsterRect = monster->getMonsterBoundingBox();                auto bulletRect = this->getBulletRect();                                if (monsterRect.intersectsRect(bulletRect)) {                    isMiss = false;                    this->handleHP(monster);                    break;                }            }        }    }        if (isMiss) {        this->handleMissBullet();    }        this->handleFinishBullet();}void Bullet::processMonsterDeath(BaseMonster * monster) {    monster->death();}void Bullet::handleFinishBullet() {    this->removeFromParent();}void Bullet::handleHP(BaseMonster * monster) {    auto currentHP = monster->getCurrentHP();        //只有攻击力大于怪物的防护才执行    if (this->getMaxForce() > monster->getArmor()) {        currentHP = currentHP - this->getMaxForce() + monster->getArmor();                if (currentHP > 0) {            monster->setCurrentHP( currentHP );            monster->getHpBar()->setPercentage((currentHP / monster->getMaxHp()) * 100);                        monster->hurt();        } else {            this->processMonsterDeath(monster);        }    }}#pragma mark - for getter functionRect Bullet::getBulletRect() {    return Rect(this->getPositionX() + this->getParent()->getPositionX() - this->getContentSize().width / 2,                this->getPositionY() + this->getParent()->getPositionY() - this->getContentSize().height / 2,                this->getBulletContentSize().width,                this->getBulletContentSize().height );}Size Bullet::getBulletContentSize() {    return this->_bulletSprite->getContentSize();}Point Bullet::getBulletPosition() {    return (this->getPosition() + this->getParent()->getPosition());}void Bullet::setBulletPosition(Point point) {    this->_bulletSprite->setPosition(point);}float Bullet::caculateSpendTime(Point toPoint){    return toPoint.getDistance(this->getBulletPosition()) / this->getBulletSpeed();}