#ifndef _GAMEMANAGER_H_#define _GAMEMANAGER_H_#include "Bullet.h"#include "cocos2d.h"#include "BaseMonster.h"#include "BaseTower.h"#include "TouchLayer.h"USING_NS_CC;#define MAX_CHAR_LENGHT 20class GameManager{public:    void CreateGameManager(int slot);    static GameManager* getInstance();        //所有出现但是没有被消灭的怪物队列    Vector<BaseMonster*> monsterVector;        //所有已经出现但是被消灭的怪物队列    Vector<BaseMonster*> monsterInusedVector;        //标示释放已经载入缓存    bool LOADED_TAG_TOWER_ANIMATION;        //某存档是否已经新建，true表示新建，false表示未新建    char SLOTX_ISEXIT[MAX_CHAR_LENGHT];        //某关卡是否完成,0表示未完成，1表示完成//    char LEVEL_X_IS_COMPLETED[20];        //某关卡得到的星星数目    char LEVEL_SLOTX_STAR_NUMBER[MAX_CHAR_LENGHT];    //剩余星星数目    char SLOT_X_STAR_LEFT[MAX_CHAR_LENGHT];    //某存档通关数    char SLOT_X_COMPLETE_COUNT[MAX_CHAR_LENGHT];        //某存档最新开启的    char LEVEL_SLOTX_NEW_OPEN[MAX_CHAR_LENGHT];        //总星星数    char SLOT_X_STAR_NUMBER_SUM[MAX_CHAR_LENGHT];        int GAME_SUM_STAR_NUMBER;        //商店    char SLOTX_SHOP[MAX_CHAR_LENGHT];        //宝石    char SLOTX_DIAMOND_NUMBER[MAX_CHAR_LENGHT];        int SLOTNUM;    //实时金钱    int CURRENT_MONEY;    //实时生命    int CURRENT_LIFE;        int CURRENT_LEVEL;        //火石倒计时的时间    float THUNDER_STONE_PERIOD;    //伞兵倒计时时间    float PARATROOPER_PERIOD;        float MONSTERINFOLAYER_UPDATE_PERIOD;        float MONSTER_FROZEN_TIME;        void setSlotNumber(int tag);            void eraseAllMonsterVector();        void eraseAllMonsterInusedVector();    BaseMonster* getInusedMonster(int monsterType);    private:    static GameManager * _gameManagerInstance;    void readGameConfigFile();};#endif /* defined(__thiefTD__GameManager__) */