#include "CossbowHunterTower.h"#include "GameManager.h"#include "Arrow.h"#include "SimplePanleLayer.h"#include "BaseMap.h"bool CossbowHunterTower::init(){	if (!BaseArrowTower::init()) {		return false;	}    	this->setTowerType(TOWER_TYPE_COSSBOW);//	this->setBuildMoney(550);//	this->setScope(200.0f);//    this->setForce(24);//    this->setShootPeriod(0.5f);        this->initCossbowHunterTowerBase();    this->playHawkAnimation();	_attackCount = 0;	this->schedule(schedule_selector(CossbowHunterTower::shoot), this->getShootPeriod());	SoundManager::playCrossbowReady();	return true;}void CossbowHunterTower::initCossbowHunterTowerBase(){    towerBase = Sprite::createWithSpriteFrameName("CossbowHunter_tower.png");        shooter_1 = Sprite::createWithSpriteFrameName("CossbowHunter_shooter_0001.png");    shooter_2 = Sprite::createWithSpriteFrameName("CossbowHunter_shooter_0001.png");        shooter_1->setPosition(Point(towerBase->getContentSize().width  / 2 - shooter_1->getContentSize().width / 2,                                 towerBase->getContentSize().height / 2 + shooter_1->getContentSize().height / 2));    shooter_2->setPosition(Point(towerBase->getContentSize().width  / 2 + shooter_2->getContentSize().width / 2,                                 towerBase->getContentSize().height / 2 + shooter_2->getContentSize().height / 2));        towerBase->addChild(shooter_1);    towerBase->addChild(shooter_2);        this->addChild(towerBase, BaseTowerDrawingOrderTowerBase);}void CossbowHunterTower::playHawkAnimation() {    _hawk = Sprite::createWithSpriteFrameName("CossbowHunter_hawk_0001.png");    _hawk->setPosition(Point(0,                             20));    this->addChild(_hawk, BaseTowerDrawingOrderAdditional);    _hawk->runAction(RepeatForever::create(Animate::create(_hawkAnimation)));}//void CossbowHunterTower::showUpdateMenu()//{//	auto simplePanleLayer = SimplePanleLayer::create();//	simplePanleLayer->setTag(_terrain->getTag() + 100);//	simplePanleLayer->setTower(this);//	simplePanleLayer->setPosition(this->getParent()->getPosition());//	static_cast<BaseMap*>(this->getParent()->getParent())->mTouchLayer->addChild(simplePanleLayer);//	simplePanleLayer->playShowAnimation();//	_isUpdateMenuShown = true;//}void CossbowHunterTower::prepareAnimation() {    _hawkAnimation        = AnimationCache::getInstance()->getAnimation("CossbowHunter_hawk");    _shooterDownAnimation = AnimationCache::getInstance()->getAnimation("CossbowHunter_shooter_down");    _shooterUpAnimation   = AnimationCache::getInstance()->getAnimation("CossbowHunter_shooter_up");}void CossbowHunterTower::shoot(float dt){//	this->checkNearestMonster();    _nearestMonster = this->getCanAttackMonster();    	if(_nearestMonster != NULL && _nearestMonster->getCurrentHP() > 0 )    {		_attackCount ++;		if (_attackCount < 3) {			_currentBullet = this->getArrowTowerBullet();                        Point shootVector = _nearestMonster->getMonsterPosition() - this->getParent()->getPosition();			auto position = _currentBullet->getPosition()-shootVector;			auto rotation = atan2(position.y,position.x);			float angleDegrees = CC_RADIANS_TO_DEGREES(rotation);			_currentBullet->setRotation(180.0f-angleDegrees);					if (shootVector.x - _currentBullet->getPosition().x <= 0) //向左攻击			{				if (_shooterTag == ArrowShooterTag_1)//轮到1号弓箭手				{					_currentBullet->setPosition(Point(0, 30));//子弹设置在弓箭手所在位置					shooter_1->setFlippedX(true);					if(shootVector.y - _currentBullet->getPosition().y <= 0) {						//攻击动画						shooter_1->runAction(Animate::create(_shooterDownAnimation));					} else {						shooter_1->runAction(Animate::create(_shooterUpAnimation));					}					_shooterTag = ArrowShooterTag_2;                } else  { //轮到2号弓箭手					_currentBullet->setPosition(Point(10, 30));					shooter_2->setFlippedX(true);					if (shootVector.y - _currentBullet->getPosition().y <= 0) {						shooter_2->runAction(Animate::create(_shooterDownAnimation));					}else{						shooter_2->runAction(Animate::create(_shooterUpAnimation));					}					_shooterTag = ArrowShooterTag_1;				}			} else {				if (_shooterTag == ArrowShooterTag_1)				{					_currentBullet->setPosition(Point(0, 30));					shooter_1->setFlippedX(false);					if(shootVector.y - _currentBullet->getPosition().y<=0)					{						shooter_1->runAction(Animate::create(_shooterDownAnimation));					}else{						shooter_1->runAction(Animate::create(_shooterUpAnimation));					}					_shooterTag = ArrowShooterTag_2;				} else {					_currentBullet->setPosition(Point(10,30));					shooter_2->setFlippedX(false);					if(shootVector.y - _currentBullet->getPosition().y<=0)					{						shooter_2->runAction(Animate::create(_shooterDownAnimation));					}else{						shooter_2->runAction(Animate::create(_shooterUpAnimation));					}					_shooterTag = ArrowShooterTag_1;				}			}			//弧线			if(_shooterTag == ArrowShooterTag_1)				SoundManager::playArrowShoot1();			else				SoundManager::playArrowShoot2();                        float duringTime = this->caculateSpendTime(_nearestMonster->getMonsterPosition(), _currentBullet->getBulletSpeed());			auto action = Spawn::create(MoveTo::create(duringTime, shootVector),                                        NULL);			//攻击属性给弓箭			_currentBullet->setBulletAction(action);			_currentBullet->shoot();			_currentBullet = NULL;		} else {			Point shootVector = _nearestMonster->getMonsterPosition() - this->getParent()->getPosition();            //向左攻击			if (shootVector.x - this->getParent()->getPosition().x <= 0) {                //轮到1号弓箭手				if(_shooterTag == ArrowShooterTag_1) {					shooter_1->setFlippedX(false);					if (shootVector.y - this->getParent()->getPosition().y <= 0) {						//攻击动画						shooter_1->runAction(Animate::create(AnimationCache::getInstance()->getAnimation("CossbowHunter_shooter_skill_down")));					} else {						shooter_1->runAction(Animate::create(AnimationCache::getInstance()->getAnimation("CossbowHunter_shooter_skill_up")));					}					_shooterTag = ArrowShooterTag_2;                //轮到2号弓箭手				} else {					shooter_2->setFlippedX(false);					if (shootVector.y - this->getParent()->getPosition().y <= 0) {						shooter_2->runAction(Animate::create(AnimationCache::getInstance()->getAnimation("CossbowHunter_shooter_skill_down")));					} else {						shooter_2->runAction(Animate::create(AnimationCache::getInstance()->getAnimation("CossbowHunter_shooter_skill_up")));					}					_shooterTag = ArrowShooterTag_1;				}			} else {				if(_shooterTag == ArrowShooterTag_1) {					shooter_1->setFlippedX(true);					if (shootVector.y - this->getParent()->getPosition().y <= 0) {						shooter_1->runAction(Animate::create(AnimationCache::getInstance()->getAnimation("CossbowHunter_shooter_skill_down")));					} else {						shooter_1->runAction(Animate::create(AnimationCache::getInstance()->getAnimation("CossbowHunter_shooter_skill_up")));					}					_shooterTag = ArrowShooterTag_2;				} else {					shooter_2->setFlippedX(true);					if(shootVector.y - this->getParent()->getPosition().y <= 0)					{						shooter_2->runAction(Animate::create(AnimationCache::getInstance()->getAnimation("CossbowHunter_shooter_skill_down")));					}else{						shooter_2->runAction(Animate::create(AnimationCache::getInstance()->getAnimation("CossbowHunter_shooter_skill_up")));					}					_shooterTag = ArrowShooterTag_1;				}			}			auto currentHP = _nearestMonster->getCurrentHP();			SoundManager::playCrossbowMultishot();			currentHP =  currentHP - 100 + _nearestMonster->getArmor();                			if (currentHP <= 0) currentHP = 0;			_nearestMonster->setCurrentHP( currentHP );			_nearestMonster->getHpBar()->setPercentage((currentHP / _nearestMonster->getMaxHp()) * 100);			_nearestMonster->hurt();    			if (currentHP == 0) _nearestMonster->death();			_attackCount = 0;		}	}}