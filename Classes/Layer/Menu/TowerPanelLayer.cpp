#include "TowerPanelLayer.h"#include "SimpleArrowTowerlvl1.h"#include "SimpleArtilleryTowerlvl1.h"#include "SimpleMageTowerlvl1.h"#include "BaseBarracksTower.h"#include "Terrain.h"#include "GameManager.h"#include "BaseMap.h"USING_NS_CC;bool TowerPanelLayer::init() {    if (! BasePanelLayer::init()) {        return false;    }        _temporaryTower = NULL;    _isBuilding = false;        return true;}void TowerPanelLayer::addTower(int type){    static_cast<BaseMap*>(this->getParent()->getParent())->playerStateMenu->hideTowerInfo();    switch (type)    {        case(1):{            auto arrowTower = SimpleArrowTowerlvl1::create();            arrowTower->setPosition(Point(0,20));            arrowTower->setTag(_terrain->getTag());            arrowTower->setTerrain(_terrain);            _terrain->addChild(arrowTower);            GameManager::getInstance()->CURRENT_MONEY = GameManager::getInstance()->CURRENT_MONEY - arrowTower->getBuildMoney();        }            break;        case(2):{            auto barracksTower = BaseBarracksTower::create();            barracksTower->setPosition(Point(0,20));            barracksTower->setTag(_terrain->getTag());            barracksTower->setTerrain(_terrain);            _terrain->addChild(barracksTower);            barracksTower->playBuildingAnimation();            GameManager::getInstance()->CURRENT_MONEY = GameManager::getInstance()->CURRENT_MONEY - barracksTower->getBuildMoney();        }            break;        case(4):{            auto artilleryTower = SimpleArtilleryTowerlvl1::create();            artilleryTower->setPosition(Point(0,20));            artilleryTower->setTag(_terrain->getTag());            artilleryTower->setTerrain(_terrain);            _terrain->addChild(artilleryTower);            GameManager::getInstance()->CURRENT_MONEY = GameManager::getInstance()->CURRENT_MONEY - artilleryTower->getBuildMoney();        }            break;        case(3):            auto mageTower = SimpleMageTowerlvl1::create();            mageTower->setPosition(Point(0,20));            mageTower->setTag(_terrain->getTag());            mageTower->setTerrain(_terrain);            _terrain->addChild(mageTower);            GameManager::getInstance()->CURRENT_MONEY = GameManager::getInstance()->CURRENT_MONEY - mageTower->getBuildMoney();            break;    }    SoundManager::playTowerBuilding();    _isBuilding = true;    _terrain->setTerrainBaseSpriteVisible(false);    this->setVisible(false);}void TowerPanelLayer::addTemporaryTower(int type) {    if (_temporaryTower != NULL) {        this->removeChild(_temporaryTower, true);    }    _circle->setVisible(true);        switch (type)    {        case(1):{            _temporaryTower = Sprite::createWithSpriteFrameName("tower_preview_archer.png");            _temporaryTower->setPosition(Point(0,25));            static_cast<BaseMap*>(this->getParent()->getParent())->playerStateMenu->showTowerInfo(TOWER_TYPE_ARCHER_1);}            break;        case(2):{            _temporaryTower = Sprite::createWithSpriteFrameName("tower_preview_barrack.png");            _temporaryTower->setPosition(Point(0,25));            static_cast<BaseMap*>(this->getParent()->getParent())->playerStateMenu->showTowerInfo(TOWER_TYPE_BARAACKS_1);}            break;        case(3):{            _temporaryTower = Sprite::createWithSpriteFrameName("tower_preview_mage.png");            _temporaryTower->setPosition(Point(0,10));            static_cast<BaseMap*>(this->getParent()->getParent())->playerStateMenu->showTowerInfo(TOWER_TYPE_MAGE_1);}            break;        case(4):{            _temporaryTower = Sprite::createWithSpriteFrameName("tower_preview_artillery.png");            _temporaryTower->setPosition(Point(0,25));            static_cast<BaseMap*>(this->getParent()->getParent())->playerStateMenu->showTowerInfo(TOWER_TYPE_ARTILLERY_1);}            break;    }    this->addChild(_temporaryTower, PanelLayerDrawingOrderCircle);}void TowerPanelLayer::addIcons() {    _circle = Circle::create();    _circle->setVisible(false);    this->addChild(_circle, PanelLayerDrawingOrderCircle);        archerIcon = BaseBuildIcon::createIcon(1, 70);//    archerIcon->setMoney(70);    archerIcon->setPosition(Point(-(_ringBackgroundSprite->getContentSize().width / 4 + 20),                                  _ringBackgroundSprite->getContentSize().height / 4 + 30));    this->addChild(archerIcon, PanelLayerDrawingOrderIcon);        artilleryIcon = BaseBuildIcon::createIcon(4, 120);    artilleryIcon->setPosition(Point(_ringBackgroundSprite->getContentSize().width / 4 + 20,                                     -(_ringBackgroundSprite->getContentSize().height / 4 + 30)));    this->addChild(artilleryIcon, PanelLayerDrawingOrderIcon);        barracksIcon = BaseBuildIcon::createIcon(2, 100);    barracksIcon->setPosition(Point(_ringBackgroundSprite->getContentSize().width / 4 + 20,                                    _ringBackgroundSprite->getContentSize().height / 4 + 30));    this->addChild(barracksIcon, PanelLayerDrawingOrderIcon);        magicIcon = BaseBuildIcon::createIcon(3, 100);    magicIcon->setPosition(Point(-(_ringBackgroundSprite->getContentSize().width /4 + 20),                                 -(_ringBackgroundSprite->getContentSize().height / 4 + 30)));    this->addChild(magicIcon, PanelLayerDrawingOrderIcon);        auto touchListener = EventListenerTouchOneByOne::create();    touchListener->setSwallowTouches(true);    touchListener->onTouchBegan = CC_CALLBACK_2(TowerPanelLayer::onBuildIconTouchBegan, this);    touchListener->onTouchEnded = CC_CALLBACK_2(TowerPanelLayer::onBuildIconTouchEnded, this);    _eventDispatcher->addEventListenerWithSceneGraphPriority(touchListener, archerIcon);    _eventDispatcher->addEventListenerWithSceneGraphPriority(touchListener->clone(), artilleryIcon);    _eventDispatcher->addEventListenerWithSceneGraphPriority(touchListener->clone(), barracksIcon);    _eventDispatcher->addEventListenerWithSceneGraphPriority(touchListener->clone(), magicIcon);}#pragma mark - for callback functionbool TowerPanelLayer::onBuildIconTouchBegan(Touch *touch, Event *event) {    auto target = static_cast<BaseBuildIcon *>(event->getCurrentTarget());    Point locationInNode = target->convertTouchToNodeSpace(touch);    Size size = target->getSize();    Rect rect = Rect(0 - size.width / 2, 0 - size.height / 2, size.width, size.height);    if (rect.containsPoint(locationInNode)) {        if(target->getIsSelected()) { //如果已经选中（第二次按下）            //如果钱够用            if(target->getIsMoneyEnough()) {                this->addTower(target->getType());            }        } else {//第一次按下            archerIcon->setSelected(false);            artilleryIcon->setSelected(false);            barracksIcon->setSelected(false);            magicIcon->setSelected(false);                        target->setSelected(true);//设置为选中状态            this->addTemporaryTower(target->getType());        }        return true;    }    return false;}void TowerPanelLayer::onBuildIconTouchEnded(Touch* touch, Event* event) {    if(_isBuilding)    {        removeFromParent();    }}