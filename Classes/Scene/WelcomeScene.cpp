#include "WelcomeScene.h"#include "GameView.h"#include "TransitionGame.h"#include "SlotMenu.h"#include "SoundManager.h"#include "SimpleAudioEngine.h" #include "Information.h"#include "MenuMusicBackgroundButton.hpp"#include "MenuMusicEffectButton.hpp"#include "Utility.h"#include "Failure.h"#include "SpriteCacheManager.h"using namespace CocosDenshion;Scene* WelcomeScene::createScene(){    auto scene = Scene::create();    auto layer = WelcomeScene::create();    scene->addChild(layer);    return scene;}bool WelcomeScene::init() {    if ( !Layer::init() ) {        return false;    }	//设计分辨率可视区域大小 	_visibleSize = Director::getInstance()->getVisibleSize();        //播放背景音乐    SoundManager::playWelcomeBackMusic();        //载入所需要的图片文件    SpriteCacheManager::getInstance()->loadWelcomeSceneSpriteFile();    	//init function	this->initBackgroundImage();    this->initMemuButton();    this->initLogoImage();    this->initStartButton();    this->initCreditButton();    this->initSaveMenu();     //添加键盘监听    this->addKeyBoardListener();    return true;}void WelcomeScene::onEnterTransitionDidFinish() {    auto Sequence = Sequence::create(ScaleTo::create(0.5f, 1.5f, 1.5f),                                     ScaleTo::create(0.2f, 1.0f, 1.0f),                                     CallFuncN::create(CC_CALLBACK_0(WelcomeScene::startLogoAnimation, this)),                                     CallFuncN::create(CC_CALLBACK_0(WelcomeScene::startStartButtonAnimation, this)),                                     CallFuncN::create(CC_CALLBACK_0(WelcomeScene::startCreditButtonAnimation, this)),                                     NULL);    _logoSprite->runAction(Sequence);}void WelcomeScene::onExit() {    Layer::onExit();        SpriteCacheManager::getInstance()->releaseWelcomeSceneSpriteFile();}#pragma mark for keyboard listenervoid WelcomeScene::addKeyBoardListener(){    auto listenerkeyPad = EventListenerKeyboard::create();    listenerkeyPad->onKeyReleased = CC_CALLBACK_2(WelcomeScene::onKeyReleased, this);    Director::getInstance()->getEventDispatcher()->addEventListenerWithSceneGraphPriority(listenerkeyPad, this);}#pragma mark for touch functionbool WelcomeScene::onStartTouchBegan(Touch *touch, Event *event) {    auto target = dynamic_cast <Sprite*>(event->getCurrentTarget());        Point locationInNode = target->convertTouchToNodeSpace(touch);        Size size = target->getContentSize();    Rect rect = Rect(0 + 40, 0 + 30, size.width - 80, size.height / 3 +15);        if (rect.containsPoint(locationInNode)&&target->isVisible())    {        SoundManager::playClickEffect();        //改变Button式样达到点击效果        target->setSpriteFrame("menu_startchain_0002.png");        return true;    }    return false;}void WelcomeScene::onStartTouchEnded(Touch *touch, Event *event) {    static_cast<Sprite*>(event->getCurrentTarget())->setSpriteFrame("menu_startchain_0001.png");    _creditButton->setVisible(false);    _creditButton->runAction(MoveTo::create(0.3f, Point(_logoLocation.x, _logoLocation.y - 180)));    _startButton->runAction(Sequence::create(                                            DelayTime::create(0.3f),                                            MoveTo::create(0.3f, Point(_logoLocation.x, _logoLocation.y)), NULL));    _startButton->setVisible(false);    this->_saveMenu->setSaveMenuVisible();}bool WelcomeScene::onCreditTouchBegan(Touch *touch, Event *event) {    auto target = static_cast<Sprite*>(event->getCurrentTarget());        Point locationInNode = target->convertTouchToNodeSpace(touch);        Size size = target->getContentSize();    Rect rect = Rect(0+40, 0+30, size.width-80, size.height/3 +15);    if (rect.containsPoint(locationInNode)&&target->isVisible())    {        SoundManager::playClickEffect();        //改变Button式样达到点击效果        target->setSpriteFrame(SpriteFrameCache::getInstance()->getSpriteFrameByName("menu_creditschain_0002.png"));        return true;    }    return false;}void WelcomeScene::onCreditTouchEnded(Touch *touch, Event *event) {    static_cast<Sprite*>(event->getCurrentTarget())->setSpriteFrame(SpriteFrameCache::getInstance()->getSpriteFrameByName("menu_creditschain_0001.png"));    Director::getInstance()->replaceScene(Information::createScene());}void WelcomeScene::onKeyReleased(EventKeyboard::KeyCode keycode, Event* event) {    switch (keycode)    {        case EventKeyboard::KeyCode::KEY_BACK:   //返回键听            if (_startButton->isVisible()) {                SimpleAudioEngine::getInstance()->end();                Director::getInstance()->end();#if (CC_TARGET_PLATFORM == CC_PLATFORM_IOS || CC_TARGET_PLATFORM == CC_PLATFORM_ANDROID )                exit(0);#endif            } else {                this->_saveMenu->setSaveMenuInVisible();//                setSaveMenuInVisible();                startStartButtonAnimation();            }            break;        case EventKeyboard::KeyCode::KEY_MENU:      //菜单监听            break;        case::EventKeyboard::KeyCode::KEY_HOME:            break;        default:            break;    }}#pragma mark for init functionvoid WelcomeScene::initBackgroundImage() {	auto backgroundSprite = Sprite::createWithSpriteFrameName("mainmenu_bg.png");	backgroundSprite->setPosition(Point(_visibleSize.width / 2, _visibleSize.height / 2));//    backgroundSprite->setScale(1.2f);	this->addChild(backgroundSprite, WelcomeSceneDrawingOrderBackground);}void WelcomeScene::initMemuButton() {    MenuMusicBackgroundButton *musicBackgroundButton = MenuMusicBackgroundButton::create();    musicBackgroundButton->setPosition(Point(_visibleSize.width * 0.15, _visibleSize.height * 0.9));        MenuMusicEffectButton *musicButton = MenuMusicEffectButton::create();    musicButton->setPosition(Point(_visibleSize.width * 0.05, _visibleSize.height * 0.9));    auto menu = Menu::create(musicButton, musicBackgroundButton, NULL);    menu->setPosition(Vec2::ZERO);    this->addChild(menu, WelcomeSceneDrawingOrderButton);}void WelcomeScene::initLogoImage(){	//从SpriteFrameCache中加载图片	_logoSprite = Sprite::createWithSpriteFrameName("logo.png");	//设置锚点为图片中央	_logoSprite->setAnchorPoint(Vec2::ANCHOR_MIDDLE);	//计算Logo图应该在的位置	_logoLocation = Vec2(_visibleSize.width/2, _visibleSize.height - _logoSprite->getContentSize().height / 2);	//设置位置,初始大小//	sprite_Logo->setScale(0.02f);	_logoSprite->setPosition(_logoLocation);	this->addChild(_logoSprite, WelcomeSceneDrawingOrderLogo);}void WelcomeScene::initStartButton(){    //从资源中加载图片    _startButton = Sprite::createWithSpriteFrameName("menu_startchain_0001.png");    //设置锚点为图片中央    _startButton->setAnchorPoint(Vec2::ANCHOR_MIDDLE);    //初始设置为不可见    _startButton->setVisible(false);    //设置位置    _startButton->setPosition(_logoLocation);    //添加    this->addChild(_startButton, WelcomeSceneDrawingOrderStart);        auto buttonStartListener = EventListenerTouchOneByOne::create();    buttonStartListener->onTouchBegan = CC_CALLBACK_2(WelcomeScene::onStartTouchBegan, this);    buttonStartListener->onTouchEnded = CC_CALLBACK_2(WelcomeScene::onStartTouchEnded, this);    Director::getInstance()->getEventDispatcher()->addEventListenerWithSceneGraphPriority(buttonStartListener, _startButton);}void WelcomeScene::initCreditButton() {    _creditButton = Sprite::createWithSpriteFrameName("menu_creditschain_0001.png");    _creditButton->setVisible(false);    _creditButton->setPosition(_logoLocation.x, _logoLocation.y - 180);    this->addChild(_creditButton, WelcomeSceneDrawingOrderCredit);        auto creditButtonListener = EventListenerTouchOneByOne::create();    creditButtonListener->onTouchBegan = CC_CALLBACK_2(WelcomeScene::onCreditTouchBegan, this);    creditButtonListener->onTouchEnded = CC_CALLBACK_2(WelcomeScene::onCreditTouchEnded, this);    Director::getInstance()->getEventDispatcher()->addEventListenerWithSceneGraphPriority(creditButtonListener, _creditButton);}void WelcomeScene::initSaveMenu() {    _saveMenu = SaveMenu::create();    Point saveMenuPoint = Point(_visibleSize.width / 2,                                _visibleSize.height / 5 * 2 );    this->_saveMenu->setMoveToPoint(saveMenuPoint);    this->_saveMenu->setDelegate(this);    this->_saveMenu->setPosition(Point(_visibleSize.width / 2,                                      -_visibleSize.height / 5 * 2));        this->addChild(this->_saveMenu, WelcomeSceneDrawingOrderSaveMenu);}#pragma mark -- for animationvoid WelcomeScene::startLogoAnimation() {	//从资源中加图片，设置锚点和位置	auto logoAnimationSprite = Sprite::createWithSpriteFrameName("logo_brillo_0001.png");	logoAnimationSprite->setPosition(_logoLocation);	//生成帧动画	SpriteFrame* frame = nullptr;	Vector<SpriteFrame*> animationFrames;	for (int len = 1;len <= 21; len++) {		frame = SpriteFrameCache::getInstance()->getSpriteFrameByName(Utility::string_format("logo_brillo_00%02d.png", len));		if(frame != nullptr)			animationFrames.pushBack(frame);	}	this->addChild(logoAnimationSprite, WelcomeSceneDrawingOrderLogoAnimation);	auto logoAnimation = Animation::createWithSpriteFrames(animationFrames, 0.1f);	//播放动画	logoAnimationSprite->runAction(RepeatForever::create(Animate::create(logoAnimation)));}void WelcomeScene::startStartButtonAnimation() {	//设置可见	_startButton->setVisible(true);	//执行平移动画	_startButton->runAction(MoveTo::create(0.3f, Point(_visibleSize.width/2,                                                       _visibleSize.height                                                      - _logoSprite->getContentSize().height                                                      )));}void WelcomeScene::startCreditButtonAnimation() {	//执行平移动画	_creditButton->runAction(Sequence::create(                                             DelayTime::create(0.3f),                                             CallFuncN::create(CC_CALLBACK_0(Sprite::setVisible, _creditButton, true)),                                             MoveTo::create(0.3f, Point(_visibleSize.width/2,                                                                        _visibleSize.height                                                                        - _logoSprite->getContentSize().height                                                                        - _startButton->getContentSize().height/2 - 20                                                                      /*  - creditButton->getContentSize().height/2 */)),                                             NULL));}#pragma mark -- for delegate functionvoid WelcomeScene::onStartOperate() {    this->startStartButtonAnimation();    this->startCreditButtonAnimation();}