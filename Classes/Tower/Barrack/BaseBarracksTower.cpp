#include "BaseBarracksTower.h"#include "BarrackSoldier.h"#include "GameManager.h"#include "BaseMap.h"#include "UpdatePanleLayerWithFlag.h"#include "UpdatePanleLayer2WithFlag.h"#include "SimplePanleLayer.h"#include "Assassin.h"#include "Templar.h"#include "SimplePanleLayerWithFlag.h"bool BaseBarracksTower::init() {    if (!BaseTower::init()) {        return false;    }        this->addTerrainSprite("terrain_barrack_0004.png");        this->setTowerType(TOWER_TYPE_BARAACKS_1);//    this->setLevel(1);//    this->setScope(160);//    this->setUpdateMoney(100);//    this->setBuildMoney(100);    //    _doorOpenAction = ;    return true;}#pragma mark - for animation functionvoid BaseBarracksTower::prepareAnimation() {    _doorOpenAnimation = AnimationCache::getInstance()->getAnimation(                                       StringUtils::format("level%d_barracks_opendoor", getLevel()).c_str());}void BaseBarracksTower::playDoorOpenAnimation() {    SoundManager::playBarrackOpendoor();    _doorSprite->runAction(Animate::create(_doorOpenAnimation));}#pragma mark - for init functionvoid BaseBarracksTower::initTownForReady(float dt){    SoundManager::playBarrackReady();    this->initBarrackTower();}void BaseBarracksTower::initBarrackTower(){	towerBase   = Sprite::createWithSpriteFrameName(StringUtils::format("tower_barracks_lvl%d_layer1_0001.png", _level).c_str());    this->addChild(towerBase, BaseTowerDrawingOrderTowerBase);	_doorSprite = Sprite::createWithSpriteFrameName(StringUtils::format("tower_barracks_lvl%d_layer2_0001.png", _level).c_str());	this->addChild(_doorSprite, BaseTowerDrawingOrderAdditional);		auto soldier_1 = BarrackSoldier::createSoldier(Point(40, -30), _level);	auto soldier_2 = BarrackSoldier::createSoldier(Point(-40, -30), _level);	auto soldier_3 = BarrackSoldier::createSoldier(Point(0, -40), _level);    this->addChild(soldier_1, BaseTowerDrawingOrderSoldier);    this->addChild(soldier_2, BaseTowerDrawingOrderSoldier);    this->addChild(soldier_3, BaseTowerDrawingOrderSoldier);	_soldierVector.pushBack(soldier_1);	_soldierVector.pushBack(soldier_2);	_soldierVector.pushBack(soldier_3);    this->playDoorOpenAnimation();	this->schedule(schedule_selector(BaseBarracksTower::cureSoldiers), 10.0f, -1, 10.0f);}#pragma mark - for update functionvoid BaseBarracksTower::showUpdateMenu(){	if (_level < 3) {		auto updatePanleLayer = UpdatePanleLayerWithFlag::create();		updatePanleLayer->setTag(_terrain->getTag() + UPDATE_MENU_TAG);		updatePanleLayer->setTower(this);		updatePanleLayer->setPosition(this->getTowerPosition());        		static_cast<BaseMap*>(this->getParent()->getParent())->mTouchLayer->addChild(updatePanleLayer);		if (GameManager::getInstance()->CURRENT_LEVEL <= this->getUpdate1StartLevel()) {			updatePanleLayer->setCanUpdate(false);		}        updatePanleLayer->playShowAnimation();		_isUpdateMenuShown = true;	} else if (_level == 3) {		auto updatePanleLayer = UpdatePanleLayer2WithFlag::createPanle(24, 23, this->getUpdateMoney(), this->getUpdateMoney());		updatePanleLayer->setTag(_terrain->getTag() + UPDATE_MENU_TAG);		updatePanleLayer->setTower(this);		updatePanleLayer->setPosition(this->getTowerPosition());        		static_cast<BaseMap*>(this->getParent()->getParent())->mTouchLayer->addChild(updatePanleLayer);		if (GameManager::getInstance()->CURRENT_LEVEL <= this->getUpdate1StartLevel()) {            updatePanleLayer->setCanUpdate1(false);		}		if (GameManager::getInstance()->CURRENT_LEVEL <= this->getUpdate2StartLevel()) {			updatePanleLayer->setCanUpdate2(false);		}		updatePanleLayer->playShowAnimation();		_isUpdateMenuShown = true;	} else {		auto updatePanleLayer = SimplePanleLayerWithFlag::create();		updatePanleLayer->setTag(_terrain->getTag() + UPDATE_MENU_TAG);		updatePanleLayer->setTower(this);		updatePanleLayer->setPosition(this->getParent()->getPosition());		static_cast<BaseMap*>(this->getParent()->getParent())->mTouchLayer->addChild(updatePanleLayer);		updatePanleLayer->playShowAnimation();		_isUpdateMenuShown = true;	}}void BaseBarracksTower::update1() {	_level = 4;	this->setTowerType(TOWER_TYPE_ASSASSIN);	_buildMoney = _buildMoney + this->getUpdateMoney();	towerBase -> setSpriteFrame(SpriteFrameCache::getInstance()->getSpriteFrameByName("tower_assasins_layer1_0001.png"));	_doorSprite->setSpriteFrame(SpriteFrameCache::getInstance()->getSpriteFrameByName("tower_assasins_layer2_0001.png"));    	for(int i = 0; i < _soldierVector.size(); i++)	{		auto assassin = Assassin::createAssassin(_soldierVector.at(i)->getLocation());		assassin->setPosition(_soldierVector.at(i)->getPosition());		if (_soldierVector.at(i)->getNearestMonster() != NULL)			assassin->setNearestMonster(_soldierVector.at(i)->getNearestMonster());		_soldierVector.at(i)->removeFromParent();		_soldierVector.replace(i, assassin);		this->addChild(assassin);//		assassin->startGuardState();	}	_isUpdateMenuShown = false;}void BaseBarracksTower::update2(){	_level = 5;	this->setTowerType(TOWER_TYPE_TEMPLAR);    	_buildMoney = _buildMoney + 230;	towerBase->setSpriteFrame(SpriteFrameCache::getInstance()->getSpriteFrameByName("tower_templars_layer1_0001.png"));	_doorSprite->setSpriteFrame(SpriteFrameCache::getInstance()->getSpriteFrameByName("tower_templars_layer2_0001.png"));    	auto fire1 = Sprite::createWithSpriteFrameName("TemplarTower_Fire_0001.png");	fire1->setPosition(Point(20, -20));	this->addChild(fire1);	fire1->runAction(RepeatForever::create(Animate::create(AnimationCache::getInstance()->getAnimation("level5_barracks_fire"))));    	auto fire2 = Sprite::createWithSpriteFrameName("TemplarTower_Fire_0001.png");	fire2->setPosition(Point(-20, -20));	this->addChild(fire2);	fire2->runAction(RepeatForever::create(Animate::create(AnimationCache::getInstance()->getAnimation("level5_barracks_fire"))));    	for (int i = 0; i < _soldierVector.size() ;i++)	{		auto templar = Templar::createTemplar(_soldierVector.at(i)->getLocation());		templar->setPosition(_soldierVector.at(i)->getPosition());		if (_soldierVector.at(i)->getNearestMonster() != NULL)			templar->setNearestMonster(_soldierVector.at(i)->getNearestMonster());		_soldierVector.at(i)->removeFromParent();		_soldierVector.replace(i, templar);		this->addChild(templar);//		templar->cheakState();	}    	_isUpdateMenuShown = false;}void BaseBarracksTower::updateTower(){	_level ++;	if(_level == 2){		SoundManager::playBarrack2Ready();		this->setTowerType(TOWER_TYPE_BARAACKS_2);	}	if(_level == 3){		SoundManager::playBarrack3Ready();		this->setTowerType(TOWER_TYPE_BARAACKS_3);	}	    _buildMoney += 100;        //更新背景和门	towerBase->setSpriteFrame(SpriteFrameCache::getInstance()->getSpriteFrameByName(                            StringUtils::format("tower_barracks_lvl%d_layer1_0001.png", _level).c_str()));	_doorSprite->setSpriteFrame(SpriteFrameCache::getInstance()->getSpriteFrameByName(                            StringUtils::format("tower_barracks_lvl%d_layer2_0001.png", _level).c_str()));    	//更新战士    for(int i = 0; i < _soldierVector.size(); i++) {		_soldierVector.at(i)->updateSoldier(_level);	}    	_isUpdateMenuShown = false;}#pragma mark - for others functionvoid BaseBarracksTower::sellTower(){    static_cast<BaseMap*>(this->getParent()->getParent())->playerStateMenu->hideTowerInfo();    static_cast<Terrain*>(this->getParent())->setTerrainBaseSpriteVisible(true);    for(int i = 0; i < _soldierVector.size(); i++){        if(_soldierVector.at(i) != NULL){            if(_soldierVector.at(i)->getNearestMonster() != NULL               && _soldierVector.at(i)->getNearestMonster()->getMonsterState() != MonsterStateDeath)                _soldierVector.at(i)->getNearestMonster()->restartWalking();                        _soldierVector.at(i)->stopAllActions();            _soldierVector.at(i)->unscheduleAllCallbacks();        }    }        static_cast<Terrain*>(this->getParent())->executeSmokeEffect();    this->unscheduleAllCallbacks();    this->removeAllChildren();    this->removeFromParent();}void BaseBarracksTower::cureSoldiers(float dt){    for(int i = 0; i < _soldierVector.size(); i++)    {        auto soldier = _soldierVector.at(i);        if (soldier->getState() == SoldierStateWait) {            soldier->setCurrentHP(soldier->getMaxHp());            soldier->setHpPercentage(100);            soldier->getHpBar()->setPercentage(100);        } else if (soldier->getState() == SoldierStateDeath) {            if (_level <= 3) {                this->playDoorOpenAnimation();                soldier->reviveSoldier();//                auto point = soldier->getLocation();//                soldier ->removeFromParent();//                soldier = NULL;//                auto newSoldier = BarrackSoldier::createSoldier(point, _level);//                _soldierVector.replace(i, newSoldier);//                this->addChild(newSoldier);            } else if (_level == 4) {                this->playDoorOpenAnimation();                soldier->reviveSoldier();//                auto point = soldier->getLocation();//                soldier ->removeFromParent();//                soldier = NULL;//                auto asssaain = Assassin::createAssassin(point);//                //                _soldierVector.replace(i, asssaain);//                this->addChild(asssaain);                //                asssaain->startGuardState();            } else if (_level == 5) {                this->playDoorOpenAnimation();                soldier->reviveSoldier();//                //                auto point = soldier->getLocation();//                soldier ->removeFromParent();//                soldier = NULL;//                auto templar = Templar::createTemplar(point);//                //                _soldierVector.replace(i,  templar);//                this->addChild(templar);                //                templar->cheakState();            }        }    }}void BaseBarracksTower::setRallyPoint(Point point){	if (_level == 1 || _level == 2 || _level == 3)		SoundManager::playBarrackMove();	else if (_level == 4 )		SoundManager::playAssassinMove();    	auto rally = point - this->getParent()->getPosition();	_soldierVector.at(0)->setLocation(Point(rally.x + 20, rally.y - 20));	_soldierVector.at(1)->setLocation(Point(rally.x - 20, rally.y - 20));	_soldierVector.at(2)->setLocation(Point(rally.x, rally.y + 20));	for (int i = 0; i < _soldierVector.size(); i++)	{        if (_soldierVector.at(i) != NULL            && _soldierVector.at(i)->getState() != SoldierStateDeath) {                        if(_soldierVector.at(i)->getNearestMonster() != NULL               && _soldierVector.at(i)->getNearestMonster()->getMonsterState() != MonsterStateDeath)                _soldierVector.at(i)->getNearestMonster()->restartWalking();                        _soldierVector.at(i)->runToLocation(_soldierVector.at(i)->getLocation());        }			}}