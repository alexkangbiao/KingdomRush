#include "SimpleArrowTowerlvl1.h"#include "SimpleArrowTowerlvl2.h"#include "UpdatePanelLayer.h"#include "BaseMap.h"#include "GameManager.h"#include "Arrow.h"bool SimpleArrowTowerlvl1::init() {	if (!BaseArrowTower::init()) {		return false;	}	this->setTowerType(TOWER_TYPE_ARCHER_1);        //程序的开头，执行建造动画	this->playBuildingAnimation();	return true;}#pragma mark - for animation functionvoid SimpleArrowTowerlvl1::initTownForReady(float dt) {	SoundManager::playArcherReady();	this->initArrowTowerBase(this->getLevel());	this->schedule(schedule_selector(SimpleArrowTowerlvl1::shoot), this->getShootPeriod());}#pragma mark - for update functionvoid SimpleArrowTowerlvl1::updateTower() {	auto simpleArrowTowerlvl2 = SimpleArrowTowerlvl2::create();	simpleArrowTowerlvl2->setTerrain(_terrain);	simpleArrowTowerlvl2->setTag(_terrain->getTag());	simpleArrowTowerlvl2->setPosition(Point(0, 20));	_terrain->addChild(simpleArrowTowerlvl2);        //删除在缓冲子弹队列中的内容    this->refreshBulletVector();	this->removeTower();}void SimpleArrowTowerlvl1::showUpdateMenu() {	auto updatePanelLayer = UpdatePanelLayer::create();	updatePanelLayer->setTag(_terrain->getTag() + UPDATE_MENU_TAG);	updatePanelLayer->setTower(this);	updatePanelLayer->setPosition(this->getParent()->getPosition());	static_cast<BaseMap*>(this->getParent()->getParent())->mTouchLayer->addChild(updatePanelLayer);	if (GameManager::getInstance()->CURRENT_LEVEL <= this->getUpdate1StartLevel()) {		updatePanelLayer->setCanUpdate(false);	}	updatePanelLayer->playShowAnimation();	_isUpdateMenuShown = true;}