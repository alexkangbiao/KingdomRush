#include "SimpleMageTowerlvl2.h"#include "SimpleMageTowerlvl3.h"#include "updatePanelLayer.h"#include "BaseMap.h"#include "GameManager.h"#include "MageBolt.h"bool SimpleMageTowerlvl2::init(){	if (!BaseMageTower::init())	{		return false;	}	this->setTowerType(TOWER_TYPE_MAGE_2);//	setLevel(2);//    setScope(180.0f);//    setUpdateMoney(240);//    setBuildMoney(260);//    this->setForce(30.0f);//    this->setShootPeriod(2.0f);	this->initMageTower(this->getLevel());	schedule(schedule_selector(SimpleMageTowerlvl2::shoot), this->getShootPeriod());	SoundManager::playMageTower2Ready();	return true;}#pragma mark - for update functionvoid SimpleMageTowerlvl2::updateTower(){	auto simpleMageTowerlvl3 = SimpleMageTowerlvl3::create();	simpleMageTowerlvl3->setTerrain(_terrain);	simpleMageTowerlvl3->setTag(_terrain->getTag());	simpleMageTowerlvl3->setPosition(Point(0,20));	_terrain->addChild(simpleMageTowerlvl3);        //删除在缓冲子弹队列中的内容    this->refreshBulletVector();	this->removeTower();}void SimpleMageTowerlvl2::showUpdateMenu(){	auto updatePanleLayer = UpdatePanelLayer::create();	updatePanleLayer->setTag(_terrain->getTag() + UPDATE_MENU_TAG);	updatePanleLayer->setTower(this);	updatePanleLayer->setPosition(this->getParent()->getPosition());	static_cast<BaseMap*>(this->getParent()->getParent())->mTouchLayer->addChild(updatePanleLayer);	if (GameManager::getInstance()->CURRENT_LEVEL <= this->getUpdate1StartLevel()) {		updatePanleLayer->setCanUpdate(false);	}	updatePanleLayer->playShowAnimation();	_isUpdateMenuShown = true;}