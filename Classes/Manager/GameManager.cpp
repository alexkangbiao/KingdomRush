#include "GameManager.h"GameManager* GameManager::_gameManagerInstance;GameManager* GameManager::getInstance(){    if (_gameManagerInstance == nullptr) {        _gameManagerInstance = new GameManager();                _gameManagerInstance->readGameConfigFile();    }			return _gameManagerInstance;}void GameManager::setSlotNumber(int tag){	SLOTNUM = tag;	sprintf(SLOTX_ISEXIT, "Slot%d", tag);	sprintf(LEVEL_SLOTX_STAR_NUMBER, "Slot%d", tag);    	strcat(LEVEL_SLOTX_STAR_NUMBER, "_Level_%d_star");        sprintf(LEVEL_SLOTX_NEW_OPEN, "Slot%d_NewDown", tag);	sprintf(SLOT_X_COMPLETE_COUNT, "Slot%d_DownCount", tag);	sprintf(SLOT_X_STAR_NUMBER_SUM, "Slot%d_Star", tag);	sprintf(SLOT_X_STAR_LEFT, "Slot%d_StarLeft", tag);	sprintf(SLOTX_DIAMOND_NUMBER, "Slot%d_Gem", tag);	sprintf(SLOTX_SHOP, "Slot%d", tag);    	strcat(SLOTX_SHOP,"_Shop_%d");            LOADED_TAG_TOWER_ANIMATION = false;}void GameManager::eraseAllMonsterVector() {	_gameManagerInstance->monsterVector.clear();}void GameManager::eraseAllMonsterInusedVector() {    _gameManagerInstance->monsterInusedVector.clear();}BaseMonster* GameManager::getInusedMonster(int monsterType) {    for (int i = 0; i < _gameManagerInstance->monsterInusedVector.size(); i++) {        if (_gameManagerInstance->monsterInusedVector.at(i)->getMonsterType() == monsterType) {            return _gameManagerInstance->monsterInusedVector.at(i);        }    }    return nullptr;}void GameManager::readGameConfigFile() {    std::string fileName = "xml/game_config.plist";    auto valueMap = FileUtils::getInstance()->getValueMapFromFile(fileName);        //parse the soldiers data    auto arrayGameConfigs = valueMap.at("gameconfigs").asValueVector();    for (int i = 0; i< arrayGameConfigs.size(); i++) {        auto valueMap = (arrayGameConfigs[i]).asValueMap();        THUNDER_STONE_PERIOD = atof((valueMap["thunderstonetime"]).asString().c_str());        PARATROOPER_PERIOD   = atof((valueMap["paratroopertime"]).asString().c_str());        MONSTER_FROZEN_TIME  = atof((valueMap["monsterfrozentime"]).asString().c_str());            }        GAME_SUM_STAR_NUMBER = 65;        MONSTERINFOLAYER_UPDATE_PERIOD = 0.1f;    }